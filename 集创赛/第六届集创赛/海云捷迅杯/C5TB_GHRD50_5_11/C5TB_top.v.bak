// ============================================================================
// Copyright (c) 2018 by Terasic Technologies Inc.
// ============================================================================
//
// Permission:
//
//   Terasic grants permission to use and modify this code for use
//   in synthesis for all Terasic Development Boards and Altera Development
//   Kits made by Terasic.  Other use of this code, including the selling
//   ,duplication, or modification of any portion is strictly prohibited.
//
// Disclaimer:
//
//   This VHDL/Verilog or C/C++ source code is intended as a design reference
//   which illustrates how these types of functions can be implemented.
//   It is the user's responsibility to verify their design for
//   consistency and functionality through the use of formal
//   verification methods.  Terasic provides no warranty regarding the use
//   or functionality of this code.
//
// ============================================================================
//
//  Terasic Technologies Inc
//  9F., No.176, Sec.2, Gongdao 5th Rd, East Dist, Hsinchu City, 30070. Taiwan
//
//
//                     web: http://www.terasic.com/
//                     email: support@terasic.com
//
// ============================================================================
//Date:  Mon Apr  9 10:58:33 2018
// ============================================================================


module TSOM_top(

//====================HPS=================================== 
      output   [14: 0]   HPS_DDR3_ADDR,		//## HPS_DDR3 ##
      output   [ 2: 0]   HPS_DDR3_BA,
      output             HPS_DDR3_CAS_n,
      output   [ 0: 0]   HPS_DDR3_CKE,
      output             HPS_DDR3_CK_n,
      output             HPS_DDR3_CK_p,
      output   [ 0: 0]   HPS_DDR3_CS_n,
      output   [ 3: 0]   HPS_DDR3_DM,
      inout    [31: 0]   HPS_DDR3_DQ,
      inout    [ 3: 0]   HPS_DDR3_DQS_n,
      inout    [ 3: 0]   HPS_DDR3_DQS_p,
      output   [ 0: 0]   HPS_DDR3_ODT,
      output             HPS_DDR3_RAS_n,
      output             HPS_DDR3_RESET_n,
      input              HPS_DDR3_RZQ,
      output             HPS_DDR3_WE_n,
      output             HPS_ENET_GTX_CLK,	//## HPS_ENET ##	
      inout              HPS_ENET_INT_n,		//hps_gpio_GPIO35
      output             HPS_ENET_MDC,
      inout              HPS_ENET_MDIO,
      input              HPS_ENET_RX_CLK,
      input    [ 3: 0]   HPS_ENET_RX_DATA,
      input              HPS_ENET_RX_DV,
      output   [ 3: 0]   HPS_ENET_TX_DATA,
      output             HPS_ENET_TX_EN,	
	   inout				 	 HPS_GPIO00_LED,		//hps_gpio_GPIO00
	   inout				 	 HPS_GPIO09_LED,		//hps_gpio_GPIO09
      output             HPS_SDMMC_CLK,	//## HPS_SDMMC ##
      inout              HPS_SDMMC_CMD,
      inout    [ 3: 0]   HPS_SDMMC_DATA,
      input              HPS_UART_RX,		//## HPS_UART ##	
      output             HPS_UART_TX,					
      input              HPS_USB_CLKOUT,	//## HPS_USB ##
      inout    [ 7: 0]   HPS_USB_DATA,
      input              HPS_USB_DIR,
      input              HPS_USB_NXT,
      output             HPS_USB_STP,
		
//====================FPGA===================================  
		//////////// CLOCK //////////
      input              FPGA_CLK1_50,
	  
       ///////// Buttons /////////  //KEY is Low-Active
      input    [ 2: 0]   KEY, 	

      ///////// Swtiches /////////
      input    [ 2: 0]   SW,

      ///////// LED /////////			//LED is High-Active 
      output   [ 9: 0]   LED	// [ 9: 8] >> MB_LED ; [ 7: 0] >> TB_LED

    
);

// connection of internal logics
assign LED [7:0] = {  led_level, KEY, SW,  1'b0};		//TB_LED 底板上的8个LED灯
assign LED [9:8] = { led_level,~led_level };				//MB_LED 核心板上的2个LED灯


/*****************************************************************************
 ↓↓                            以下区域请勿修改                  				  ↓↓
 *****************************************************************************/
//=======================================================
//  REG/WIRE declarations
//=======================================================
wire hps_fpga_reset_n;
wire fpga_clk_50;

pll pll_inst (
		.refclk   (FPGA_CLK1_50),   		//  refclk.clk
		.rst      (~hps_fpga_reset_n),   //   reset.reset
		.outclk_0 (fpga_clk_50)				// outclk0.clk	
	);

//=======================================================
//  Structural coding
//=======================================================
soc_system u0 (
	//Clock&Reset
    .clk_clk (fpga_clk_50),                              						//  clk.clk
    .reset_reset_n (hps_fpga_reset_n),                   						//  reset.reset_n	 
	 //hps_fpga_reset_n
	.hps_0_h2f_reset_reset_n (hps_fpga_reset_n),                				//  hps_0_h2f_reset.reset_n
	.hps_0_f2h_cold_reset_req_reset_n (1'b1),       								//  hps_0_f2h_cold_reset_req.reset_n
    .hps_0_f2h_debug_reset_req_reset_n (1'b1),      								//  hps_0_f2h_debug_reset_req.reset_n
    .hps_0_f2h_warm_reset_req_reset_n (1'b1),      								//  hps_0_f2h_warm_reset_req.reset_n
    //HPS ddr3
    .memory_mem_a (HPS_DDR3_ADDR),                        						//  .memory.mem_a
    .memory_mem_ba (HPS_DDR3_BA),                         						//  .mem_ba
    .memory_mem_ck (HPS_DDR3_CK_p),                       						//  .mem_ck
    .memory_mem_ck_n (HPS_DDR3_CK_n),                      						//  .mem_ck_n
    .memory_mem_cke (HPS_DDR3_CKE),                        						//  .mem_cke
    .memory_mem_cs_n (HPS_DDR3_CS_n),                      						//  .mem_cs_n
    .memory_mem_ras_n (HPS_DDR3_RAS_n),                    						//  .mem_ras_n
    .memory_mem_cas_n (HPS_DDR3_CAS_n),                    						//  .mem_cas_n
    .memory_mem_we_n (HPS_DDR3_WE_n),                      						//  .mem_we_n
    .memory_mem_reset_n (HPS_DDR3_RESET_n),                						//  .mem_reset_n
    .memory_mem_dq (HPS_DDR3_DQ),                          						//  .mem_dq
    .memory_mem_dqs (HPS_DDR3_DQS_p),                      						//  .mem_dqs
    .memory_mem_dqs_n (HPS_DDR3_DQS_n),                    						//  .mem_dqs_n
    .memory_mem_odt (HPS_DDR3_ODT),                        						//  .mem_odt
    .memory_mem_dm (HPS_DDR3_DM),                          						//  .mem_dm
    .memory_oct_rzqin (HPS_DDR3_RZQ),                         					//  .oct_rzqin
    //HPS ethernet
    .hps_0_hps_io_hps_io_emac1_inst_TX_CLK (HPS_ENET_GTX_CLK),        		//  .hps_io_emac1_inst_TX_CLK
    .hps_0_hps_io_hps_io_emac1_inst_TXD0 (HPS_ENET_TX_DATA[0]),    			//  .hps_io_emac1_inst_TXD0
    .hps_0_hps_io_hps_io_emac1_inst_TXD1 (HPS_ENET_TX_DATA[1]),    			//  .hps_io_emac1_inst_TXD1
    .hps_0_hps_io_hps_io_emac1_inst_TXD2 (HPS_ENET_TX_DATA[2]),    			//  .hps_io_emac1_inst_TXD2
    .hps_0_hps_io_hps_io_emac1_inst_TXD3 (HPS_ENET_TX_DATA[3]),    			//  .hps_io_emac1_inst_TXD3
    .hps_0_hps_io_hps_io_emac1_inst_RXD0 (HPS_ENET_RX_DATA[0]),    			//  .hps_io_emac1_inst_RXD0
    .hps_0_hps_io_hps_io_emac1_inst_MDIO (HPS_ENET_MDIO),          			//  .hps_io_emac1_inst_MDIO
    .hps_0_hps_io_hps_io_emac1_inst_MDC (HPS_ENET_MDC),         	 			//  .hps_io_emac1_inst_MDC
    .hps_0_hps_io_hps_io_emac1_inst_RX_CTL (HPS_ENET_RX_DV),          		//  .hps_io_emac1_inst_RX_CTL
    .hps_0_hps_io_hps_io_emac1_inst_TX_CTL (HPS_ENET_TX_EN),          		//  .hps_io_emac1_inst_TX_CTL
    .hps_0_hps_io_hps_io_emac1_inst_RX_CLK (HPS_ENET_RX_CLK),         		//  .hps_io_emac1_inst_RX_CLK
    .hps_0_hps_io_hps_io_emac1_inst_RXD1 (HPS_ENET_RX_DATA[1]),    			//  .hps_io_emac1_inst_RXD1
    .hps_0_hps_io_hps_io_emac1_inst_RXD2 (HPS_ENET_RX_DATA[2]),    			//  .hps_io_emac1_inst_RXD2
    .hps_0_hps_io_hps_io_emac1_inst_RXD3 (HPS_ENET_RX_DATA[3]),    			//  .hps_io_emac1_inst_RXD3
	//HPS SD card			
    .hps_0_hps_io_hps_io_sdio_inst_CMD (HPS_SDMMC_CMD),            			//	.hps_io_sdio_inst_CMD
    .hps_0_hps_io_hps_io_sdio_inst_D0 (HPS_SDMMC_DATA[0]),       				//	.hps_io_sdio_inst_D0
    .hps_0_hps_io_hps_io_sdio_inst_D1 (HPS_SDMMC_DATA[1]),       				//	.hps_io_sdio_inst_D1
    .hps_0_hps_io_hps_io_sdio_inst_CLK (HPS_SDMMC_CLK),          				//	.hps_io_sdio_inst_CLK
    .hps_0_hps_io_hps_io_sdio_inst_D2 (HPS_SDMMC_DATA[2]),       				//	.hps_io_sdio_inst_D2
    .hps_0_hps_io_hps_io_sdio_inst_D3 (HPS_SDMMC_DATA[3]),       				//	.hps_io_sdio_inst_D3
	//HPS USB	
    .hps_0_hps_io_hps_io_usb1_inst_D0 (HPS_USB_DATA[0]),       				//	.hps_io_usb1_inst_D0
    .hps_0_hps_io_hps_io_usb1_inst_D1 (HPS_USB_DATA[1]),       				//	.hps_io_usb1_inst_D1
    .hps_0_hps_io_hps_io_usb1_inst_D2 (HPS_USB_DATA[2]),       				//	.hps_io_usb1_inst_D2
    .hps_0_hps_io_hps_io_usb1_inst_D3 (HPS_USB_DATA[3]),       				//	.hps_io_usb1_inst_D3
    .hps_0_hps_io_hps_io_usb1_inst_D4 (HPS_USB_DATA[4]),       				//	.hps_io_usb1_inst_D4
    .hps_0_hps_io_hps_io_usb1_inst_D5 (HPS_USB_DATA[5]),       				//	.hps_io_usb1_inst_D5
    .hps_0_hps_io_hps_io_usb1_inst_D6 (HPS_USB_DATA[6]),       				//	.hps_io_usb1_inst_D6
    .hps_0_hps_io_hps_io_usb1_inst_D7 (HPS_USB_DATA[7]),       				//	.hps_io_usb1_inst_D7
    .hps_0_hps_io_hps_io_usb1_inst_CLK (HPS_USB_CLKOUT),        				//	.hps_io_usb1_inst_CLK
    .hps_0_hps_io_hps_io_usb1_inst_STP (HPS_USB_STP),           				//	.hps_io_usb1_inst_STP
    .hps_0_hps_io_hps_io_usb1_inst_DIR (HPS_USB_DIR),           				//	.hps_io_usb1_inst_DIR
    .hps_0_hps_io_hps_io_usb1_inst_NXT (HPS_USB_NXT),           				//	.hps_io_usb1_inst_NXT
					
    //HPS UART					
    .hps_0_hps_io_hps_io_uart0_inst_RX (HPS_UART_RX),           				//	.hps_io_uart0_inst_RX
    .hps_0_hps_io_hps_io_uart0_inst_TX (HPS_UART_TX),           				//	.hps_io_uart0_inst_TX
    //HPS GPIO		
    .hps_0_hps_io_hps_io_gpio_inst_GPIO35 (HPS_ENET_INT_n),  					//	.hps_io_gpio_inst_GPIO35 
	.hps_0_hps_io_hps_io_gpio_inst_GPIO00  (HPS_GPIO00_LED),  					//	.hps_io_gpio_inst_GPIO00
    .hps_0_hps_io_hps_io_gpio_inst_GPIO09  (HPS_GPIO09_LED),  					//	.hps_io_gpio_inst_GPIO09
		
	//FPGA Partion	
    .led_pio_external_connection_export (fpga_led),                			//	.led_pio_external_connection
    .dipsw_pio_external_connection_export (fpga_sw),              			//	.dipsw_pio_external_connection
    .button_pio_external_connection_export (fpga_button),        				//	.button_pio_external_connection
	// 7-seg display    
	.hex0_3_pio_external_connection_export ({HEX3P,HEX3,HEX2,HEX1,HEX0}), 	//	.hex1_4_pio_external_connection
	.hex4_5_pio_external_connection_export ({HEX5,HEX4}), 						//	.hex5_6_pio_external_connection
    
);

//==============================================end===========================

		  
//=======================================================
//外设仿真软件接口
//=======================================================
//LED 			lED灯
wire 				[ 7: 0]     	fpga_led;	 			//仿真软件上LED灯

//sw 				拨码开关
wire				[ 2: 0]			fpga_sw;					//仿真软件上拨码开关

//button 		按键开关
wire 				[ 2: 0]			fpga_button;			//仿真软件上按键开关

//hex 			数码管
wire  	 		[ 7: 0]   		HEX0; 					//仿真软件上第0个数码管
wire   			[ 7: 0]  		HEX1; 					//仿真软件上第1个数码管
wire 	 			[ 7: 0]  		HEX2; 					//仿真软件上第2个数码管
wire 				[ 7: 0]  		HEX3; 					//仿真软件上第3个数码管
wire   			[ 7: 0]  		HEX4; 					//仿真软件上第4个数码管
wire  			[ 7: 0]   		HEX5; 					//仿真软件上第5个数码管


/*****************************************************************************
 ↓↓                           学生编程区                  				        ↓↓
 *****************************************************************************/
 
 
 
 
 
 
//==============================================end==============================

 
/*****************************************************************************
 ↓↓                           出厂测试                  				        ↓↓
 *****************************************************************************/ 
reg [25: 0] counter;
reg led_level;
always @(posedge fpga_clk_50 or negedge hps_fpga_reset_n) begin
    if (~hps_fpga_reset_n) begin
        counter <= 0;
        led_level <= 0;
    end

    else if (counter == 24999999) begin
        counter <= 0;
        led_level <= ~led_level;
    end
    else
        counter <= counter + 1'b1;
end
//==============================================end==============================

endmodule


