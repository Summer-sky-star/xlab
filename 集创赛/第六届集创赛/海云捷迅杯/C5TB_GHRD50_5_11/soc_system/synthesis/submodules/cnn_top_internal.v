// (c) 1992-2021 Intel Corporation.                            
// Intel, the Intel logo, Intel, MegaCore, NIOS II, Quartus and TalkBack words    
// and logos are trademarks of Intel Corporation or its subsidiaries in the U.S.  
// and/or other countries. Other marks and brands may be claimed as the property  
// of others. See Trademarks on intel.com for full list of Intel trademarks or    
// the Trademarks & Brands Names Database (if Intel) or See www.Intel.com/legal (if Altera) 
// Your use of Intel Corporation's design tools, logic functions and other        
// software and tools, and its AMPP partner logic functions, and any output       
// files any of the foregoing (including device programming or simulation         
// files), and any associated documentation or information are expressly subject  
// to the terms and conditions of the Altera Program License Subscription         
// Agreement, Intel MegaCore Function License Agreement, or other applicable      
// license agreement, including, without limitation, that your use is for the     
// sole purpose of programming logic devices manufactured by Intel and sold by    
// Intel or its authorized distributors.  Please refer to the applicable          
// agreement for further details.                                                 
// Generated by Intel(R) HLS Compiler, Version 21.2.0 Build 68.1

/////////////////////////////////////////////////////////////////
// MODULE cnn_top_internal
/////////////////////////////////////////////////////////////////
module cnn_top_internal
(
   input logic clock,
   input logic resetn,
   input logic [63:0] ddr_in1,
   input logic [63:0] ddr_w1,
   input logic [63:0] ddr_out1,
   input logic [63:0] param,
   input logic [63:0] ddr_scale,
   input logic start,
   output logic busy,
   output logic done,
   input logic stall,
   // AVM avmm_1_rw
   output logic avmm_1_rw_enable,
   output logic avmm_1_rw_read,
   output logic avmm_1_rw_write,
   output logic [31:0] avmm_1_rw_address,
   output logic [127:0] avmm_1_rw_writedata,
   output logic [15:0] avmm_1_rw_byteenable,
   input logic avmm_1_rw_waitrequest,
   input logic [127:0] avmm_1_rw_readdata,
   input logic avmm_1_rw_readdatavalid,
   output logic avmm_1_rw_burstcount,
   input logic avmm_1_rw_writeack,
   // AVM avmm_2_rw
   output logic avmm_2_rw_enable,
   output logic avmm_2_rw_read,
   output logic avmm_2_rw_write,
   output logic [31:0] avmm_2_rw_address,
   output logic [127:0] avmm_2_rw_writedata,
   output logic [15:0] avmm_2_rw_byteenable,
   input logic avmm_2_rw_waitrequest,
   input logic [127:0] avmm_2_rw_readdata,
   input logic avmm_2_rw_readdatavalid,
   output logic avmm_2_rw_burstcount,
   input logic avmm_2_rw_writeack,
   // AVM avmm_3_rw
   output logic avmm_3_rw_enable,
   output logic avmm_3_rw_read,
   output logic avmm_3_rw_write,
   output logic [31:0] avmm_3_rw_address,
   output logic [31:0] avmm_3_rw_writedata,
   output logic [3:0] avmm_3_rw_byteenable,
   input logic avmm_3_rw_waitrequest,
   input logic [31:0] avmm_3_rw_readdata,
   input logic avmm_3_rw_readdatavalid,
   output logic avmm_3_rw_burstcount,
   input logic avmm_3_rw_writeack,
   // AVM avmm_4_rw
   output logic avmm_4_rw_enable,
   output logic avmm_4_rw_read,
   output logic avmm_4_rw_write,
   output logic [31:0] avmm_4_rw_address,
   output logic [31:0] avmm_4_rw_writedata,
   output logic [3:0] avmm_4_rw_byteenable,
   input logic avmm_4_rw_waitrequest,
   input logic [31:0] avmm_4_rw_readdata,
   input logic avmm_4_rw_readdatavalid,
   output logic avmm_4_rw_burstcount,
   input logic avmm_4_rw_writeack,
   // AVM avmm_5_rw
   output logic avmm_5_rw_enable,
   output logic avmm_5_rw_read,
   output logic avmm_5_rw_write,
   output logic [31:0] avmm_5_rw_address,
   output logic [31:0] avmm_5_rw_writedata,
   output logic [3:0] avmm_5_rw_byteenable,
   input logic avmm_5_rw_waitrequest,
   input logic [31:0] avmm_5_rw_readdata,
   input logic avmm_5_rw_readdatavalid,
   output logic avmm_5_rw_burstcount,
   input logic avmm_5_rw_writeack
);
   genvar __i;
   genvar __j;
   genvar __k;
   genvar __l;
   genvar __m;
   genvar __n;
   logic avmm_1_global_avm_enable [2];
   logic avmm_1_global_avm_read [2];
   logic avmm_1_global_avm_write [2];
   logic [31:0] avmm_1_global_avm_address [2];
   logic [127:0] avmm_1_global_avm_writedata [2];
   logic [15:0] avmm_1_global_avm_byteenable [2];
   logic avmm_1_global_avm_waitrequest [2];
   logic [127:0] avmm_1_global_avm_readdata [2];
   logic avmm_1_global_avm_readdatavalid [2];
   logic avmm_1_global_avm_burstcount [2];
   logic avmm_1_global_avm_writeack [2];
   logic avmm_2_global_avm_enable [2];
   logic avmm_2_global_avm_read [2];
   logic avmm_2_global_avm_write [2];
   logic [31:0] avmm_2_global_avm_address [2];
   logic [127:0] avmm_2_global_avm_writedata [2];
   logic [15:0] avmm_2_global_avm_byteenable [2];
   logic avmm_2_global_avm_waitrequest [2];
   logic [127:0] avmm_2_global_avm_readdata [2];
   logic avmm_2_global_avm_readdatavalid [2];
   logic avmm_2_global_avm_burstcount [2];
   logic avmm_2_global_avm_writeack [2];
   logic avmm_3_global_avm_enable [1];
   logic avmm_3_global_avm_read [1];
   logic avmm_3_global_avm_write [1];
   logic [31:0] avmm_3_global_avm_address [1];
   logic [31:0] avmm_3_global_avm_writedata [1];
   logic [3:0] avmm_3_global_avm_byteenable [1];
   logic avmm_3_global_avm_waitrequest [1];
   logic [31:0] avmm_3_global_avm_readdata [1];
   logic avmm_3_global_avm_readdatavalid [1];
   logic avmm_3_global_avm_burstcount [1];
   logic avmm_3_global_avm_writeack [1];
   logic avmm_4_global_avm_enable [1];
   logic avmm_4_global_avm_read [1];
   logic avmm_4_global_avm_write [1];
   logic [31:0] avmm_4_global_avm_address [1];
   logic [31:0] avmm_4_global_avm_writedata [1];
   logic [3:0] avmm_4_global_avm_byteenable [1];
   logic avmm_4_global_avm_waitrequest [1];
   logic [31:0] avmm_4_global_avm_readdata [1];
   logic avmm_4_global_avm_readdatavalid [1];
   logic avmm_4_global_avm_burstcount [1];
   logic avmm_4_global_avm_writeack [1];
   logic avmm_5_global_avm_enable [3];
   logic avmm_5_global_avm_read [3];
   logic avmm_5_global_avm_write [3];
   logic [31:0] avmm_5_global_avm_address [3];
   logic [31:0] avmm_5_global_avm_writedata [3];
   logic [3:0] avmm_5_global_avm_byteenable [3];
   logic avmm_5_global_avm_waitrequest [3];
   logic [31:0] avmm_5_global_avm_readdata [3];
   logic avmm_5_global_avm_readdatavalid [3];
   logic avmm_5_global_avm_burstcount [3];
   logic avmm_5_global_avm_writeack [3];
   logic local_avm_aspace64_enable [1][4];
   logic local_avm_aspace64_read [1][4];
   logic local_avm_aspace64_write [1][4];
   logic [31:0] local_avm_aspace64_address [1][4];
   logic [511:0] local_avm_aspace64_writedata [1][4];
   logic [63:0] local_avm_aspace64_byteenable [1][4];
   logic local_avm_aspace64_waitrequest [1][4];
   logic [511:0] local_avm_aspace64_readdata [1][4];
   logic local_avm_aspace64_readdatavalid [1][4];
   logic local_avm_aspace64_burstcount [1][4];
   logic local_avm_aspace64_writeack [1][4];
   logic local_avm_aspace65_enable [1][2];
   logic local_avm_aspace65_read [1][2];
   logic local_avm_aspace65_write [1][2];
   logic [31:0] local_avm_aspace65_address [1][2];
   logic [1023:0] local_avm_aspace65_writedata [1][2];
   logic [127:0] local_avm_aspace65_byteenable [1][2];
   logic local_avm_aspace65_waitrequest [1][2];
   logic [1023:0] local_avm_aspace65_readdata [1][2];
   logic local_avm_aspace65_readdatavalid [1][2];
   logic local_avm_aspace65_burstcount [1][2];
   logic local_avm_aspace65_writeack [1][2];
   logic local_avm_aspace66_enable [1][2];
   logic local_avm_aspace66_read [1][2];
   logic local_avm_aspace66_write [1][2];
   logic [31:0] local_avm_aspace66_address [1][2];
   logic [1023:0] local_avm_aspace66_writedata [1][2];
   logic [127:0] local_avm_aspace66_byteenable [1][2];
   logic local_avm_aspace66_waitrequest [1][2];
   logic [1023:0] local_avm_aspace66_readdata [1][2];
   logic local_avm_aspace66_readdatavalid [1][2];
   logic local_avm_aspace66_burstcount [1][2];
   logic local_avm_aspace66_writeack [1][2];
   logic local_avm_aspace67_enable [1][2];
   logic local_avm_aspace67_read [1][2];
   logic local_avm_aspace67_write [1][2];
   logic [31:0] local_avm_aspace67_address [1][2];
   logic [127:0] local_avm_aspace67_writedata [1][2];
   logic [15:0] local_avm_aspace67_byteenable [1][2];
   logic local_avm_aspace67_waitrequest [1][2];
   logic [127:0] local_avm_aspace67_readdata [1][2];
   logic local_avm_aspace67_readdatavalid [1][2];
   logic local_avm_aspace67_burstcount [1][2];
   logic local_avm_aspace67_writeack [1][2];
   logic local_avm_aspace68_enable [1][2];
   logic local_avm_aspace68_read [1][2];
   logic local_avm_aspace68_write [1][2];
   logic [31:0] local_avm_aspace68_address [1][2];
   logic [127:0] local_avm_aspace68_writedata [1][2];
   logic [15:0] local_avm_aspace68_byteenable [1][2];
   logic local_avm_aspace68_waitrequest [1][2];
   logic [127:0] local_avm_aspace68_readdata [1][2];
   logic local_avm_aspace68_readdatavalid [1][2];
   logic local_avm_aspace68_burstcount [1][2];
   logic local_avm_aspace68_writeack [1][2];

   // INST cnn_top_internal of cnn_top_function_wrapper
   cnn_top_function_wrapper cnn_top_internal
   (
      .clock(clock),
      .resetn(resetn),
      .ddr_in1(ddr_in1),
      .ddr_w1(ddr_w1),
      .ddr_out1(ddr_out1),
      .param(param),
      .ddr_scale(ddr_scale),
      .start(start),
      .busy(busy),
      .done(done),
      .stall(stall),
      // AVM avm_memcoalesce_load_load_input0_fpgaunique_155_load_input0
      .avm_memcoalesce_load_load_input0_fpgaunique_155_load_input0_enable(avmm_1_global_avm_enable[0]),
      .avm_memcoalesce_load_load_input0_fpgaunique_155_load_input0_read(avmm_1_global_avm_read[0]),
      .avm_memcoalesce_load_load_input0_fpgaunique_155_load_input0_write(avmm_1_global_avm_write[0]),
      .avm_memcoalesce_load_load_input0_fpgaunique_155_load_input0_address(avmm_1_global_avm_address[0]),
      .avm_memcoalesce_load_load_input0_fpgaunique_155_load_input0_writedata(avmm_1_global_avm_writedata[0]),
      .avm_memcoalesce_load_load_input0_fpgaunique_155_load_input0_byteenable(avmm_1_global_avm_byteenable[0]),
      .avm_memcoalesce_load_load_input0_fpgaunique_155_load_input0_waitrequest(avmm_1_global_avm_waitrequest[0]),
      .avm_memcoalesce_load_load_input0_fpgaunique_155_load_input0_readdata(avmm_1_global_avm_readdata[0]),
      .avm_memcoalesce_load_load_input0_fpgaunique_155_load_input0_readdatavalid(avmm_1_global_avm_readdatavalid[0]),
      .avm_memcoalesce_load_load_input0_fpgaunique_155_load_input0_burstcount(avmm_1_global_avm_burstcount[0]),
      .avm_memcoalesce_load_load_input0_fpgaunique_155_load_input0_writeack(avmm_1_global_avm_writeack[0]),
      // AVM avm_memcoalesce_load_load_input1_fpgaunique_155_load_input1
      .avm_memcoalesce_load_load_input1_fpgaunique_155_load_input1_enable(avmm_1_global_avm_enable[1]),
      .avm_memcoalesce_load_load_input1_fpgaunique_155_load_input1_read(avmm_1_global_avm_read[1]),
      .avm_memcoalesce_load_load_input1_fpgaunique_155_load_input1_write(avmm_1_global_avm_write[1]),
      .avm_memcoalesce_load_load_input1_fpgaunique_155_load_input1_address(avmm_1_global_avm_address[1]),
      .avm_memcoalesce_load_load_input1_fpgaunique_155_load_input1_writedata(avmm_1_global_avm_writedata[1]),
      .avm_memcoalesce_load_load_input1_fpgaunique_155_load_input1_byteenable(avmm_1_global_avm_byteenable[1]),
      .avm_memcoalesce_load_load_input1_fpgaunique_155_load_input1_waitrequest(avmm_1_global_avm_waitrequest[1]),
      .avm_memcoalesce_load_load_input1_fpgaunique_155_load_input1_readdata(avmm_1_global_avm_readdata[1]),
      .avm_memcoalesce_load_load_input1_fpgaunique_155_load_input1_readdatavalid(avmm_1_global_avm_readdatavalid[1]),
      .avm_memcoalesce_load_load_input1_fpgaunique_155_load_input1_burstcount(avmm_1_global_avm_burstcount[1]),
      .avm_memcoalesce_load_load_input1_fpgaunique_155_load_input1_writeack(avmm_1_global_avm_writeack[1]),
      // AVM avm_memcoalesce_load_load_weight0_fpgaunique_1375_load_weight0
      .avm_memcoalesce_load_load_weight0_fpgaunique_1375_load_weight0_enable(avmm_2_global_avm_enable[0]),
      .avm_memcoalesce_load_load_weight0_fpgaunique_1375_load_weight0_read(avmm_2_global_avm_read[0]),
      .avm_memcoalesce_load_load_weight0_fpgaunique_1375_load_weight0_write(avmm_2_global_avm_write[0]),
      .avm_memcoalesce_load_load_weight0_fpgaunique_1375_load_weight0_address(avmm_2_global_avm_address[0]),
      .avm_memcoalesce_load_load_weight0_fpgaunique_1375_load_weight0_writedata(avmm_2_global_avm_writedata[0]),
      .avm_memcoalesce_load_load_weight0_fpgaunique_1375_load_weight0_byteenable(avmm_2_global_avm_byteenable[0]),
      .avm_memcoalesce_load_load_weight0_fpgaunique_1375_load_weight0_waitrequest(avmm_2_global_avm_waitrequest[0]),
      .avm_memcoalesce_load_load_weight0_fpgaunique_1375_load_weight0_readdata(avmm_2_global_avm_readdata[0]),
      .avm_memcoalesce_load_load_weight0_fpgaunique_1375_load_weight0_readdatavalid(avmm_2_global_avm_readdatavalid[0]),
      .avm_memcoalesce_load_load_weight0_fpgaunique_1375_load_weight0_burstcount(avmm_2_global_avm_burstcount[0]),
      .avm_memcoalesce_load_load_weight0_fpgaunique_1375_load_weight0_writeack(avmm_2_global_avm_writeack[0]),
      // AVM avm_memcoalesce_load_load_weight1_fpgaunique_1375_load_weight1
      .avm_memcoalesce_load_load_weight1_fpgaunique_1375_load_weight1_enable(avmm_2_global_avm_enable[1]),
      .avm_memcoalesce_load_load_weight1_fpgaunique_1375_load_weight1_read(avmm_2_global_avm_read[1]),
      .avm_memcoalesce_load_load_weight1_fpgaunique_1375_load_weight1_write(avmm_2_global_avm_write[1]),
      .avm_memcoalesce_load_load_weight1_fpgaunique_1375_load_weight1_address(avmm_2_global_avm_address[1]),
      .avm_memcoalesce_load_load_weight1_fpgaunique_1375_load_weight1_writedata(avmm_2_global_avm_writedata[1]),
      .avm_memcoalesce_load_load_weight1_fpgaunique_1375_load_weight1_byteenable(avmm_2_global_avm_byteenable[1]),
      .avm_memcoalesce_load_load_weight1_fpgaunique_1375_load_weight1_waitrequest(avmm_2_global_avm_waitrequest[1]),
      .avm_memcoalesce_load_load_weight1_fpgaunique_1375_load_weight1_readdata(avmm_2_global_avm_readdata[1]),
      .avm_memcoalesce_load_load_weight1_fpgaunique_1375_load_weight1_readdatavalid(avmm_2_global_avm_readdatavalid[1]),
      .avm_memcoalesce_load_load_weight1_fpgaunique_1375_load_weight1_burstcount(avmm_2_global_avm_burstcount[1]),
      .avm_memcoalesce_load_load_weight1_fpgaunique_1375_load_weight1_writeack(avmm_2_global_avm_writeack[1]),
      // AVM avm_unnamed_conv_process101_conv_process
      .avm_unnamed_conv_process101_conv_process_enable(avmm_3_global_avm_enable[0]),
      .avm_unnamed_conv_process101_conv_process_read(avmm_3_global_avm_read[0]),
      .avm_unnamed_conv_process101_conv_process_write(avmm_3_global_avm_write[0]),
      .avm_unnamed_conv_process101_conv_process_address(avmm_3_global_avm_address[0]),
      .avm_unnamed_conv_process101_conv_process_writedata(avmm_3_global_avm_writedata[0]),
      .avm_unnamed_conv_process101_conv_process_byteenable(avmm_3_global_avm_byteenable[0]),
      .avm_unnamed_conv_process101_conv_process_waitrequest(avmm_3_global_avm_waitrequest[0]),
      .avm_unnamed_conv_process101_conv_process_readdata(avmm_3_global_avm_readdata[0]),
      .avm_unnamed_conv_process101_conv_process_readdatavalid(avmm_3_global_avm_readdatavalid[0]),
      .avm_unnamed_conv_process101_conv_process_burstcount(avmm_3_global_avm_burstcount[0]),
      .avm_unnamed_conv_process101_conv_process_writeack(avmm_3_global_avm_writeack[0]),
      // AVM avm_unnamed_cnn_top9_cnn_top
      .avm_unnamed_cnn_top9_cnn_top_enable(avmm_4_global_avm_enable[0]),
      .avm_unnamed_cnn_top9_cnn_top_read(avmm_4_global_avm_read[0]),
      .avm_unnamed_cnn_top9_cnn_top_write(avmm_4_global_avm_write[0]),
      .avm_unnamed_cnn_top9_cnn_top_address(avmm_4_global_avm_address[0]),
      .avm_unnamed_cnn_top9_cnn_top_writedata(avmm_4_global_avm_writedata[0]),
      .avm_unnamed_cnn_top9_cnn_top_byteenable(avmm_4_global_avm_byteenable[0]),
      .avm_unnamed_cnn_top9_cnn_top_waitrequest(avmm_4_global_avm_waitrequest[0]),
      .avm_unnamed_cnn_top9_cnn_top_readdata(avmm_4_global_avm_readdata[0]),
      .avm_unnamed_cnn_top9_cnn_top_readdatavalid(avmm_4_global_avm_readdatavalid[0]),
      .avm_unnamed_cnn_top9_cnn_top_burstcount(avmm_4_global_avm_burstcount[0]),
      .avm_unnamed_cnn_top9_cnn_top_writeack(avmm_4_global_avm_writeack[0]),
      // AVM avm_unnamed_cnn_top80_cnn_top
      .avm_unnamed_cnn_top80_cnn_top_enable(avmm_5_global_avm_enable[0]),
      .avm_unnamed_cnn_top80_cnn_top_read(avmm_5_global_avm_read[0]),
      .avm_unnamed_cnn_top80_cnn_top_write(avmm_5_global_avm_write[0]),
      .avm_unnamed_cnn_top80_cnn_top_address(avmm_5_global_avm_address[0]),
      .avm_unnamed_cnn_top80_cnn_top_writedata(avmm_5_global_avm_writedata[0]),
      .avm_unnamed_cnn_top80_cnn_top_byteenable(avmm_5_global_avm_byteenable[0]),
      .avm_unnamed_cnn_top80_cnn_top_waitrequest(avmm_5_global_avm_waitrequest[0]),
      .avm_unnamed_cnn_top80_cnn_top_readdata(avmm_5_global_avm_readdata[0]),
      .avm_unnamed_cnn_top80_cnn_top_readdatavalid(avmm_5_global_avm_readdatavalid[0]),
      .avm_unnamed_cnn_top80_cnn_top_burstcount(avmm_5_global_avm_burstcount[0]),
      .avm_unnamed_cnn_top80_cnn_top_writeack(avmm_5_global_avm_writeack[0]),
      // AVM avm_unnamed_conv_process20_conv_process
      .avm_unnamed_conv_process20_conv_process_enable(avmm_5_global_avm_enable[1]),
      .avm_unnamed_conv_process20_conv_process_read(avmm_5_global_avm_read[1]),
      .avm_unnamed_conv_process20_conv_process_write(avmm_5_global_avm_write[1]),
      .avm_unnamed_conv_process20_conv_process_address(avmm_5_global_avm_address[1]),
      .avm_unnamed_conv_process20_conv_process_writedata(avmm_5_global_avm_writedata[1]),
      .avm_unnamed_conv_process20_conv_process_byteenable(avmm_5_global_avm_byteenable[1]),
      .avm_unnamed_conv_process20_conv_process_waitrequest(avmm_5_global_avm_waitrequest[1]),
      .avm_unnamed_conv_process20_conv_process_readdata(avmm_5_global_avm_readdata[1]),
      .avm_unnamed_conv_process20_conv_process_readdatavalid(avmm_5_global_avm_readdatavalid[1]),
      .avm_unnamed_conv_process20_conv_process_burstcount(avmm_5_global_avm_burstcount[1]),
      .avm_unnamed_conv_process20_conv_process_writeack(avmm_5_global_avm_writeack[1]),
      // AVM avm_unnamed_conv_process21_conv_process
      .avm_unnamed_conv_process21_conv_process_enable(avmm_5_global_avm_enable[2]),
      .avm_unnamed_conv_process21_conv_process_read(avmm_5_global_avm_read[2]),
      .avm_unnamed_conv_process21_conv_process_write(avmm_5_global_avm_write[2]),
      .avm_unnamed_conv_process21_conv_process_address(avmm_5_global_avm_address[2]),
      .avm_unnamed_conv_process21_conv_process_writedata(avmm_5_global_avm_writedata[2]),
      .avm_unnamed_conv_process21_conv_process_byteenable(avmm_5_global_avm_byteenable[2]),
      .avm_unnamed_conv_process21_conv_process_waitrequest(avmm_5_global_avm_waitrequest[2]),
      .avm_unnamed_conv_process21_conv_process_readdata(avmm_5_global_avm_readdata[2]),
      .avm_unnamed_conv_process21_conv_process_readdatavalid(avmm_5_global_avm_readdatavalid[2]),
      .avm_unnamed_conv_process21_conv_process_burstcount(avmm_5_global_avm_burstcount[2]),
      .avm_unnamed_conv_process21_conv_process_writeack(avmm_5_global_avm_writeack[2]),
      // AVM avm_memcoalesce_load_conv_process_fpgaunique_227_conv_process
      .avm_memcoalesce_load_conv_process_fpgaunique_227_conv_process_enable(local_avm_aspace64_enable[0][0]),
      .avm_memcoalesce_load_conv_process_fpgaunique_227_conv_process_read(local_avm_aspace64_read[0][0]),
      .avm_memcoalesce_load_conv_process_fpgaunique_227_conv_process_write(local_avm_aspace64_write[0][0]),
      .avm_memcoalesce_load_conv_process_fpgaunique_227_conv_process_address(local_avm_aspace64_address[0][0]),
      .avm_memcoalesce_load_conv_process_fpgaunique_227_conv_process_writedata(local_avm_aspace64_writedata[0][0]),
      .avm_memcoalesce_load_conv_process_fpgaunique_227_conv_process_byteenable(local_avm_aspace64_byteenable[0][0]),
      .avm_memcoalesce_load_conv_process_fpgaunique_227_conv_process_waitrequest(local_avm_aspace64_waitrequest[0][0]),
      .avm_memcoalesce_load_conv_process_fpgaunique_227_conv_process_readdata(local_avm_aspace64_readdata[0][0]),
      .avm_memcoalesce_load_conv_process_fpgaunique_227_conv_process_readdatavalid(local_avm_aspace64_readdatavalid[0][0]),
      .avm_memcoalesce_load_conv_process_fpgaunique_227_conv_process_burstcount(local_avm_aspace64_burstcount[0][0]),
      .avm_memcoalesce_load_conv_process_fpgaunique_227_conv_process_writeack(local_avm_aspace64_writeack[0][0]),
      // AVM avm_memcoalesce_load_conv_process_fpgaunique_238_conv_process
      .avm_memcoalesce_load_conv_process_fpgaunique_238_conv_process_enable(local_avm_aspace64_enable[0][1]),
      .avm_memcoalesce_load_conv_process_fpgaunique_238_conv_process_read(local_avm_aspace64_read[0][1]),
      .avm_memcoalesce_load_conv_process_fpgaunique_238_conv_process_write(local_avm_aspace64_write[0][1]),
      .avm_memcoalesce_load_conv_process_fpgaunique_238_conv_process_address(local_avm_aspace64_address[0][1]),
      .avm_memcoalesce_load_conv_process_fpgaunique_238_conv_process_writedata(local_avm_aspace64_writedata[0][1]),
      .avm_memcoalesce_load_conv_process_fpgaunique_238_conv_process_byteenable(local_avm_aspace64_byteenable[0][1]),
      .avm_memcoalesce_load_conv_process_fpgaunique_238_conv_process_waitrequest(local_avm_aspace64_waitrequest[0][1]),
      .avm_memcoalesce_load_conv_process_fpgaunique_238_conv_process_readdata(local_avm_aspace64_readdata[0][1]),
      .avm_memcoalesce_load_conv_process_fpgaunique_238_conv_process_readdatavalid(local_avm_aspace64_readdatavalid[0][1]),
      .avm_memcoalesce_load_conv_process_fpgaunique_238_conv_process_burstcount(local_avm_aspace64_burstcount[0][1]),
      .avm_memcoalesce_load_conv_process_fpgaunique_238_conv_process_writeack(local_avm_aspace64_writeack[0][1]),
      // AVM avm_memdep_36_conv_process
      .avm_memdep_36_conv_process_enable(local_avm_aspace64_enable[0][2]),
      .avm_memdep_36_conv_process_read(local_avm_aspace64_read[0][2]),
      .avm_memdep_36_conv_process_write(local_avm_aspace64_write[0][2]),
      .avm_memdep_36_conv_process_address(local_avm_aspace64_address[0][2]),
      .avm_memdep_36_conv_process_writedata(local_avm_aspace64_writedata[0][2]),
      .avm_memdep_36_conv_process_byteenable(local_avm_aspace64_byteenable[0][2]),
      .avm_memdep_36_conv_process_waitrequest(local_avm_aspace64_waitrequest[0][2]),
      .avm_memdep_36_conv_process_readdata(local_avm_aspace64_readdata[0][2]),
      .avm_memdep_36_conv_process_readdatavalid(local_avm_aspace64_readdatavalid[0][2]),
      .avm_memdep_36_conv_process_burstcount(local_avm_aspace64_burstcount[0][2]),
      .avm_memdep_36_conv_process_writeack(local_avm_aspace64_writeack[0][2]),
      // AVM avm_memdep_5_conv_process
      .avm_memdep_5_conv_process_enable(local_avm_aspace64_enable[0][3]),
      .avm_memdep_5_conv_process_read(local_avm_aspace64_read[0][3]),
      .avm_memdep_5_conv_process_write(local_avm_aspace64_write[0][3]),
      .avm_memdep_5_conv_process_address(local_avm_aspace64_address[0][3]),
      .avm_memdep_5_conv_process_writedata(local_avm_aspace64_writedata[0][3]),
      .avm_memdep_5_conv_process_byteenable(local_avm_aspace64_byteenable[0][3]),
      .avm_memdep_5_conv_process_waitrequest(local_avm_aspace64_waitrequest[0][3]),
      .avm_memdep_5_conv_process_readdata(local_avm_aspace64_readdata[0][3]),
      .avm_memdep_5_conv_process_readdatavalid(local_avm_aspace64_readdatavalid[0][3]),
      .avm_memdep_5_conv_process_burstcount(local_avm_aspace64_burstcount[0][3]),
      .avm_memdep_5_conv_process_writeack(local_avm_aspace64_writeack[0][3]),
      // AVM avm_memcoalesce_load_load_weight1_fpgaunique_1384_load_weight1
      .avm_memcoalesce_load_load_weight1_fpgaunique_1384_load_weight1_enable(local_avm_aspace65_enable[0][0]),
      .avm_memcoalesce_load_load_weight1_fpgaunique_1384_load_weight1_read(local_avm_aspace65_read[0][0]),
      .avm_memcoalesce_load_load_weight1_fpgaunique_1384_load_weight1_write(local_avm_aspace65_write[0][0]),
      .avm_memcoalesce_load_load_weight1_fpgaunique_1384_load_weight1_address(local_avm_aspace65_address[0][0]),
      .avm_memcoalesce_load_load_weight1_fpgaunique_1384_load_weight1_writedata(local_avm_aspace65_writedata[0][0]),
      .avm_memcoalesce_load_load_weight1_fpgaunique_1384_load_weight1_byteenable(local_avm_aspace65_byteenable[0][0]),
      .avm_memcoalesce_load_load_weight1_fpgaunique_1384_load_weight1_waitrequest(local_avm_aspace65_waitrequest[0][0]),
      .avm_memcoalesce_load_load_weight1_fpgaunique_1384_load_weight1_readdata(local_avm_aspace65_readdata[0][0]),
      .avm_memcoalesce_load_load_weight1_fpgaunique_1384_load_weight1_readdatavalid(local_avm_aspace65_readdatavalid[0][0]),
      .avm_memcoalesce_load_load_weight1_fpgaunique_1384_load_weight1_burstcount(local_avm_aspace65_burstcount[0][0]),
      .avm_memcoalesce_load_load_weight1_fpgaunique_1384_load_weight1_writeack(local_avm_aspace65_writeack[0][0]),
      // AVM avm_memdep_3_load_weight1
      .avm_memdep_3_load_weight1_enable(local_avm_aspace65_enable[0][1]),
      .avm_memdep_3_load_weight1_read(local_avm_aspace65_read[0][1]),
      .avm_memdep_3_load_weight1_write(local_avm_aspace65_write[0][1]),
      .avm_memdep_3_load_weight1_address(local_avm_aspace65_address[0][1]),
      .avm_memdep_3_load_weight1_writedata(local_avm_aspace65_writedata[0][1]),
      .avm_memdep_3_load_weight1_byteenable(local_avm_aspace65_byteenable[0][1]),
      .avm_memdep_3_load_weight1_waitrequest(local_avm_aspace65_waitrequest[0][1]),
      .avm_memdep_3_load_weight1_readdata(local_avm_aspace65_readdata[0][1]),
      .avm_memdep_3_load_weight1_readdatavalid(local_avm_aspace65_readdatavalid[0][1]),
      .avm_memdep_3_load_weight1_burstcount(local_avm_aspace65_burstcount[0][1]),
      .avm_memdep_3_load_weight1_writeack(local_avm_aspace65_writeack[0][1]),
      // AVM avm_memcoalesce_load_load_weight0_fpgaunique_1384_load_weight0
      .avm_memcoalesce_load_load_weight0_fpgaunique_1384_load_weight0_enable(local_avm_aspace66_enable[0][0]),
      .avm_memcoalesce_load_load_weight0_fpgaunique_1384_load_weight0_read(local_avm_aspace66_read[0][0]),
      .avm_memcoalesce_load_load_weight0_fpgaunique_1384_load_weight0_write(local_avm_aspace66_write[0][0]),
      .avm_memcoalesce_load_load_weight0_fpgaunique_1384_load_weight0_address(local_avm_aspace66_address[0][0]),
      .avm_memcoalesce_load_load_weight0_fpgaunique_1384_load_weight0_writedata(local_avm_aspace66_writedata[0][0]),
      .avm_memcoalesce_load_load_weight0_fpgaunique_1384_load_weight0_byteenable(local_avm_aspace66_byteenable[0][0]),
      .avm_memcoalesce_load_load_weight0_fpgaunique_1384_load_weight0_waitrequest(local_avm_aspace66_waitrequest[0][0]),
      .avm_memcoalesce_load_load_weight0_fpgaunique_1384_load_weight0_readdata(local_avm_aspace66_readdata[0][0]),
      .avm_memcoalesce_load_load_weight0_fpgaunique_1384_load_weight0_readdatavalid(local_avm_aspace66_readdatavalid[0][0]),
      .avm_memcoalesce_load_load_weight0_fpgaunique_1384_load_weight0_burstcount(local_avm_aspace66_burstcount[0][0]),
      .avm_memcoalesce_load_load_weight0_fpgaunique_1384_load_weight0_writeack(local_avm_aspace66_writeack[0][0]),
      // AVM avm_memdep_3_load_weight0
      .avm_memdep_3_load_weight0_enable(local_avm_aspace66_enable[0][1]),
      .avm_memdep_3_load_weight0_read(local_avm_aspace66_read[0][1]),
      .avm_memdep_3_load_weight0_write(local_avm_aspace66_write[0][1]),
      .avm_memdep_3_load_weight0_address(local_avm_aspace66_address[0][1]),
      .avm_memdep_3_load_weight0_writedata(local_avm_aspace66_writedata[0][1]),
      .avm_memdep_3_load_weight0_byteenable(local_avm_aspace66_byteenable[0][1]),
      .avm_memdep_3_load_weight0_waitrequest(local_avm_aspace66_waitrequest[0][1]),
      .avm_memdep_3_load_weight0_readdata(local_avm_aspace66_readdata[0][1]),
      .avm_memdep_3_load_weight0_readdatavalid(local_avm_aspace66_readdatavalid[0][1]),
      .avm_memdep_3_load_weight0_burstcount(local_avm_aspace66_burstcount[0][1]),
      .avm_memdep_3_load_weight0_writeack(local_avm_aspace66_writeack[0][1]),
      // AVM avm_memcoalesce_load_load_input1_fpgaunique_164_load_input1
      .avm_memcoalesce_load_load_input1_fpgaunique_164_load_input1_enable(local_avm_aspace67_enable[0][0]),
      .avm_memcoalesce_load_load_input1_fpgaunique_164_load_input1_read(local_avm_aspace67_read[0][0]),
      .avm_memcoalesce_load_load_input1_fpgaunique_164_load_input1_write(local_avm_aspace67_write[0][0]),
      .avm_memcoalesce_load_load_input1_fpgaunique_164_load_input1_address(local_avm_aspace67_address[0][0]),
      .avm_memcoalesce_load_load_input1_fpgaunique_164_load_input1_writedata(local_avm_aspace67_writedata[0][0]),
      .avm_memcoalesce_load_load_input1_fpgaunique_164_load_input1_byteenable(local_avm_aspace67_byteenable[0][0]),
      .avm_memcoalesce_load_load_input1_fpgaunique_164_load_input1_waitrequest(local_avm_aspace67_waitrequest[0][0]),
      .avm_memcoalesce_load_load_input1_fpgaunique_164_load_input1_readdata(local_avm_aspace67_readdata[0][0]),
      .avm_memcoalesce_load_load_input1_fpgaunique_164_load_input1_readdatavalid(local_avm_aspace67_readdatavalid[0][0]),
      .avm_memcoalesce_load_load_input1_fpgaunique_164_load_input1_burstcount(local_avm_aspace67_burstcount[0][0]),
      .avm_memcoalesce_load_load_input1_fpgaunique_164_load_input1_writeack(local_avm_aspace67_writeack[0][0]),
      // AVM avm_memdep_3_load_input1
      .avm_memdep_3_load_input1_enable(local_avm_aspace67_enable[0][1]),
      .avm_memdep_3_load_input1_read(local_avm_aspace67_read[0][1]),
      .avm_memdep_3_load_input1_write(local_avm_aspace67_write[0][1]),
      .avm_memdep_3_load_input1_address(local_avm_aspace67_address[0][1]),
      .avm_memdep_3_load_input1_writedata(local_avm_aspace67_writedata[0][1]),
      .avm_memdep_3_load_input1_byteenable(local_avm_aspace67_byteenable[0][1]),
      .avm_memdep_3_load_input1_waitrequest(local_avm_aspace67_waitrequest[0][1]),
      .avm_memdep_3_load_input1_readdata(local_avm_aspace67_readdata[0][1]),
      .avm_memdep_3_load_input1_readdatavalid(local_avm_aspace67_readdatavalid[0][1]),
      .avm_memdep_3_load_input1_burstcount(local_avm_aspace67_burstcount[0][1]),
      .avm_memdep_3_load_input1_writeack(local_avm_aspace67_writeack[0][1]),
      // AVM avm_memcoalesce_load_load_input0_fpgaunique_164_load_input0
      .avm_memcoalesce_load_load_input0_fpgaunique_164_load_input0_enable(local_avm_aspace68_enable[0][0]),
      .avm_memcoalesce_load_load_input0_fpgaunique_164_load_input0_read(local_avm_aspace68_read[0][0]),
      .avm_memcoalesce_load_load_input0_fpgaunique_164_load_input0_write(local_avm_aspace68_write[0][0]),
      .avm_memcoalesce_load_load_input0_fpgaunique_164_load_input0_address(local_avm_aspace68_address[0][0]),
      .avm_memcoalesce_load_load_input0_fpgaunique_164_load_input0_writedata(local_avm_aspace68_writedata[0][0]),
      .avm_memcoalesce_load_load_input0_fpgaunique_164_load_input0_byteenable(local_avm_aspace68_byteenable[0][0]),
      .avm_memcoalesce_load_load_input0_fpgaunique_164_load_input0_waitrequest(local_avm_aspace68_waitrequest[0][0]),
      .avm_memcoalesce_load_load_input0_fpgaunique_164_load_input0_readdata(local_avm_aspace68_readdata[0][0]),
      .avm_memcoalesce_load_load_input0_fpgaunique_164_load_input0_readdatavalid(local_avm_aspace68_readdatavalid[0][0]),
      .avm_memcoalesce_load_load_input0_fpgaunique_164_load_input0_burstcount(local_avm_aspace68_burstcount[0][0]),
      .avm_memcoalesce_load_load_input0_fpgaunique_164_load_input0_writeack(local_avm_aspace68_writeack[0][0]),
      // AVM avm_memdep_3_load_input0
      .avm_memdep_3_load_input0_enable(local_avm_aspace68_enable[0][1]),
      .avm_memdep_3_load_input0_read(local_avm_aspace68_read[0][1]),
      .avm_memdep_3_load_input0_write(local_avm_aspace68_write[0][1]),
      .avm_memdep_3_load_input0_address(local_avm_aspace68_address[0][1]),
      .avm_memdep_3_load_input0_writedata(local_avm_aspace68_writedata[0][1]),
      .avm_memdep_3_load_input0_byteenable(local_avm_aspace68_byteenable[0][1]),
      .avm_memdep_3_load_input0_waitrequest(local_avm_aspace68_waitrequest[0][1]),
      .avm_memdep_3_load_input0_readdata(local_avm_aspace68_readdata[0][1]),
      .avm_memdep_3_load_input0_readdatavalid(local_avm_aspace68_readdatavalid[0][1]),
      .avm_memdep_3_load_input0_burstcount(local_avm_aspace68_burstcount[0][1]),
      .avm_memdep_3_load_input0_writeack(local_avm_aspace68_writeack[0][1])
   );

   generate
   begin:avmm_1_
      logic avmm_1_icm_in_arb_request [2];
      logic avmm_1_icm_in_arb_enable [2];
      logic avmm_1_icm_in_arb_read [2];
      logic avmm_1_icm_in_arb_write [2];
      logic avmm_1_icm_in_arb_burstcount [2];
      logic [27:0] avmm_1_icm_in_arb_address [2];
      logic [127:0] avmm_1_icm_in_arb_writedata [2];
      logic [15:0] avmm_1_icm_in_arb_byteenable [2];
      logic avmm_1_icm_in_arb_stall [2];
      logic avmm_1_icm_in_wrp_ack [2];
      logic avmm_1_icm_in_rrp_datavalid [2];
      logic [127:0] avmm_1_icm_in_rrp_data [2];
      logic icm_out_0_rw_arb_request [1];
      logic icm_out_0_rw_arb_enable [1];
      logic icm_out_0_rw_arb_read [1];
      logic icm_out_0_rw_arb_write [1];
      logic icm_out_0_rw_arb_burstcount [1];
      logic [27:0] icm_out_0_rw_arb_address [1];
      logic [127:0] icm_out_0_rw_arb_writedata [1];
      logic [15:0] icm_out_0_rw_arb_byteenable [1];
      logic icm_out_0_rw_arb_id [1];
      logic icm_out_0_rw_arb_stall [1];
      logic icm_out_0_rw_wrp_ack [1];
      logic icm_out_0_rw_rrp_datavalid [1];
      logic [127:0] icm_out_0_rw_rrp_data [1];
      logic icm_routedavmm_1_rw_arb_request [2];
      logic icm_routedavmm_1_rw_arb_enable [2];
      logic icm_routedavmm_1_rw_arb_read [2];
      logic icm_routedavmm_1_rw_arb_write [2];
      logic icm_routedavmm_1_rw_arb_burstcount [2];
      logic [27:0] icm_routedavmm_1_rw_arb_address [2];
      logic [127:0] icm_routedavmm_1_rw_arb_writedata [2];
      logic [15:0] icm_routedavmm_1_rw_arb_byteenable [2];
      logic icm_routedavmm_1_rw_arb_stall [2];
      logic icm_routedavmm_1_rw_wrp_ack [2];
      logic icm_routedavmm_1_rw_rrp_datavalid [2];
      logic [127:0] icm_routedavmm_1_rw_rrp_data [2];

      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:t
         // INST avmm_1_avm_to_ic of acl_avm_to_ic
         acl_avm_to_ic
         #(
            .DATA_W(128),
            .WRITEDATA_W(128),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(32),
            .BYTEENA_W(16)
         )
         avmm_1_avm_to_ic
         (
            // AVM avm
            .avm_enable(avmm_1_global_avm_enable[__i]),
            .avm_read(avmm_1_global_avm_read[__i]),
            .avm_write(avmm_1_global_avm_write[__i]),
            .avm_address(avmm_1_global_avm_address[__i]),
            .avm_writedata(avmm_1_global_avm_writedata[__i]),
            .avm_byteenable(avmm_1_global_avm_byteenable[__i]),
            .avm_waitrequest(avmm_1_global_avm_waitrequest[__i]),
            .avm_readdata(avmm_1_global_avm_readdata[__i]),
            .avm_readdatavalid(avmm_1_global_avm_readdatavalid[__i]),
            .avm_burstcount(avmm_1_global_avm_burstcount[__i]),
            .avm_writeack(avmm_1_global_avm_writeack[__i]),
            // ICM ic
            .ic_arb_request(avmm_1_icm_in_arb_request[__i]),
            .ic_arb_enable(avmm_1_icm_in_arb_enable[__i]),
            .ic_arb_read(avmm_1_icm_in_arb_read[__i]),
            .ic_arb_write(avmm_1_icm_in_arb_write[__i]),
            .ic_arb_burstcount(avmm_1_icm_in_arb_burstcount[__i]),
            .ic_arb_address(avmm_1_icm_in_arb_address[__i]),
            .ic_arb_writedata(avmm_1_icm_in_arb_writedata[__i]),
            .ic_arb_byteenable(avmm_1_icm_in_arb_byteenable[__i]),
            .ic_arb_stall(avmm_1_icm_in_arb_stall[__i]),
            .ic_wrp_ack(avmm_1_icm_in_wrp_ack[__i]),
            .ic_rrp_datavalid(avmm_1_icm_in_rrp_datavalid[__i]),
            .ic_rrp_data(avmm_1_icm_in_rrp_data[__i])
         );

      end

      // INST global_icavmm_1_rw of cnn_top_internal_ic_6374112871989877191
      cnn_top_internal_ic_6374112871989877191 global_icavmm_1_rw
      (
         .clock(clock),
         .resetn(resetn),
         // ICM m
         .m_arb_request(icm_routedavmm_1_rw_arb_request),
         .m_arb_enable(icm_routedavmm_1_rw_arb_enable),
         .m_arb_read(icm_routedavmm_1_rw_arb_read),
         .m_arb_write(icm_routedavmm_1_rw_arb_write),
         .m_arb_burstcount(icm_routedavmm_1_rw_arb_burstcount),
         .m_arb_address(icm_routedavmm_1_rw_arb_address),
         .m_arb_writedata(icm_routedavmm_1_rw_arb_writedata),
         .m_arb_byteenable(icm_routedavmm_1_rw_arb_byteenable),
         .m_arb_stall(icm_routedavmm_1_rw_arb_stall),
         .m_wrp_ack(icm_routedavmm_1_rw_wrp_ack),
         .m_rrp_datavalid(icm_routedavmm_1_rw_rrp_datavalid),
         .m_rrp_data(icm_routedavmm_1_rw_rrp_data),
         // ICM mout
         .mout_arb_request(icm_out_0_rw_arb_request[0]),
         .mout_arb_enable(icm_out_0_rw_arb_enable[0]),
         .mout_arb_read(icm_out_0_rw_arb_read[0]),
         .mout_arb_write(icm_out_0_rw_arb_write[0]),
         .mout_arb_burstcount(icm_out_0_rw_arb_burstcount[0]),
         .mout_arb_address(icm_out_0_rw_arb_address[0]),
         .mout_arb_writedata(icm_out_0_rw_arb_writedata[0]),
         .mout_arb_byteenable(icm_out_0_rw_arb_byteenable[0]),
         .mout_arb_id(icm_out_0_rw_arb_id[0]),
         .mout_arb_stall(icm_out_0_rw_arb_stall[0]),
         .mout_wrp_ack(icm_out_0_rw_wrp_ack[0]),
         .mout_rrp_datavalid(icm_out_0_rw_rrp_datavalid[0]),
         .mout_rrp_data(icm_out_0_rw_rrp_data[0])
      );

      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:mavmm_1_rw
         assign icm_routedavmm_1_rw_arb_request[__i] = avmm_1_icm_in_arb_request[__i];
         assign icm_routedavmm_1_rw_arb_enable[__i] = avmm_1_icm_in_arb_enable[__i];
         assign icm_routedavmm_1_rw_arb_read[__i] = avmm_1_icm_in_arb_read[__i];
         assign icm_routedavmm_1_rw_arb_write[__i] = avmm_1_icm_in_arb_write[__i];
         assign icm_routedavmm_1_rw_arb_burstcount[__i] = avmm_1_icm_in_arb_burstcount[__i];
         assign icm_routedavmm_1_rw_arb_address[__i] = avmm_1_icm_in_arb_address[__i];
         assign icm_routedavmm_1_rw_arb_writedata[__i] = avmm_1_icm_in_arb_writedata[__i];
         assign icm_routedavmm_1_rw_arb_byteenable[__i] = avmm_1_icm_in_arb_byteenable[__i];
         assign avmm_1_icm_in_arb_stall[__i] = icm_routedavmm_1_rw_arb_stall[__i];
         assign avmm_1_icm_in_wrp_ack[__i] = icm_routedavmm_1_rw_wrp_ack[__i];
         assign avmm_1_icm_in_rrp_datavalid[__i] = icm_routedavmm_1_rw_rrp_datavalid[__i];
         assign avmm_1_icm_in_rrp_data[__i] = icm_routedavmm_1_rw_rrp_data[__i];
      end

      // INST global_out_ic_to_avmavmm_1_rw of acl_ic_to_avm
      acl_ic_to_avm
      #(
         .DATA_W(128),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(32),
         .BYTEENA_W(16),
         .LATENCY(0),
         .USE_WRITE_ACK(0),
         .NO_IDLE_STALL(0),
         .ENABLE_WAITREQUEST_ALLOWANCE(0),
         .ID_W(1),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      global_out_ic_to_avmavmm_1_rw
      (
         // ICM ic
         .ic_arb_request(icm_out_0_rw_arb_request[0]),
         .ic_arb_enable(icm_out_0_rw_arb_enable[0]),
         .ic_arb_read(icm_out_0_rw_arb_read[0]),
         .ic_arb_write(icm_out_0_rw_arb_write[0]),
         .ic_arb_burstcount(icm_out_0_rw_arb_burstcount[0]),
         .ic_arb_address(icm_out_0_rw_arb_address[0]),
         .ic_arb_writedata(icm_out_0_rw_arb_writedata[0]),
         .ic_arb_byteenable(icm_out_0_rw_arb_byteenable[0]),
         .ic_arb_id(icm_out_0_rw_arb_id[0]),
         .ic_arb_stall(icm_out_0_rw_arb_stall[0]),
         .ic_wrp_ack(icm_out_0_rw_wrp_ack[0]),
         .ic_rrp_datavalid(icm_out_0_rw_rrp_datavalid[0]),
         .ic_rrp_data(icm_out_0_rw_rrp_data[0]),
         // AVM avm
         .avm_enable(avmm_1_rw_enable),
         .avm_read(avmm_1_rw_read),
         .avm_write(avmm_1_rw_write),
         .avm_address(avmm_1_rw_address),
         .avm_writedata(avmm_1_rw_writedata),
         .avm_byteenable(avmm_1_rw_byteenable),
         .avm_waitrequest(avmm_1_rw_waitrequest),
         .avm_readdata(avmm_1_rw_readdata),
         .avm_readdatavalid(avmm_1_rw_readdatavalid),
         .avm_burstcount(avmm_1_rw_burstcount),
         .avm_writeack(avmm_1_rw_writeack),
         .clock(clock),
         .resetn(resetn)
      );

   end
   endgenerate

   generate
   begin:avmm_2_
      logic avmm_2_icm_in_arb_request [2];
      logic avmm_2_icm_in_arb_enable [2];
      logic avmm_2_icm_in_arb_read [2];
      logic avmm_2_icm_in_arb_write [2];
      logic avmm_2_icm_in_arb_burstcount [2];
      logic [27:0] avmm_2_icm_in_arb_address [2];
      logic [127:0] avmm_2_icm_in_arb_writedata [2];
      logic [15:0] avmm_2_icm_in_arb_byteenable [2];
      logic avmm_2_icm_in_arb_stall [2];
      logic avmm_2_icm_in_wrp_ack [2];
      logic avmm_2_icm_in_rrp_datavalid [2];
      logic [127:0] avmm_2_icm_in_rrp_data [2];
      logic icm_out_0_rw_arb_request [1];
      logic icm_out_0_rw_arb_enable [1];
      logic icm_out_0_rw_arb_read [1];
      logic icm_out_0_rw_arb_write [1];
      logic icm_out_0_rw_arb_burstcount [1];
      logic [27:0] icm_out_0_rw_arb_address [1];
      logic [127:0] icm_out_0_rw_arb_writedata [1];
      logic [15:0] icm_out_0_rw_arb_byteenable [1];
      logic icm_out_0_rw_arb_id [1];
      logic icm_out_0_rw_arb_stall [1];
      logic icm_out_0_rw_wrp_ack [1];
      logic icm_out_0_rw_rrp_datavalid [1];
      logic [127:0] icm_out_0_rw_rrp_data [1];
      logic icm_routedavmm_2_rw_arb_request [2];
      logic icm_routedavmm_2_rw_arb_enable [2];
      logic icm_routedavmm_2_rw_arb_read [2];
      logic icm_routedavmm_2_rw_arb_write [2];
      logic icm_routedavmm_2_rw_arb_burstcount [2];
      logic [27:0] icm_routedavmm_2_rw_arb_address [2];
      logic [127:0] icm_routedavmm_2_rw_arb_writedata [2];
      logic [15:0] icm_routedavmm_2_rw_arb_byteenable [2];
      logic icm_routedavmm_2_rw_arb_stall [2];
      logic icm_routedavmm_2_rw_wrp_ack [2];
      logic icm_routedavmm_2_rw_rrp_datavalid [2];
      logic [127:0] icm_routedavmm_2_rw_rrp_data [2];

      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:t
         // INST avmm_2_avm_to_ic of acl_avm_to_ic
         acl_avm_to_ic
         #(
            .DATA_W(128),
            .WRITEDATA_W(128),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(32),
            .BYTEENA_W(16)
         )
         avmm_2_avm_to_ic
         (
            // AVM avm
            .avm_enable(avmm_2_global_avm_enable[__i]),
            .avm_read(avmm_2_global_avm_read[__i]),
            .avm_write(avmm_2_global_avm_write[__i]),
            .avm_address(avmm_2_global_avm_address[__i]),
            .avm_writedata(avmm_2_global_avm_writedata[__i]),
            .avm_byteenable(avmm_2_global_avm_byteenable[__i]),
            .avm_waitrequest(avmm_2_global_avm_waitrequest[__i]),
            .avm_readdata(avmm_2_global_avm_readdata[__i]),
            .avm_readdatavalid(avmm_2_global_avm_readdatavalid[__i]),
            .avm_burstcount(avmm_2_global_avm_burstcount[__i]),
            .avm_writeack(avmm_2_global_avm_writeack[__i]),
            // ICM ic
            .ic_arb_request(avmm_2_icm_in_arb_request[__i]),
            .ic_arb_enable(avmm_2_icm_in_arb_enable[__i]),
            .ic_arb_read(avmm_2_icm_in_arb_read[__i]),
            .ic_arb_write(avmm_2_icm_in_arb_write[__i]),
            .ic_arb_burstcount(avmm_2_icm_in_arb_burstcount[__i]),
            .ic_arb_address(avmm_2_icm_in_arb_address[__i]),
            .ic_arb_writedata(avmm_2_icm_in_arb_writedata[__i]),
            .ic_arb_byteenable(avmm_2_icm_in_arb_byteenable[__i]),
            .ic_arb_stall(avmm_2_icm_in_arb_stall[__i]),
            .ic_wrp_ack(avmm_2_icm_in_wrp_ack[__i]),
            .ic_rrp_datavalid(avmm_2_icm_in_rrp_datavalid[__i]),
            .ic_rrp_data(avmm_2_icm_in_rrp_data[__i])
         );

      end

      // INST global_icavmm_2_rw of cnn_top_internal_ic_6374112871989877191
      cnn_top_internal_ic_6374112871989877191 global_icavmm_2_rw
      (
         .clock(clock),
         .resetn(resetn),
         // ICM m
         .m_arb_request(icm_routedavmm_2_rw_arb_request),
         .m_arb_enable(icm_routedavmm_2_rw_arb_enable),
         .m_arb_read(icm_routedavmm_2_rw_arb_read),
         .m_arb_write(icm_routedavmm_2_rw_arb_write),
         .m_arb_burstcount(icm_routedavmm_2_rw_arb_burstcount),
         .m_arb_address(icm_routedavmm_2_rw_arb_address),
         .m_arb_writedata(icm_routedavmm_2_rw_arb_writedata),
         .m_arb_byteenable(icm_routedavmm_2_rw_arb_byteenable),
         .m_arb_stall(icm_routedavmm_2_rw_arb_stall),
         .m_wrp_ack(icm_routedavmm_2_rw_wrp_ack),
         .m_rrp_datavalid(icm_routedavmm_2_rw_rrp_datavalid),
         .m_rrp_data(icm_routedavmm_2_rw_rrp_data),
         // ICM mout
         .mout_arb_request(icm_out_0_rw_arb_request[0]),
         .mout_arb_enable(icm_out_0_rw_arb_enable[0]),
         .mout_arb_read(icm_out_0_rw_arb_read[0]),
         .mout_arb_write(icm_out_0_rw_arb_write[0]),
         .mout_arb_burstcount(icm_out_0_rw_arb_burstcount[0]),
         .mout_arb_address(icm_out_0_rw_arb_address[0]),
         .mout_arb_writedata(icm_out_0_rw_arb_writedata[0]),
         .mout_arb_byteenable(icm_out_0_rw_arb_byteenable[0]),
         .mout_arb_id(icm_out_0_rw_arb_id[0]),
         .mout_arb_stall(icm_out_0_rw_arb_stall[0]),
         .mout_wrp_ack(icm_out_0_rw_wrp_ack[0]),
         .mout_rrp_datavalid(icm_out_0_rw_rrp_datavalid[0]),
         .mout_rrp_data(icm_out_0_rw_rrp_data[0])
      );

      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:mavmm_2_rw
         assign icm_routedavmm_2_rw_arb_request[__i] = avmm_2_icm_in_arb_request[__i];
         assign icm_routedavmm_2_rw_arb_enable[__i] = avmm_2_icm_in_arb_enable[__i];
         assign icm_routedavmm_2_rw_arb_read[__i] = avmm_2_icm_in_arb_read[__i];
         assign icm_routedavmm_2_rw_arb_write[__i] = avmm_2_icm_in_arb_write[__i];
         assign icm_routedavmm_2_rw_arb_burstcount[__i] = avmm_2_icm_in_arb_burstcount[__i];
         assign icm_routedavmm_2_rw_arb_address[__i] = avmm_2_icm_in_arb_address[__i];
         assign icm_routedavmm_2_rw_arb_writedata[__i] = avmm_2_icm_in_arb_writedata[__i];
         assign icm_routedavmm_2_rw_arb_byteenable[__i] = avmm_2_icm_in_arb_byteenable[__i];
         assign avmm_2_icm_in_arb_stall[__i] = icm_routedavmm_2_rw_arb_stall[__i];
         assign avmm_2_icm_in_wrp_ack[__i] = icm_routedavmm_2_rw_wrp_ack[__i];
         assign avmm_2_icm_in_rrp_datavalid[__i] = icm_routedavmm_2_rw_rrp_datavalid[__i];
         assign avmm_2_icm_in_rrp_data[__i] = icm_routedavmm_2_rw_rrp_data[__i];
      end

      // INST global_out_ic_to_avmavmm_2_rw of acl_ic_to_avm
      acl_ic_to_avm
      #(
         .DATA_W(128),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(32),
         .BYTEENA_W(16),
         .LATENCY(0),
         .USE_WRITE_ACK(0),
         .NO_IDLE_STALL(0),
         .ENABLE_WAITREQUEST_ALLOWANCE(0),
         .ID_W(1),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      global_out_ic_to_avmavmm_2_rw
      (
         // ICM ic
         .ic_arb_request(icm_out_0_rw_arb_request[0]),
         .ic_arb_enable(icm_out_0_rw_arb_enable[0]),
         .ic_arb_read(icm_out_0_rw_arb_read[0]),
         .ic_arb_write(icm_out_0_rw_arb_write[0]),
         .ic_arb_burstcount(icm_out_0_rw_arb_burstcount[0]),
         .ic_arb_address(icm_out_0_rw_arb_address[0]),
         .ic_arb_writedata(icm_out_0_rw_arb_writedata[0]),
         .ic_arb_byteenable(icm_out_0_rw_arb_byteenable[0]),
         .ic_arb_id(icm_out_0_rw_arb_id[0]),
         .ic_arb_stall(icm_out_0_rw_arb_stall[0]),
         .ic_wrp_ack(icm_out_0_rw_wrp_ack[0]),
         .ic_rrp_datavalid(icm_out_0_rw_rrp_datavalid[0]),
         .ic_rrp_data(icm_out_0_rw_rrp_data[0]),
         // AVM avm
         .avm_enable(avmm_2_rw_enable),
         .avm_read(avmm_2_rw_read),
         .avm_write(avmm_2_rw_write),
         .avm_address(avmm_2_rw_address),
         .avm_writedata(avmm_2_rw_writedata),
         .avm_byteenable(avmm_2_rw_byteenable),
         .avm_waitrequest(avmm_2_rw_waitrequest),
         .avm_readdata(avmm_2_rw_readdata),
         .avm_readdatavalid(avmm_2_rw_readdatavalid),
         .avm_burstcount(avmm_2_rw_burstcount),
         .avm_writeack(avmm_2_rw_writeack),
         .clock(clock),
         .resetn(resetn)
      );

   end
   endgenerate

   generate
   begin:avmm_3_
      logic avmm_3_icm_in_arb_request [1];
      logic avmm_3_icm_in_arb_enable [1];
      logic avmm_3_icm_in_arb_read [1];
      logic avmm_3_icm_in_arb_write [1];
      logic avmm_3_icm_in_arb_burstcount [1];
      logic [29:0] avmm_3_icm_in_arb_address [1];
      logic [31:0] avmm_3_icm_in_arb_writedata [1];
      logic [3:0] avmm_3_icm_in_arb_byteenable [1];
      logic avmm_3_icm_in_arb_stall [1];
      logic avmm_3_icm_in_wrp_ack [1];
      logic avmm_3_icm_in_rrp_datavalid [1];
      logic [31:0] avmm_3_icm_in_rrp_data [1];
      logic icm_out_0_rw_arb_request [1];
      logic icm_out_0_rw_arb_enable [1];
      logic icm_out_0_rw_arb_read [1];
      logic icm_out_0_rw_arb_write [1];
      logic icm_out_0_rw_arb_burstcount [1];
      logic [29:0] icm_out_0_rw_arb_address [1];
      logic [31:0] icm_out_0_rw_arb_writedata [1];
      logic [3:0] icm_out_0_rw_arb_byteenable [1];
      logic icm_out_0_rw_arb_id [1];
      logic icm_out_0_rw_arb_stall [1];
      logic icm_out_0_rw_wrp_ack [1];
      logic icm_out_0_rw_rrp_datavalid [1];
      logic [31:0] icm_out_0_rw_rrp_data [1];
      logic icm_routedavmm_3_rw_arb_request [1];
      logic icm_routedavmm_3_rw_arb_enable [1];
      logic icm_routedavmm_3_rw_arb_read [1];
      logic icm_routedavmm_3_rw_arb_write [1];
      logic icm_routedavmm_3_rw_arb_burstcount [1];
      logic [29:0] icm_routedavmm_3_rw_arb_address [1];
      logic [31:0] icm_routedavmm_3_rw_arb_writedata [1];
      logic [3:0] icm_routedavmm_3_rw_arb_byteenable [1];
      logic icm_routedavmm_3_rw_arb_stall [1];
      logic icm_routedavmm_3_rw_wrp_ack [1];
      logic icm_routedavmm_3_rw_rrp_datavalid [1];
      logic [31:0] icm_routedavmm_3_rw_rrp_data [1];

      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:t
         // INST avmm_3_avm_to_ic of acl_avm_to_ic
         acl_avm_to_ic
         #(
            .DATA_W(32),
            .WRITEDATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(32),
            .BYTEENA_W(4)
         )
         avmm_3_avm_to_ic
         (
            // AVM avm
            .avm_enable(avmm_3_global_avm_enable[__i]),
            .avm_read(avmm_3_global_avm_read[__i]),
            .avm_write(avmm_3_global_avm_write[__i]),
            .avm_address(avmm_3_global_avm_address[__i]),
            .avm_writedata(avmm_3_global_avm_writedata[__i]),
            .avm_byteenable(avmm_3_global_avm_byteenable[__i]),
            .avm_waitrequest(avmm_3_global_avm_waitrequest[__i]),
            .avm_readdata(avmm_3_global_avm_readdata[__i]),
            .avm_readdatavalid(avmm_3_global_avm_readdatavalid[__i]),
            .avm_burstcount(avmm_3_global_avm_burstcount[__i]),
            .avm_writeack(avmm_3_global_avm_writeack[__i]),
            // ICM ic
            .ic_arb_request(avmm_3_icm_in_arb_request[__i]),
            .ic_arb_enable(avmm_3_icm_in_arb_enable[__i]),
            .ic_arb_read(avmm_3_icm_in_arb_read[__i]),
            .ic_arb_write(avmm_3_icm_in_arb_write[__i]),
            .ic_arb_burstcount(avmm_3_icm_in_arb_burstcount[__i]),
            .ic_arb_address(avmm_3_icm_in_arb_address[__i]),
            .ic_arb_writedata(avmm_3_icm_in_arb_writedata[__i]),
            .ic_arb_byteenable(avmm_3_icm_in_arb_byteenable[__i]),
            .ic_arb_stall(avmm_3_icm_in_arb_stall[__i]),
            .ic_wrp_ack(avmm_3_icm_in_wrp_ack[__i]),
            .ic_rrp_datavalid(avmm_3_icm_in_rrp_datavalid[__i]),
            .ic_rrp_data(avmm_3_icm_in_rrp_data[__i])
         );

      end

      // INST global_icavmm_3_rw of cnn_top_internal_ic_2694229448187658071
      cnn_top_internal_ic_2694229448187658071 global_icavmm_3_rw
      (
         .clock(clock),
         .resetn(resetn),
         // ICM m
         .m_arb_request(icm_routedavmm_3_rw_arb_request),
         .m_arb_enable(icm_routedavmm_3_rw_arb_enable),
         .m_arb_read(icm_routedavmm_3_rw_arb_read),
         .m_arb_write(icm_routedavmm_3_rw_arb_write),
         .m_arb_burstcount(icm_routedavmm_3_rw_arb_burstcount),
         .m_arb_address(icm_routedavmm_3_rw_arb_address),
         .m_arb_writedata(icm_routedavmm_3_rw_arb_writedata),
         .m_arb_byteenable(icm_routedavmm_3_rw_arb_byteenable),
         .m_arb_stall(icm_routedavmm_3_rw_arb_stall),
         .m_wrp_ack(icm_routedavmm_3_rw_wrp_ack),
         .m_rrp_datavalid(icm_routedavmm_3_rw_rrp_datavalid),
         .m_rrp_data(icm_routedavmm_3_rw_rrp_data),
         // ICM mout
         .mout_arb_request(icm_out_0_rw_arb_request[0]),
         .mout_arb_enable(icm_out_0_rw_arb_enable[0]),
         .mout_arb_read(icm_out_0_rw_arb_read[0]),
         .mout_arb_write(icm_out_0_rw_arb_write[0]),
         .mout_arb_burstcount(icm_out_0_rw_arb_burstcount[0]),
         .mout_arb_address(icm_out_0_rw_arb_address[0]),
         .mout_arb_writedata(icm_out_0_rw_arb_writedata[0]),
         .mout_arb_byteenable(icm_out_0_rw_arb_byteenable[0]),
         .mout_arb_id(icm_out_0_rw_arb_id[0]),
         .mout_arb_stall(icm_out_0_rw_arb_stall[0]),
         .mout_wrp_ack(icm_out_0_rw_wrp_ack[0]),
         .mout_rrp_datavalid(icm_out_0_rw_rrp_datavalid[0]),
         .mout_rrp_data(icm_out_0_rw_rrp_data[0])
      );

      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:mavmm_3_rw
         assign icm_routedavmm_3_rw_arb_request[__i] = avmm_3_icm_in_arb_request[__i];
         assign icm_routedavmm_3_rw_arb_enable[__i] = avmm_3_icm_in_arb_enable[__i];
         assign icm_routedavmm_3_rw_arb_read[__i] = avmm_3_icm_in_arb_read[__i];
         assign icm_routedavmm_3_rw_arb_write[__i] = avmm_3_icm_in_arb_write[__i];
         assign icm_routedavmm_3_rw_arb_burstcount[__i] = avmm_3_icm_in_arb_burstcount[__i];
         assign icm_routedavmm_3_rw_arb_address[__i] = avmm_3_icm_in_arb_address[__i];
         assign icm_routedavmm_3_rw_arb_writedata[__i] = avmm_3_icm_in_arb_writedata[__i];
         assign icm_routedavmm_3_rw_arb_byteenable[__i] = avmm_3_icm_in_arb_byteenable[__i];
         assign avmm_3_icm_in_arb_stall[__i] = icm_routedavmm_3_rw_arb_stall[__i];
         assign avmm_3_icm_in_wrp_ack[__i] = icm_routedavmm_3_rw_wrp_ack[__i];
         assign avmm_3_icm_in_rrp_datavalid[__i] = icm_routedavmm_3_rw_rrp_datavalid[__i];
         assign avmm_3_icm_in_rrp_data[__i] = icm_routedavmm_3_rw_rrp_data[__i];
      end

      // INST global_out_ic_to_avmavmm_3_rw of acl_ic_to_avm
      acl_ic_to_avm
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(32),
         .BYTEENA_W(4),
         .LATENCY(0),
         .USE_WRITE_ACK(0),
         .NO_IDLE_STALL(0),
         .ENABLE_WAITREQUEST_ALLOWANCE(0),
         .ID_W(1),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      global_out_ic_to_avmavmm_3_rw
      (
         // ICM ic
         .ic_arb_request(icm_out_0_rw_arb_request[0]),
         .ic_arb_enable(icm_out_0_rw_arb_enable[0]),
         .ic_arb_read(icm_out_0_rw_arb_read[0]),
         .ic_arb_write(icm_out_0_rw_arb_write[0]),
         .ic_arb_burstcount(icm_out_0_rw_arb_burstcount[0]),
         .ic_arb_address(icm_out_0_rw_arb_address[0]),
         .ic_arb_writedata(icm_out_0_rw_arb_writedata[0]),
         .ic_arb_byteenable(icm_out_0_rw_arb_byteenable[0]),
         .ic_arb_id(icm_out_0_rw_arb_id[0]),
         .ic_arb_stall(icm_out_0_rw_arb_stall[0]),
         .ic_wrp_ack(icm_out_0_rw_wrp_ack[0]),
         .ic_rrp_datavalid(icm_out_0_rw_rrp_datavalid[0]),
         .ic_rrp_data(icm_out_0_rw_rrp_data[0]),
         // AVM avm
         .avm_enable(avmm_3_rw_enable),
         .avm_read(avmm_3_rw_read),
         .avm_write(avmm_3_rw_write),
         .avm_address(avmm_3_rw_address),
         .avm_writedata(avmm_3_rw_writedata),
         .avm_byteenable(avmm_3_rw_byteenable),
         .avm_waitrequest(avmm_3_rw_waitrequest),
         .avm_readdata(avmm_3_rw_readdata),
         .avm_readdatavalid(avmm_3_rw_readdatavalid),
         .avm_burstcount(avmm_3_rw_burstcount),
         .avm_writeack(avmm_3_rw_writeack),
         .clock(clock),
         .resetn(resetn)
      );

   end
   endgenerate

   generate
   begin:avmm_4_
      logic avmm_4_icm_in_arb_request [1];
      logic avmm_4_icm_in_arb_enable [1];
      logic avmm_4_icm_in_arb_read [1];
      logic avmm_4_icm_in_arb_write [1];
      logic avmm_4_icm_in_arb_burstcount [1];
      logic [29:0] avmm_4_icm_in_arb_address [1];
      logic [31:0] avmm_4_icm_in_arb_writedata [1];
      logic [3:0] avmm_4_icm_in_arb_byteenable [1];
      logic avmm_4_icm_in_arb_stall [1];
      logic avmm_4_icm_in_wrp_ack [1];
      logic avmm_4_icm_in_rrp_datavalid [1];
      logic [31:0] avmm_4_icm_in_rrp_data [1];
      logic icm_out_0_rw_arb_request [1];
      logic icm_out_0_rw_arb_enable [1];
      logic icm_out_0_rw_arb_read [1];
      logic icm_out_0_rw_arb_write [1];
      logic icm_out_0_rw_arb_burstcount [1];
      logic [29:0] icm_out_0_rw_arb_address [1];
      logic [31:0] icm_out_0_rw_arb_writedata [1];
      logic [3:0] icm_out_0_rw_arb_byteenable [1];
      logic icm_out_0_rw_arb_id [1];
      logic icm_out_0_rw_arb_stall [1];
      logic icm_out_0_rw_wrp_ack [1];
      logic icm_out_0_rw_rrp_datavalid [1];
      logic [31:0] icm_out_0_rw_rrp_data [1];
      logic icm_routedavmm_4_rw_arb_request [1];
      logic icm_routedavmm_4_rw_arb_enable [1];
      logic icm_routedavmm_4_rw_arb_read [1];
      logic icm_routedavmm_4_rw_arb_write [1];
      logic icm_routedavmm_4_rw_arb_burstcount [1];
      logic [29:0] icm_routedavmm_4_rw_arb_address [1];
      logic [31:0] icm_routedavmm_4_rw_arb_writedata [1];
      logic [3:0] icm_routedavmm_4_rw_arb_byteenable [1];
      logic icm_routedavmm_4_rw_arb_stall [1];
      logic icm_routedavmm_4_rw_wrp_ack [1];
      logic icm_routedavmm_4_rw_rrp_datavalid [1];
      logic [31:0] icm_routedavmm_4_rw_rrp_data [1];

      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:t
         // INST avmm_4_avm_to_ic of acl_avm_to_ic
         acl_avm_to_ic
         #(
            .DATA_W(32),
            .WRITEDATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(32),
            .BYTEENA_W(4)
         )
         avmm_4_avm_to_ic
         (
            // AVM avm
            .avm_enable(avmm_4_global_avm_enable[__i]),
            .avm_read(avmm_4_global_avm_read[__i]),
            .avm_write(avmm_4_global_avm_write[__i]),
            .avm_address(avmm_4_global_avm_address[__i]),
            .avm_writedata(avmm_4_global_avm_writedata[__i]),
            .avm_byteenable(avmm_4_global_avm_byteenable[__i]),
            .avm_waitrequest(avmm_4_global_avm_waitrequest[__i]),
            .avm_readdata(avmm_4_global_avm_readdata[__i]),
            .avm_readdatavalid(avmm_4_global_avm_readdatavalid[__i]),
            .avm_burstcount(avmm_4_global_avm_burstcount[__i]),
            .avm_writeack(avmm_4_global_avm_writeack[__i]),
            // ICM ic
            .ic_arb_request(avmm_4_icm_in_arb_request[__i]),
            .ic_arb_enable(avmm_4_icm_in_arb_enable[__i]),
            .ic_arb_read(avmm_4_icm_in_arb_read[__i]),
            .ic_arb_write(avmm_4_icm_in_arb_write[__i]),
            .ic_arb_burstcount(avmm_4_icm_in_arb_burstcount[__i]),
            .ic_arb_address(avmm_4_icm_in_arb_address[__i]),
            .ic_arb_writedata(avmm_4_icm_in_arb_writedata[__i]),
            .ic_arb_byteenable(avmm_4_icm_in_arb_byteenable[__i]),
            .ic_arb_stall(avmm_4_icm_in_arb_stall[__i]),
            .ic_wrp_ack(avmm_4_icm_in_wrp_ack[__i]),
            .ic_rrp_datavalid(avmm_4_icm_in_rrp_datavalid[__i]),
            .ic_rrp_data(avmm_4_icm_in_rrp_data[__i])
         );

      end

      // INST global_icavmm_4_rw of cnn_top_internal_ic_2694229448187658071
      cnn_top_internal_ic_2694229448187658071 global_icavmm_4_rw
      (
         .clock(clock),
         .resetn(resetn),
         // ICM m
         .m_arb_request(icm_routedavmm_4_rw_arb_request),
         .m_arb_enable(icm_routedavmm_4_rw_arb_enable),
         .m_arb_read(icm_routedavmm_4_rw_arb_read),
         .m_arb_write(icm_routedavmm_4_rw_arb_write),
         .m_arb_burstcount(icm_routedavmm_4_rw_arb_burstcount),
         .m_arb_address(icm_routedavmm_4_rw_arb_address),
         .m_arb_writedata(icm_routedavmm_4_rw_arb_writedata),
         .m_arb_byteenable(icm_routedavmm_4_rw_arb_byteenable),
         .m_arb_stall(icm_routedavmm_4_rw_arb_stall),
         .m_wrp_ack(icm_routedavmm_4_rw_wrp_ack),
         .m_rrp_datavalid(icm_routedavmm_4_rw_rrp_datavalid),
         .m_rrp_data(icm_routedavmm_4_rw_rrp_data),
         // ICM mout
         .mout_arb_request(icm_out_0_rw_arb_request[0]),
         .mout_arb_enable(icm_out_0_rw_arb_enable[0]),
         .mout_arb_read(icm_out_0_rw_arb_read[0]),
         .mout_arb_write(icm_out_0_rw_arb_write[0]),
         .mout_arb_burstcount(icm_out_0_rw_arb_burstcount[0]),
         .mout_arb_address(icm_out_0_rw_arb_address[0]),
         .mout_arb_writedata(icm_out_0_rw_arb_writedata[0]),
         .mout_arb_byteenable(icm_out_0_rw_arb_byteenable[0]),
         .mout_arb_id(icm_out_0_rw_arb_id[0]),
         .mout_arb_stall(icm_out_0_rw_arb_stall[0]),
         .mout_wrp_ack(icm_out_0_rw_wrp_ack[0]),
         .mout_rrp_datavalid(icm_out_0_rw_rrp_datavalid[0]),
         .mout_rrp_data(icm_out_0_rw_rrp_data[0])
      );

      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:mavmm_4_rw
         assign icm_routedavmm_4_rw_arb_request[__i] = avmm_4_icm_in_arb_request[__i];
         assign icm_routedavmm_4_rw_arb_enable[__i] = avmm_4_icm_in_arb_enable[__i];
         assign icm_routedavmm_4_rw_arb_read[__i] = avmm_4_icm_in_arb_read[__i];
         assign icm_routedavmm_4_rw_arb_write[__i] = avmm_4_icm_in_arb_write[__i];
         assign icm_routedavmm_4_rw_arb_burstcount[__i] = avmm_4_icm_in_arb_burstcount[__i];
         assign icm_routedavmm_4_rw_arb_address[__i] = avmm_4_icm_in_arb_address[__i];
         assign icm_routedavmm_4_rw_arb_writedata[__i] = avmm_4_icm_in_arb_writedata[__i];
         assign icm_routedavmm_4_rw_arb_byteenable[__i] = avmm_4_icm_in_arb_byteenable[__i];
         assign avmm_4_icm_in_arb_stall[__i] = icm_routedavmm_4_rw_arb_stall[__i];
         assign avmm_4_icm_in_wrp_ack[__i] = icm_routedavmm_4_rw_wrp_ack[__i];
         assign avmm_4_icm_in_rrp_datavalid[__i] = icm_routedavmm_4_rw_rrp_datavalid[__i];
         assign avmm_4_icm_in_rrp_data[__i] = icm_routedavmm_4_rw_rrp_data[__i];
      end

      // INST global_out_ic_to_avmavmm_4_rw of acl_ic_to_avm
      acl_ic_to_avm
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(32),
         .BYTEENA_W(4),
         .LATENCY(0),
         .USE_WRITE_ACK(0),
         .NO_IDLE_STALL(0),
         .ENABLE_WAITREQUEST_ALLOWANCE(0),
         .ID_W(1),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      global_out_ic_to_avmavmm_4_rw
      (
         // ICM ic
         .ic_arb_request(icm_out_0_rw_arb_request[0]),
         .ic_arb_enable(icm_out_0_rw_arb_enable[0]),
         .ic_arb_read(icm_out_0_rw_arb_read[0]),
         .ic_arb_write(icm_out_0_rw_arb_write[0]),
         .ic_arb_burstcount(icm_out_0_rw_arb_burstcount[0]),
         .ic_arb_address(icm_out_0_rw_arb_address[0]),
         .ic_arb_writedata(icm_out_0_rw_arb_writedata[0]),
         .ic_arb_byteenable(icm_out_0_rw_arb_byteenable[0]),
         .ic_arb_id(icm_out_0_rw_arb_id[0]),
         .ic_arb_stall(icm_out_0_rw_arb_stall[0]),
         .ic_wrp_ack(icm_out_0_rw_wrp_ack[0]),
         .ic_rrp_datavalid(icm_out_0_rw_rrp_datavalid[0]),
         .ic_rrp_data(icm_out_0_rw_rrp_data[0]),
         // AVM avm
         .avm_enable(avmm_4_rw_enable),
         .avm_read(avmm_4_rw_read),
         .avm_write(avmm_4_rw_write),
         .avm_address(avmm_4_rw_address),
         .avm_writedata(avmm_4_rw_writedata),
         .avm_byteenable(avmm_4_rw_byteenable),
         .avm_waitrequest(avmm_4_rw_waitrequest),
         .avm_readdata(avmm_4_rw_readdata),
         .avm_readdatavalid(avmm_4_rw_readdatavalid),
         .avm_burstcount(avmm_4_rw_burstcount),
         .avm_writeack(avmm_4_rw_writeack),
         .clock(clock),
         .resetn(resetn)
      );

   end
   endgenerate

   generate
   begin:avmm_5_
      logic avmm_5_icm_in_arb_request [3];
      logic avmm_5_icm_in_arb_enable [3];
      logic avmm_5_icm_in_arb_read [3];
      logic avmm_5_icm_in_arb_write [3];
      logic avmm_5_icm_in_arb_burstcount [3];
      logic [29:0] avmm_5_icm_in_arb_address [3];
      logic [31:0] avmm_5_icm_in_arb_writedata [3];
      logic [3:0] avmm_5_icm_in_arb_byteenable [3];
      logic avmm_5_icm_in_arb_stall [3];
      logic avmm_5_icm_in_wrp_ack [3];
      logic avmm_5_icm_in_rrp_datavalid [3];
      logic [31:0] avmm_5_icm_in_rrp_data [3];
      logic icm_out_0_rw_arb_request [1];
      logic icm_out_0_rw_arb_enable [1];
      logic icm_out_0_rw_arb_read [1];
      logic icm_out_0_rw_arb_write [1];
      logic icm_out_0_rw_arb_burstcount [1];
      logic [29:0] icm_out_0_rw_arb_address [1];
      logic [31:0] icm_out_0_rw_arb_writedata [1];
      logic [3:0] icm_out_0_rw_arb_byteenable [1];
      logic [1:0] icm_out_0_rw_arb_id [1];
      logic icm_out_0_rw_arb_stall [1];
      logic icm_out_0_rw_wrp_ack [1];
      logic icm_out_0_rw_rrp_datavalid [1];
      logic [31:0] icm_out_0_rw_rrp_data [1];
      logic icm_routedavmm_5_rw_arb_request [3];
      logic icm_routedavmm_5_rw_arb_enable [3];
      logic icm_routedavmm_5_rw_arb_read [3];
      logic icm_routedavmm_5_rw_arb_write [3];
      logic icm_routedavmm_5_rw_arb_burstcount [3];
      logic [29:0] icm_routedavmm_5_rw_arb_address [3];
      logic [31:0] icm_routedavmm_5_rw_arb_writedata [3];
      logic [3:0] icm_routedavmm_5_rw_arb_byteenable [3];
      logic icm_routedavmm_5_rw_arb_stall [3];
      logic icm_routedavmm_5_rw_wrp_ack [3];
      logic icm_routedavmm_5_rw_rrp_datavalid [3];
      logic [31:0] icm_routedavmm_5_rw_rrp_data [3];

      for( __i = 0; __i < 3; __i = __i + 1 )
      begin:t
         // INST avmm_5_avm_to_ic of acl_avm_to_ic
         acl_avm_to_ic
         #(
            .DATA_W(32),
            .WRITEDATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(32),
            .BYTEENA_W(4)
         )
         avmm_5_avm_to_ic
         (
            // AVM avm
            .avm_enable(avmm_5_global_avm_enable[__i]),
            .avm_read(avmm_5_global_avm_read[__i]),
            .avm_write(avmm_5_global_avm_write[__i]),
            .avm_address(avmm_5_global_avm_address[__i]),
            .avm_writedata(avmm_5_global_avm_writedata[__i]),
            .avm_byteenable(avmm_5_global_avm_byteenable[__i]),
            .avm_waitrequest(avmm_5_global_avm_waitrequest[__i]),
            .avm_readdata(avmm_5_global_avm_readdata[__i]),
            .avm_readdatavalid(avmm_5_global_avm_readdatavalid[__i]),
            .avm_burstcount(avmm_5_global_avm_burstcount[__i]),
            .avm_writeack(avmm_5_global_avm_writeack[__i]),
            // ICM ic
            .ic_arb_request(avmm_5_icm_in_arb_request[__i]),
            .ic_arb_enable(avmm_5_icm_in_arb_enable[__i]),
            .ic_arb_read(avmm_5_icm_in_arb_read[__i]),
            .ic_arb_write(avmm_5_icm_in_arb_write[__i]),
            .ic_arb_burstcount(avmm_5_icm_in_arb_burstcount[__i]),
            .ic_arb_address(avmm_5_icm_in_arb_address[__i]),
            .ic_arb_writedata(avmm_5_icm_in_arb_writedata[__i]),
            .ic_arb_byteenable(avmm_5_icm_in_arb_byteenable[__i]),
            .ic_arb_stall(avmm_5_icm_in_arb_stall[__i]),
            .ic_wrp_ack(avmm_5_icm_in_wrp_ack[__i]),
            .ic_rrp_datavalid(avmm_5_icm_in_rrp_datavalid[__i]),
            .ic_rrp_data(avmm_5_icm_in_rrp_data[__i])
         );

      end

      // INST global_icavmm_5_rw of cnn_top_internal_ic_2659577484086026238
      cnn_top_internal_ic_2659577484086026238 global_icavmm_5_rw
      (
         .clock(clock),
         .resetn(resetn),
         // ICM m
         .m_arb_request(icm_routedavmm_5_rw_arb_request),
         .m_arb_enable(icm_routedavmm_5_rw_arb_enable),
         .m_arb_read(icm_routedavmm_5_rw_arb_read),
         .m_arb_write(icm_routedavmm_5_rw_arb_write),
         .m_arb_burstcount(icm_routedavmm_5_rw_arb_burstcount),
         .m_arb_address(icm_routedavmm_5_rw_arb_address),
         .m_arb_writedata(icm_routedavmm_5_rw_arb_writedata),
         .m_arb_byteenable(icm_routedavmm_5_rw_arb_byteenable),
         .m_arb_stall(icm_routedavmm_5_rw_arb_stall),
         .m_wrp_ack(icm_routedavmm_5_rw_wrp_ack),
         .m_rrp_datavalid(icm_routedavmm_5_rw_rrp_datavalid),
         .m_rrp_data(icm_routedavmm_5_rw_rrp_data),
         // ICM mout
         .mout_arb_request(icm_out_0_rw_arb_request[0]),
         .mout_arb_enable(icm_out_0_rw_arb_enable[0]),
         .mout_arb_read(icm_out_0_rw_arb_read[0]),
         .mout_arb_write(icm_out_0_rw_arb_write[0]),
         .mout_arb_burstcount(icm_out_0_rw_arb_burstcount[0]),
         .mout_arb_address(icm_out_0_rw_arb_address[0]),
         .mout_arb_writedata(icm_out_0_rw_arb_writedata[0]),
         .mout_arb_byteenable(icm_out_0_rw_arb_byteenable[0]),
         .mout_arb_id(icm_out_0_rw_arb_id[0]),
         .mout_arb_stall(icm_out_0_rw_arb_stall[0]),
         .mout_wrp_ack(icm_out_0_rw_wrp_ack[0]),
         .mout_rrp_datavalid(icm_out_0_rw_rrp_datavalid[0]),
         .mout_rrp_data(icm_out_0_rw_rrp_data[0])
      );

      for( __i = 0; __i < 3; __i = __i + 1 )
      begin:mavmm_5_rw
         assign icm_routedavmm_5_rw_arb_request[__i] = avmm_5_icm_in_arb_request[__i];
         assign icm_routedavmm_5_rw_arb_enable[__i] = avmm_5_icm_in_arb_enable[__i];
         assign icm_routedavmm_5_rw_arb_read[__i] = avmm_5_icm_in_arb_read[__i];
         assign icm_routedavmm_5_rw_arb_write[__i] = avmm_5_icm_in_arb_write[__i];
         assign icm_routedavmm_5_rw_arb_burstcount[__i] = avmm_5_icm_in_arb_burstcount[__i];
         assign icm_routedavmm_5_rw_arb_address[__i] = avmm_5_icm_in_arb_address[__i];
         assign icm_routedavmm_5_rw_arb_writedata[__i] = avmm_5_icm_in_arb_writedata[__i];
         assign icm_routedavmm_5_rw_arb_byteenable[__i] = avmm_5_icm_in_arb_byteenable[__i];
         assign avmm_5_icm_in_arb_stall[__i] = icm_routedavmm_5_rw_arb_stall[__i];
         assign avmm_5_icm_in_wrp_ack[__i] = icm_routedavmm_5_rw_wrp_ack[__i];
         assign avmm_5_icm_in_rrp_datavalid[__i] = icm_routedavmm_5_rw_rrp_datavalid[__i];
         assign avmm_5_icm_in_rrp_data[__i] = icm_routedavmm_5_rw_rrp_data[__i];
      end

      // INST global_out_ic_to_avmavmm_5_rw of acl_ic_to_avm
      acl_ic_to_avm
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(32),
         .BYTEENA_W(4),
         .LATENCY(0),
         .USE_WRITE_ACK(0),
         .NO_IDLE_STALL(0),
         .ENABLE_WAITREQUEST_ALLOWANCE(0),
         .ID_W(2),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      global_out_ic_to_avmavmm_5_rw
      (
         // ICM ic
         .ic_arb_request(icm_out_0_rw_arb_request[0]),
         .ic_arb_enable(icm_out_0_rw_arb_enable[0]),
         .ic_arb_read(icm_out_0_rw_arb_read[0]),
         .ic_arb_write(icm_out_0_rw_arb_write[0]),
         .ic_arb_burstcount(icm_out_0_rw_arb_burstcount[0]),
         .ic_arb_address(icm_out_0_rw_arb_address[0]),
         .ic_arb_writedata(icm_out_0_rw_arb_writedata[0]),
         .ic_arb_byteenable(icm_out_0_rw_arb_byteenable[0]),
         .ic_arb_id(icm_out_0_rw_arb_id[0]),
         .ic_arb_stall(icm_out_0_rw_arb_stall[0]),
         .ic_wrp_ack(icm_out_0_rw_wrp_ack[0]),
         .ic_rrp_datavalid(icm_out_0_rw_rrp_datavalid[0]),
         .ic_rrp_data(icm_out_0_rw_rrp_data[0]),
         // AVM avm
         .avm_enable(avmm_5_rw_enable),
         .avm_read(avmm_5_rw_read),
         .avm_write(avmm_5_rw_write),
         .avm_address(avmm_5_rw_address),
         .avm_writedata(avmm_5_rw_writedata),
         .avm_byteenable(avmm_5_rw_byteenable),
         .avm_waitrequest(avmm_5_rw_waitrequest),
         .avm_readdata(avmm_5_rw_readdata),
         .avm_readdatavalid(avmm_5_rw_readdatavalid),
         .avm_burstcount(avmm_5_rw_burstcount),
         .avm_writeack(avmm_5_rw_writeack),
         .clock(clock),
         .resetn(resetn)
      );

   end
   endgenerate

   generate
   begin:local_mem_system_aspace64
      logic local_icm_arb_request [1][4];
      logic local_icm_arb_enable [1][4];
      logic local_icm_arb_read [1][4];
      logic local_icm_arb_write [1][4];
      logic local_icm_arb_burstcount [1][4];
      logic [9:0] local_icm_arb_address [1][4];
      logic [511:0] local_icm_arb_writedata [1][4];
      logic [63:0] local_icm_arb_byteenable [1][4];
      logic local_icm_arb_stall [1][4];
      logic local_icm_wrp_ack [1][4];
      logic local_icm_rrp_datavalid [1][4];
      logic [511:0] local_icm_rrp_data [1][4];

      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:local_mem_group
         for( __j = 0; __j < 4; __j = __j + 1 )
         begin:host
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(512),
               .WRITEDATA_W(512),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(64)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace64_enable[__i][__j]),
               .avm_read(local_avm_aspace64_read[__i][__j]),
               .avm_write(local_avm_aspace64_write[__i][__j]),
               .avm_address(local_avm_aspace64_address[__i][__j]),
               .avm_writedata(local_avm_aspace64_writedata[__i][__j]),
               .avm_byteenable(local_avm_aspace64_byteenable[__i][__j]),
               .avm_waitrequest(local_avm_aspace64_waitrequest[__i][__j]),
               .avm_readdata(local_avm_aspace64_readdata[__i][__j]),
               .avm_readdatavalid(local_avm_aspace64_readdatavalid[__i][__j]),
               .avm_burstcount(local_avm_aspace64_burstcount[__i][__j]),
               .avm_writeack(local_avm_aspace64_writeack[__i][__j]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__i][__j]),
               .ic_arb_enable(local_icm_arb_enable[__i][__j]),
               .ic_arb_read(local_icm_arb_read[__i][__j]),
               .ic_arb_write(local_icm_arb_write[__i][__j]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__i][__j]),
               .ic_arb_address(local_icm_arb_address[__i][__j]),
               .ic_arb_writedata(local_icm_arb_writedata[__i][__j]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__i][__j]),
               .ic_arb_stall(local_icm_arb_stall[__i][__j]),
               .ic_wrp_ack(local_icm_wrp_ack[__i][__j]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__i][__j]),
               .ic_rrp_data(local_icm_rrp_data[__i][__j])
            );

         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:bank
            logic port_enable [1:2];
            logic port_read [1:2];
            logic port_write [1:2];
            logic [9:0] port_address [1:2];
            logic [511:0] port_writedata [1:2];
            logic [63:0] port_byteenable [1:2];
            logic port_waitrequest [1:2];
            logic [511:0] port_readdata [1:2];
            logic port_readdatavalid [1:2];

            // INST mem0 of acl_mem1x
            acl_mem1x
            #(
               .INTENDED_DEVICE_FAMILY("Cyclone V"),
               .DEPTH_WORDS(1024),
               .WIDTH(512),
               .MEM_LATENCY(3),
               .ASYNC_RESET(1),
               .SYNCHRONIZE_RESET(0),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("DUAL_PORT"),
               .MINIMIZE_MEMORY_USAGE(0),
               .USE_BYTEENA(0),
               .RAM_BLOCK_TYPE("AUTO")
            )
            mem0
            (
               .clk(clock),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2])
            );

         end

         for( __j = 0; __j < 4; __j = __j + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic [9:0] b_arb_address [1];
            logic [511:0] b_arb_writedata [1];
            logic [63:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [511:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(512),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(10),
               .BYTEENA_W(64),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__i][__j]),
               .m_arb_enable(local_icm_arb_enable[__i][__j]),
               .m_arb_read(local_icm_arb_read[__i][__j]),
               .m_arb_write(local_icm_arb_write[__i][__j]),
               .m_arb_burstcount(local_icm_arb_burstcount[__i][__j]),
               .m_arb_address(local_icm_arb_address[__i][__j]),
               .m_arb_writedata(local_icm_arb_writedata[__i][__j]),
               .m_arb_byteenable(local_icm_arb_byteenable[__i][__j]),
               .m_arb_stall(local_icm_arb_stall[__i][__j]),
               .m_wrp_ack(local_icm_wrp_ack[__i][__j]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__i][__j]),
               .m_rrp_data(local_icm_rrp_data[__i][__j]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port1bank0
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [9:0] icm_in_arb_address [2];
            logic [511:0] icm_in_arb_writedata [2];
            logic [63:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [511:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [9:0] icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[2].b_arb_read[0];
            assign icm_in_arb_write[0] = router[2].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[2].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[0];
            assign router[2].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[3].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[3].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[3].b_arb_read[0];
            assign icm_in_arb_write[1] = router[3].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[3].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[3].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[3].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[3].b_arb_byteenable[0];
            assign router[3].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[3].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[3].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[3].b_rrp_data[0] = icm_in_rrp_data[1];
            // INST data_ic of cnn_top_internal_ic_12577149543054423096
            cnn_top_internal_ic_12577149543054423096 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port2bank0
            logic icm_in_arb_request [2];
            logic icm_in_arb_enable [2];
            logic icm_in_arb_read [2];
            logic icm_in_arb_write [2];
            logic icm_in_arb_burstcount [2];
            logic [9:0] icm_in_arb_address [2];
            logic [511:0] icm_in_arb_writedata [2];
            logic [63:0] icm_in_arb_byteenable [2];
            logic icm_in_arb_stall [2];
            logic icm_in_wrp_ack [2];
            logic icm_in_rrp_datavalid [2];
            logic [511:0] icm_in_rrp_data [2];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [9:0] icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            assign icm_in_arb_request[1] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[1] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[1] = router[1].b_arb_read[0];
            assign icm_in_arb_write[1] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[1] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[1] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[1] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[1] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[1];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[1];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[1];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[1];
            // INST data_ic of cnn_top_internal_ic_5224246389627000779
            cnn_top_internal_ic_5224246389627000779 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

   generate
   begin:local_mem_system_aspace65
      logic local_icm_arb_request [1][2];
      logic local_icm_arb_enable [1][2];
      logic local_icm_arb_read [1][2];
      logic local_icm_arb_write [1][2];
      logic local_icm_arb_burstcount [1][2];
      logic [4:0] local_icm_arb_address [1][2];
      logic [1023:0] local_icm_arb_writedata [1][2];
      logic [127:0] local_icm_arb_byteenable [1][2];
      logic local_icm_arb_stall [1][2];
      logic local_icm_wrp_ack [1][2];
      logic local_icm_rrp_datavalid [1][2];
      logic [1023:0] local_icm_rrp_data [1][2];

      for( __j = 0; __j < 1; __j = __j + 1 )
      begin:local_mem_group
         for( __k = 0; __k < 2; __k = __k + 1 )
         begin:host
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(1024),
               .WRITEDATA_W(1024),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(128)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace65_enable[__j][__k]),
               .avm_read(local_avm_aspace65_read[__j][__k]),
               .avm_write(local_avm_aspace65_write[__j][__k]),
               .avm_address(local_avm_aspace65_address[__j][__k]),
               .avm_writedata(local_avm_aspace65_writedata[__j][__k]),
               .avm_byteenable(local_avm_aspace65_byteenable[__j][__k]),
               .avm_waitrequest(local_avm_aspace65_waitrequest[__j][__k]),
               .avm_readdata(local_avm_aspace65_readdata[__j][__k]),
               .avm_readdatavalid(local_avm_aspace65_readdatavalid[__j][__k]),
               .avm_burstcount(local_avm_aspace65_burstcount[__j][__k]),
               .avm_writeack(local_avm_aspace65_writeack[__j][__k]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__j][__k]),
               .ic_arb_enable(local_icm_arb_enable[__j][__k]),
               .ic_arb_read(local_icm_arb_read[__j][__k]),
               .ic_arb_write(local_icm_arb_write[__j][__k]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__j][__k]),
               .ic_arb_address(local_icm_arb_address[__j][__k]),
               .ic_arb_writedata(local_icm_arb_writedata[__j][__k]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__j][__k]),
               .ic_arb_stall(local_icm_arb_stall[__j][__k]),
               .ic_wrp_ack(local_icm_wrp_ack[__j][__k]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__j][__k]),
               .ic_rrp_data(local_icm_rrp_data[__j][__k])
            );

         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:bank
            logic port_enable [1:2];
            logic port_read [1:2];
            logic port_write [1:2];
            logic [4:0] port_address [1:2];
            logic [1023:0] port_writedata [1:2];
            logic [127:0] port_byteenable [1:2];
            logic port_waitrequest [1:2];
            logic [1023:0] port_readdata [1:2];
            logic port_readdatavalid [1:2];

            // INST mem0 of acl_mem1x
            acl_mem1x
            #(
               .INTENDED_DEVICE_FAMILY("Cyclone V"),
               .DEPTH_WORDS(32),
               .WIDTH(1024),
               .MEM_LATENCY(3),
               .ASYNC_RESET(1),
               .SYNCHRONIZE_RESET(0),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("DUAL_PORT"),
               .MINIMIZE_MEMORY_USAGE(0),
               .USE_BYTEENA(1),
               .RAM_BLOCK_TYPE("MLAB")
            )
            mem0
            (
               .clk(clock),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2])
            );

         end

         for( __k = 0; __k < 2; __k = __k + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic [4:0] b_arb_address [1];
            logic [1023:0] b_arb_writedata [1];
            logic [127:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [1023:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(1024),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(5),
               .BYTEENA_W(128),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__j][__k]),
               .m_arb_enable(local_icm_arb_enable[__j][__k]),
               .m_arb_read(local_icm_arb_read[__j][__k]),
               .m_arb_write(local_icm_arb_write[__j][__k]),
               .m_arb_burstcount(local_icm_arb_burstcount[__j][__k]),
               .m_arb_address(local_icm_arb_address[__j][__k]),
               .m_arb_writedata(local_icm_arb_writedata[__j][__k]),
               .m_arb_byteenable(local_icm_arb_byteenable[__j][__k]),
               .m_arb_stall(local_icm_arb_stall[__j][__k]),
               .m_wrp_ack(local_icm_wrp_ack[__j][__k]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__j][__k]),
               .m_rrp_data(local_icm_rrp_data[__j][__k]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port1bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [4:0] icm_in_arb_address [1];
            logic [1023:0] icm_in_arb_writedata [1];
            logic [127:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [1023:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [1023:0] icm_out_arb_writedata;
            logic [127:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [1023:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of cnn_top_internal_ic_11145602032770644063
            cnn_top_internal_ic_11145602032770644063 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port2bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [4:0] icm_in_arb_address [1];
            logic [1023:0] icm_in_arb_writedata [1];
            logic [127:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [1023:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [1023:0] icm_out_arb_writedata;
            logic [127:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [1023:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of cnn_top_internal_ic_16133328259121573654
            cnn_top_internal_ic_16133328259121573654 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

   generate
   begin:local_mem_system_aspace66
      logic local_icm_arb_request [1][2];
      logic local_icm_arb_enable [1][2];
      logic local_icm_arb_read [1][2];
      logic local_icm_arb_write [1][2];
      logic local_icm_arb_burstcount [1][2];
      logic [4:0] local_icm_arb_address [1][2];
      logic [1023:0] local_icm_arb_writedata [1][2];
      logic [127:0] local_icm_arb_byteenable [1][2];
      logic local_icm_arb_stall [1][2];
      logic local_icm_wrp_ack [1][2];
      logic local_icm_rrp_datavalid [1][2];
      logic [1023:0] local_icm_rrp_data [1][2];

      for( __k = 0; __k < 1; __k = __k + 1 )
      begin:local_mem_group
         for( __l = 0; __l < 2; __l = __l + 1 )
         begin:host
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(1024),
               .WRITEDATA_W(1024),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(128)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace66_enable[__k][__l]),
               .avm_read(local_avm_aspace66_read[__k][__l]),
               .avm_write(local_avm_aspace66_write[__k][__l]),
               .avm_address(local_avm_aspace66_address[__k][__l]),
               .avm_writedata(local_avm_aspace66_writedata[__k][__l]),
               .avm_byteenable(local_avm_aspace66_byteenable[__k][__l]),
               .avm_waitrequest(local_avm_aspace66_waitrequest[__k][__l]),
               .avm_readdata(local_avm_aspace66_readdata[__k][__l]),
               .avm_readdatavalid(local_avm_aspace66_readdatavalid[__k][__l]),
               .avm_burstcount(local_avm_aspace66_burstcount[__k][__l]),
               .avm_writeack(local_avm_aspace66_writeack[__k][__l]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__k][__l]),
               .ic_arb_enable(local_icm_arb_enable[__k][__l]),
               .ic_arb_read(local_icm_arb_read[__k][__l]),
               .ic_arb_write(local_icm_arb_write[__k][__l]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__k][__l]),
               .ic_arb_address(local_icm_arb_address[__k][__l]),
               .ic_arb_writedata(local_icm_arb_writedata[__k][__l]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__k][__l]),
               .ic_arb_stall(local_icm_arb_stall[__k][__l]),
               .ic_wrp_ack(local_icm_wrp_ack[__k][__l]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__k][__l]),
               .ic_rrp_data(local_icm_rrp_data[__k][__l])
            );

         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:bank
            logic port_enable [1:2];
            logic port_read [1:2];
            logic port_write [1:2];
            logic [4:0] port_address [1:2];
            logic [1023:0] port_writedata [1:2];
            logic [127:0] port_byteenable [1:2];
            logic port_waitrequest [1:2];
            logic [1023:0] port_readdata [1:2];
            logic port_readdatavalid [1:2];

            // INST mem0 of acl_mem1x
            acl_mem1x
            #(
               .INTENDED_DEVICE_FAMILY("Cyclone V"),
               .DEPTH_WORDS(32),
               .WIDTH(1024),
               .MEM_LATENCY(3),
               .ASYNC_RESET(1),
               .SYNCHRONIZE_RESET(0),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("DUAL_PORT"),
               .MINIMIZE_MEMORY_USAGE(0),
               .USE_BYTEENA(1),
               .RAM_BLOCK_TYPE("MLAB")
            )
            mem0
            (
               .clk(clock),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2])
            );

         end

         for( __l = 0; __l < 2; __l = __l + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic [4:0] b_arb_address [1];
            logic [1023:0] b_arb_writedata [1];
            logic [127:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [1023:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(1024),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(5),
               .BYTEENA_W(128),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__k][__l]),
               .m_arb_enable(local_icm_arb_enable[__k][__l]),
               .m_arb_read(local_icm_arb_read[__k][__l]),
               .m_arb_write(local_icm_arb_write[__k][__l]),
               .m_arb_burstcount(local_icm_arb_burstcount[__k][__l]),
               .m_arb_address(local_icm_arb_address[__k][__l]),
               .m_arb_writedata(local_icm_arb_writedata[__k][__l]),
               .m_arb_byteenable(local_icm_arb_byteenable[__k][__l]),
               .m_arb_stall(local_icm_arb_stall[__k][__l]),
               .m_wrp_ack(local_icm_wrp_ack[__k][__l]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__k][__l]),
               .m_rrp_data(local_icm_rrp_data[__k][__l]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port1bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [4:0] icm_in_arb_address [1];
            logic [1023:0] icm_in_arb_writedata [1];
            logic [127:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [1023:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [1023:0] icm_out_arb_writedata;
            logic [127:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [1023:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of cnn_top_internal_ic_11145602032770644063
            cnn_top_internal_ic_11145602032770644063 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __l = 0; __l < 1; __l = __l + 1 )
         begin:port2bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [4:0] icm_in_arb_address [1];
            logic [1023:0] icm_in_arb_writedata [1];
            logic [127:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [1023:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [4:0] icm_out_arb_address;
            logic [1023:0] icm_out_arb_writedata;
            logic [127:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [1023:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of cnn_top_internal_ic_16133328259121573654
            cnn_top_internal_ic_16133328259121573654 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

   generate
   begin:local_mem_system_aspace67
      logic local_icm_arb_request [1][2];
      logic local_icm_arb_enable [1][2];
      logic local_icm_arb_read [1][2];
      logic local_icm_arb_write [1][2];
      logic local_icm_arb_burstcount [1][2];
      logic [11:0] local_icm_arb_address [1][2];
      logic [127:0] local_icm_arb_writedata [1][2];
      logic [15:0] local_icm_arb_byteenable [1][2];
      logic local_icm_arb_stall [1][2];
      logic local_icm_wrp_ack [1][2];
      logic local_icm_rrp_datavalid [1][2];
      logic [127:0] local_icm_rrp_data [1][2];

      for( __l = 0; __l < 1; __l = __l + 1 )
      begin:local_mem_group
         for( __m = 0; __m < 2; __m = __m + 1 )
         begin:host
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(128),
               .WRITEDATA_W(128),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(16)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace67_enable[__l][__m]),
               .avm_read(local_avm_aspace67_read[__l][__m]),
               .avm_write(local_avm_aspace67_write[__l][__m]),
               .avm_address(local_avm_aspace67_address[__l][__m]),
               .avm_writedata(local_avm_aspace67_writedata[__l][__m]),
               .avm_byteenable(local_avm_aspace67_byteenable[__l][__m]),
               .avm_waitrequest(local_avm_aspace67_waitrequest[__l][__m]),
               .avm_readdata(local_avm_aspace67_readdata[__l][__m]),
               .avm_readdatavalid(local_avm_aspace67_readdatavalid[__l][__m]),
               .avm_burstcount(local_avm_aspace67_burstcount[__l][__m]),
               .avm_writeack(local_avm_aspace67_writeack[__l][__m]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__l][__m]),
               .ic_arb_enable(local_icm_arb_enable[__l][__m]),
               .ic_arb_read(local_icm_arb_read[__l][__m]),
               .ic_arb_write(local_icm_arb_write[__l][__m]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__l][__m]),
               .ic_arb_address(local_icm_arb_address[__l][__m]),
               .ic_arb_writedata(local_icm_arb_writedata[__l][__m]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__l][__m]),
               .ic_arb_stall(local_icm_arb_stall[__l][__m]),
               .ic_wrp_ack(local_icm_wrp_ack[__l][__m]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__l][__m]),
               .ic_rrp_data(local_icm_rrp_data[__l][__m])
            );

         end

         for( __m = 0; __m < 1; __m = __m + 1 )
         begin:bank
            logic port_enable [1:2];
            logic port_read [1:2];
            logic port_write [1:2];
            logic [11:0] port_address [1:2];
            logic [127:0] port_writedata [1:2];
            logic [15:0] port_byteenable [1:2];
            logic port_waitrequest [1:2];
            logic [127:0] port_readdata [1:2];
            logic port_readdatavalid [1:2];

            // INST mem0 of acl_mem1x
            acl_mem1x
            #(
               .INTENDED_DEVICE_FAMILY("Cyclone V"),
               .DEPTH_WORDS(4096),
               .WIDTH(128),
               .MEM_LATENCY(3),
               .ASYNC_RESET(1),
               .SYNCHRONIZE_RESET(0),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("DUAL_PORT"),
               .MINIMIZE_MEMORY_USAGE(0),
               .USE_BYTEENA(0),
               .RAM_BLOCK_TYPE("AUTO")
            )
            mem0
            (
               .clk(clock),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2])
            );

         end

         for( __m = 0; __m < 2; __m = __m + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic [11:0] b_arb_address [1];
            logic [127:0] b_arb_writedata [1];
            logic [15:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [127:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(128),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(12),
               .BYTEENA_W(16),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__l][__m]),
               .m_arb_enable(local_icm_arb_enable[__l][__m]),
               .m_arb_read(local_icm_arb_read[__l][__m]),
               .m_arb_write(local_icm_arb_write[__l][__m]),
               .m_arb_burstcount(local_icm_arb_burstcount[__l][__m]),
               .m_arb_address(local_icm_arb_address[__l][__m]),
               .m_arb_writedata(local_icm_arb_writedata[__l][__m]),
               .m_arb_byteenable(local_icm_arb_byteenable[__l][__m]),
               .m_arb_stall(local_icm_arb_stall[__l][__m]),
               .m_wrp_ack(local_icm_wrp_ack[__l][__m]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__l][__m]),
               .m_rrp_data(local_icm_rrp_data[__l][__m]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __m = 0; __m < 1; __m = __m + 1 )
         begin:port1bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [11:0] icm_in_arb_address [1];
            logic [127:0] icm_in_arb_writedata [1];
            logic [15:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [127:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [11:0] icm_out_arb_address;
            logic [127:0] icm_out_arb_writedata;
            logic [15:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [127:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of cnn_top_internal_ic_7511326513679017310
            cnn_top_internal_ic_7511326513679017310 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __m = 0; __m < 1; __m = __m + 1 )
         begin:port2bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [11:0] icm_in_arb_address [1];
            logic [127:0] icm_in_arb_writedata [1];
            logic [15:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [127:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [11:0] icm_out_arb_address;
            logic [127:0] icm_out_arb_writedata;
            logic [15:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [127:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of cnn_top_internal_ic_10043314905861761532
            cnn_top_internal_ic_10043314905861761532 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

   generate
   begin:local_mem_system_aspace68
      logic local_icm_arb_request [1][2];
      logic local_icm_arb_enable [1][2];
      logic local_icm_arb_read [1][2];
      logic local_icm_arb_write [1][2];
      logic local_icm_arb_burstcount [1][2];
      logic [11:0] local_icm_arb_address [1][2];
      logic [127:0] local_icm_arb_writedata [1][2];
      logic [15:0] local_icm_arb_byteenable [1][2];
      logic local_icm_arb_stall [1][2];
      logic local_icm_wrp_ack [1][2];
      logic local_icm_rrp_datavalid [1][2];
      logic [127:0] local_icm_rrp_data [1][2];

      for( __m = 0; __m < 1; __m = __m + 1 )
      begin:local_mem_group
         for( __n = 0; __n < 2; __n = __n + 1 )
         begin:host
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(128),
               .WRITEDATA_W(128),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(16)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace68_enable[__m][__n]),
               .avm_read(local_avm_aspace68_read[__m][__n]),
               .avm_write(local_avm_aspace68_write[__m][__n]),
               .avm_address(local_avm_aspace68_address[__m][__n]),
               .avm_writedata(local_avm_aspace68_writedata[__m][__n]),
               .avm_byteenable(local_avm_aspace68_byteenable[__m][__n]),
               .avm_waitrequest(local_avm_aspace68_waitrequest[__m][__n]),
               .avm_readdata(local_avm_aspace68_readdata[__m][__n]),
               .avm_readdatavalid(local_avm_aspace68_readdatavalid[__m][__n]),
               .avm_burstcount(local_avm_aspace68_burstcount[__m][__n]),
               .avm_writeack(local_avm_aspace68_writeack[__m][__n]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__m][__n]),
               .ic_arb_enable(local_icm_arb_enable[__m][__n]),
               .ic_arb_read(local_icm_arb_read[__m][__n]),
               .ic_arb_write(local_icm_arb_write[__m][__n]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__m][__n]),
               .ic_arb_address(local_icm_arb_address[__m][__n]),
               .ic_arb_writedata(local_icm_arb_writedata[__m][__n]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__m][__n]),
               .ic_arb_stall(local_icm_arb_stall[__m][__n]),
               .ic_wrp_ack(local_icm_wrp_ack[__m][__n]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__m][__n]),
               .ic_rrp_data(local_icm_rrp_data[__m][__n])
            );

         end

         for( __n = 0; __n < 1; __n = __n + 1 )
         begin:bank
            logic port_enable [1:2];
            logic port_read [1:2];
            logic port_write [1:2];
            logic [11:0] port_address [1:2];
            logic [127:0] port_writedata [1:2];
            logic [15:0] port_byteenable [1:2];
            logic port_waitrequest [1:2];
            logic [127:0] port_readdata [1:2];
            logic port_readdatavalid [1:2];

            // INST mem0 of acl_mem1x
            acl_mem1x
            #(
               .INTENDED_DEVICE_FAMILY("Cyclone V"),
               .DEPTH_WORDS(4096),
               .WIDTH(128),
               .MEM_LATENCY(3),
               .ASYNC_RESET(1),
               .SYNCHRONIZE_RESET(0),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("DUAL_PORT"),
               .MINIMIZE_MEMORY_USAGE(0),
               .USE_BYTEENA(0),
               .RAM_BLOCK_TYPE("AUTO")
            )
            mem0
            (
               .clk(clock),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2])
            );

         end

         for( __n = 0; __n < 2; __n = __n + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic [11:0] b_arb_address [1];
            logic [127:0] b_arb_writedata [1];
            logic [15:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [127:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(128),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(12),
               .BYTEENA_W(16),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__m][__n]),
               .m_arb_enable(local_icm_arb_enable[__m][__n]),
               .m_arb_read(local_icm_arb_read[__m][__n]),
               .m_arb_write(local_icm_arb_write[__m][__n]),
               .m_arb_burstcount(local_icm_arb_burstcount[__m][__n]),
               .m_arb_address(local_icm_arb_address[__m][__n]),
               .m_arb_writedata(local_icm_arb_writedata[__m][__n]),
               .m_arb_byteenable(local_icm_arb_byteenable[__m][__n]),
               .m_arb_stall(local_icm_arb_stall[__m][__n]),
               .m_wrp_ack(local_icm_wrp_ack[__m][__n]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__m][__n]),
               .m_rrp_data(local_icm_rrp_data[__m][__n]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __n = 0; __n < 1; __n = __n + 1 )
         begin:port1bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [11:0] icm_in_arb_address [1];
            logic [127:0] icm_in_arb_writedata [1];
            logic [15:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [127:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [11:0] icm_out_arb_address;
            logic [127:0] icm_out_arb_writedata;
            logic [15:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [127:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of cnn_top_internal_ic_7511326513679017310
            cnn_top_internal_ic_7511326513679017310 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __n = 0; __n < 1; __n = __n + 1 )
         begin:port2bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [11:0] icm_in_arb_address [1];
            logic [127:0] icm_in_arb_writedata [1];
            logic [15:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [127:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [11:0] icm_out_arb_address;
            logic [127:0] icm_out_arb_writedata;
            logic [15:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [127:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of cnn_top_internal_ic_10043314905861761532
            cnn_top_internal_ic_10043314905861761532 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

endmodule

/////////////////////////////////////////////////////////////////
// MODULE cnn_top_internal_ic_6374112871989877191
/////////////////////////////////////////////////////////////////
module cnn_top_internal_ic_6374112871989877191
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [2],
   input logic m_arb_enable [2],
   input logic m_arb_read [2],
   input logic m_arb_write [2],
   input logic m_arb_burstcount [2],
   input logic [27:0] m_arb_address [2],
   input logic [127:0] m_arb_writedata [2],
   input logic [15:0] m_arb_byteenable [2],
   output logic m_arb_stall [2],
   output logic m_wrp_ack [2],
   output logic m_rrp_datavalid [2],
   output logic [127:0] m_rrp_data [2],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [27:0] mout_arb_address,
   output logic [127:0] mout_arb_writedata,
   output logic [15:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [127:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_host_intf
         #(
            .DATA_W(128),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(28),
            .BYTEENA_W(16),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(128),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(28),
            .BYTEENA_W(16),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(128),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_host_endpoint
         acl_ic_host_endpoint
         #(
            .DATA_W(128),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(28),
            .BYTEENA_W(16),
            .ID_W(1),
            .NUM_READ_HOSTS(2),
            .NUM_WRITE_HOSTS(2),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(128),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(28),
         .BYTEENA_W(16),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(128),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(28),
         .BYTEENA_W(16),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(128),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_agent_endpoint
      acl_ic_agent_endpoint
      #(
         .DATA_W(128),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(28),
         .BYTEENA_W(16),
         .ID_W(1),
         .NUM_READ_HOSTS(2),
         .NUM_WRITE_HOSTS(2),
         .PIPELINE_RETURN_PATHS(1),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(64),
         .RRP_USE_LL_FIFO(1),
         .AGENT_FIXED_LATENCY(0),
         .SEPARATE_READ_WRITE_STALLS(0),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
      assign m[1].wrp_intf.ack = s.wrp_intf.ack;
      assign m[1].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
      assign m[1].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[1].rrp_intf.data = s.rrp_intf.data;
      assign m[1].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(128),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(28),
            .BYTEENA_W(16),
            .ID_W(1)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(128),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(28),
            .BYTEENA_W(16),
            .ID_W(1)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(128),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(28),
            .BYTEENA_W(16),
            .ID_W(1)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(128),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(28),
            .BYTEENA_W(16),
            .ID_W(1),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(1),
            .NO_STALL_NETWORK(0),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   generate
      for( __i = 0; __i < 3; __i = __i + 1 )
      begin:dp
         acl_arb_intf
         #(
            .DATA_W(128),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(28),
            .BYTEENA_W(16),
            .ID_W(1)
         ) in_intf();
         acl_arb_intf
         #(
            .DATA_W(128),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(28),
            .BYTEENA_W(16),
            .ID_W(1)
         ) out_intf();

         // INST dp of acl_arb_pipeline_reg
         acl_arb_pipeline_reg
         #(
            .DATA_W(128),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(28),
            .BYTEENA_W(16),
            .ID_W(1),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         dp
         (
            .clock(clock),
            .resetn(resetn),
            .in_intf(in_intf),
            .out_intf(out_intf)
         );

      end

   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:sp
         acl_arb_intf
         #(
            .DATA_W(128),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(28),
            .BYTEENA_W(16),
            .ID_W(1)
         ) in_intf();
         acl_arb_intf
         #(
            .DATA_W(128),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(28),
            .BYTEENA_W(16),
            .ID_W(1)
         ) out_intf();

         // INST sp of acl_arb_staging_reg
         acl_arb_staging_reg
         #(
            .DATA_W(128),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(28),
            .BYTEENA_W(16),
            .ID_W(1),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         sp
         (
            .clock(clock),
            .resetn(resetn),
            .in_intf(in_intf),
            .out_intf(out_intf)
         );

      end

   endgenerate

   assign mout_arb_request = dp[0].out_intf.req.request;
   assign mout_arb_enable = dp[0].out_intf.req.enable;
   assign mout_arb_read = dp[0].out_intf.req.read;
   assign mout_arb_write = dp[0].out_intf.req.write;
   assign mout_arb_burstcount = dp[0].out_intf.req.burstcount;
   assign mout_arb_address = dp[0].out_intf.req.address;
   assign mout_arb_writedata = dp[0].out_intf.req.writedata;
   assign mout_arb_byteenable = dp[0].out_intf.req.byteenable;
   assign mout_arb_id = dp[0].out_intf.req.id;
   assign dp[0].out_intf.stall = mout_arb_stall;
   assign dp[0].in_intf.req = sp[0].out_intf.req;
   assign sp[0].out_intf.stall = dp[0].in_intf.stall;
   assign sp[0].in_intf.req = s.out_arb_intf.req;
   assign s.out_arb_intf.stall = sp[0].in_intf.stall;
   assign s.in_arb_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = s.in_arb_intf.stall;
   assign a[0].m0_intf.req = dp[1].out_intf.req;
   assign dp[1].out_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = dp[2].out_intf.req;
   assign dp[2].out_intf.stall = a[0].m1_intf.stall;
   assign dp[1].in_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = dp[1].in_intf.stall;
   assign dp[2].in_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = dp[2].in_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE cnn_top_internal_ic_2694229448187658071
/////////////////////////////////////////////////////////////////
module cnn_top_internal_ic_2694229448187658071
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [29:0] m_arb_address [1],
   input logic [31:0] m_arb_writedata [1],
   input logic [3:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [31:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [29:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_host_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(30),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(30),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_host_endpoint
         acl_ic_host_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(30),
            .BYTEENA_W(4),
            .ID_W(1),
            .NUM_READ_HOSTS(1),
            .NUM_WRITE_HOSTS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(30),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(30),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_agent_endpoint
      acl_ic_agent_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(30),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_READ_HOSTS(1),
         .NUM_WRITE_HOSTS(1),
         .PIPELINE_RETURN_PATHS(1),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(64),
         .RRP_USE_LL_FIFO(1),
         .AGENT_FIXED_LATENCY(0),
         .SEPARATE_READ_WRITE_STALLS(0),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:dp
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(30),
            .BYTEENA_W(4),
            .ID_W(1)
         ) in_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(30),
            .BYTEENA_W(4),
            .ID_W(1)
         ) out_intf();

         // INST dp of acl_arb_pipeline_reg
         acl_arb_pipeline_reg
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(30),
            .BYTEENA_W(4),
            .ID_W(1),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         dp
         (
            .clock(clock),
            .resetn(resetn),
            .in_intf(in_intf),
            .out_intf(out_intf)
         );

      end

   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:sp
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(30),
            .BYTEENA_W(4),
            .ID_W(1)
         ) in_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(30),
            .BYTEENA_W(4),
            .ID_W(1)
         ) out_intf();

         // INST sp of acl_arb_staging_reg
         acl_arb_staging_reg
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(30),
            .BYTEENA_W(4),
            .ID_W(1),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         sp
         (
            .clock(clock),
            .resetn(resetn),
            .in_intf(in_intf),
            .out_intf(out_intf)
         );

      end

   endgenerate

   assign mout_arb_request = dp[0].out_intf.req.request;
   assign mout_arb_enable = dp[0].out_intf.req.enable;
   assign mout_arb_read = dp[0].out_intf.req.read;
   assign mout_arb_write = dp[0].out_intf.req.write;
   assign mout_arb_burstcount = dp[0].out_intf.req.burstcount;
   assign mout_arb_address = dp[0].out_intf.req.address;
   assign mout_arb_writedata = dp[0].out_intf.req.writedata;
   assign mout_arb_byteenable = dp[0].out_intf.req.byteenable;
   assign mout_arb_id = dp[0].out_intf.req.id;
   assign dp[0].out_intf.stall = mout_arb_stall;
   assign dp[0].in_intf.req = sp[0].out_intf.req;
   assign sp[0].out_intf.stall = dp[0].in_intf.stall;
   assign sp[0].in_intf.req = s.out_arb_intf.req;
   assign s.out_arb_intf.stall = sp[0].in_intf.stall;
   assign s.in_arb_intf.req = dp[1].out_intf.req;
   assign dp[1].out_intf.stall = s.in_arb_intf.stall;
   assign dp[1].in_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = dp[1].in_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE cnn_top_internal_ic_2659577484086026238
/////////////////////////////////////////////////////////////////
module cnn_top_internal_ic_2659577484086026238
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [3],
   input logic m_arb_enable [3],
   input logic m_arb_read [3],
   input logic m_arb_write [3],
   input logic m_arb_burstcount [3],
   input logic [29:0] m_arb_address [3],
   input logic [31:0] m_arb_writedata [3],
   input logic [3:0] m_arb_byteenable [3],
   output logic m_arb_stall [3],
   output logic m_wrp_ack [3],
   output logic m_rrp_datavalid [3],
   output logic [31:0] m_rrp_data [3],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [29:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic [1:0] mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 3; __i = __i + 1 )
      begin:m
         logic [1:0] id;
         acl_ic_host_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(30),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(30),
            .BYTEENA_W(4),
            .ID_W(2)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(2)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(2)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_host_endpoint
         acl_ic_host_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(30),
            .BYTEENA_W(4),
            .ID_W(2),
            .NUM_READ_HOSTS(3),
            .NUM_WRITE_HOSTS(3),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(30),
         .BYTEENA_W(4),
         .ID_W(2)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(30),
         .BYTEENA_W(4),
         .ID_W(2)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(2)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(2)
      ) rrp_intf();

      // INST s_endp of acl_ic_agent_endpoint
      acl_ic_agent_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(30),
         .BYTEENA_W(4),
         .ID_W(2),
         .NUM_READ_HOSTS(3),
         .NUM_WRITE_HOSTS(3),
         .PIPELINE_RETURN_PATHS(1),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(64),
         .RRP_USE_LL_FIFO(1),
         .AGENT_FIXED_LATENCY(0),
         .SEPARATE_READ_WRITE_STALLS(0),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
      assign m[1].wrp_intf.ack = s.wrp_intf.ack;
      assign m[1].wrp_intf.id = s.wrp_intf.id;
      assign m[2].wrp_intf.ack = s.wrp_intf.ack;
      assign m[2].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
      assign m[1].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[1].rrp_intf.data = s.rrp_intf.data;
      assign m[1].rrp_intf.id = s.rrp_intf.id;
      assign m[2].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[2].rrp_intf.data = s.rrp_intf.data;
      assign m[2].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(30),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(30),
            .BYTEENA_W(4),
            .ID_W(2)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(30),
            .BYTEENA_W(4),
            .ID_W(2)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(30),
            .BYTEENA_W(4),
            .ID_W(2),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(1),
            .NO_STALL_NETWORK(0),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   generate
      for( __i = 0; __i < 4; __i = __i + 1 )
      begin:dp
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(30),
            .BYTEENA_W(4),
            .ID_W(2)
         ) in_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(30),
            .BYTEENA_W(4),
            .ID_W(2)
         ) out_intf();

         // INST dp of acl_arb_pipeline_reg
         acl_arb_pipeline_reg
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(30),
            .BYTEENA_W(4),
            .ID_W(2),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         dp
         (
            .clock(clock),
            .resetn(resetn),
            .in_intf(in_intf),
            .out_intf(out_intf)
         );

      end

   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:sp
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(30),
            .BYTEENA_W(4),
            .ID_W(2)
         ) in_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(30),
            .BYTEENA_W(4),
            .ID_W(2)
         ) out_intf();

         // INST sp of acl_arb_staging_reg
         acl_arb_staging_reg
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(30),
            .BYTEENA_W(4),
            .ID_W(2),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         sp
         (
            .clock(clock),
            .resetn(resetn),
            .in_intf(in_intf),
            .out_intf(out_intf)
         );

      end

   endgenerate

   assign mout_arb_request = dp[0].out_intf.req.request;
   assign mout_arb_enable = dp[0].out_intf.req.enable;
   assign mout_arb_read = dp[0].out_intf.req.read;
   assign mout_arb_write = dp[0].out_intf.req.write;
   assign mout_arb_burstcount = dp[0].out_intf.req.burstcount;
   assign mout_arb_address = dp[0].out_intf.req.address;
   assign mout_arb_writedata = dp[0].out_intf.req.writedata;
   assign mout_arb_byteenable = dp[0].out_intf.req.byteenable;
   assign mout_arb_id = dp[0].out_intf.req.id;
   assign dp[0].out_intf.stall = mout_arb_stall;
   assign dp[0].in_intf.req = sp[0].out_intf.req;
   assign sp[0].out_intf.stall = dp[0].in_intf.stall;
   assign sp[0].in_intf.req = s.out_arb_intf.req;
   assign s.out_arb_intf.stall = sp[0].in_intf.stall;
   assign s.in_arb_intf.req = a[1].mout_intf.req;
   assign a[1].mout_intf.stall = s.in_arb_intf.stall;
   assign a[1].m0_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = a[1].m0_intf.stall;
   assign a[1].m1_intf.req = dp[1].out_intf.req;
   assign dp[1].out_intf.stall = a[1].m1_intf.stall;
   assign a[0].m0_intf.req = dp[2].out_intf.req;
   assign dp[2].out_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = dp[3].out_intf.req;
   assign dp[3].out_intf.stall = a[0].m1_intf.stall;
   assign dp[1].in_intf.req = m[2].arb_intf.req;
   assign m[2].arb_intf.stall = dp[1].in_intf.stall;
   assign dp[2].in_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = dp[2].in_intf.stall;
   assign dp[3].in_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = dp[3].in_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE cnn_top_internal_ic_12577149543054423096
/////////////////////////////////////////////////////////////////
module cnn_top_internal_ic_12577149543054423096
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [2],
   input logic m_arb_enable [2],
   input logic m_arb_read [2],
   input logic m_arb_write [2],
   input logic m_arb_burstcount [2],
   input logic [9:0] m_arb_address [2],
   input logic [511:0] m_arb_writedata [2],
   input logic [63:0] m_arb_byteenable [2],
   output logic m_arb_stall [2],
   output logic m_wrp_ack [2],
   output logic m_rrp_datavalid [2],
   output logic [511:0] m_rrp_data [2],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [9:0] mout_arb_address,
   output logic [511:0] mout_arb_writedata,
   output logic [63:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [511:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_host_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(10),
            .BYTEENA_W(64),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(10),
            .BYTEENA_W(64),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(512),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_host_endpoint
         acl_ic_host_endpoint
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(10),
            .BYTEENA_W(64),
            .ID_W(1),
            .NUM_READ_HOSTS(0),
            .NUM_WRITE_HOSTS(2),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(10),
         .BYTEENA_W(64),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(10),
         .BYTEENA_W(64),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(512),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_agent_endpoint
      acl_ic_agent_endpoint
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(10),
         .BYTEENA_W(64),
         .ID_W(1),
         .NUM_READ_HOSTS(0),
         .NUM_WRITE_HOSTS(2),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .AGENT_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
      assign m[1].wrp_intf.ack = s.wrp_intf.ack;
      assign m[1].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
   end
   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(10),
            .BYTEENA_W(64),
            .ID_W(1)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(10),
            .BYTEENA_W(64),
            .ID_W(1)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(10),
            .BYTEENA_W(64),
            .ID_W(1)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(10),
            .BYTEENA_W(64),
            .ID_W(1),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(1),
            .NO_STALL_NETWORK(0),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = s.in_arb_intf.stall;
   assign a[0].m0_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE cnn_top_internal_ic_5224246389627000779
/////////////////////////////////////////////////////////////////
module cnn_top_internal_ic_5224246389627000779
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [2],
   input logic m_arb_enable [2],
   input logic m_arb_read [2],
   input logic m_arb_write [2],
   input logic m_arb_burstcount [2],
   input logic [9:0] m_arb_address [2],
   input logic [511:0] m_arb_writedata [2],
   input logic [63:0] m_arb_byteenable [2],
   output logic m_arb_stall [2],
   output logic m_wrp_ack [2],
   output logic m_rrp_datavalid [2],
   output logic [511:0] m_rrp_data [2],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [9:0] mout_arb_address,
   output logic [511:0] mout_arb_writedata,
   output logic [63:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [511:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_host_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(10),
            .BYTEENA_W(64),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(10),
            .BYTEENA_W(64),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(512),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_host_endpoint
         acl_ic_host_endpoint
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(10),
            .BYTEENA_W(64),
            .ID_W(1),
            .NUM_READ_HOSTS(2),
            .NUM_WRITE_HOSTS(0),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(10),
         .BYTEENA_W(64),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(10),
         .BYTEENA_W(64),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(512),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_agent_endpoint
      acl_ic_agent_endpoint
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(10),
         .BYTEENA_W(64),
         .ID_W(1),
         .NUM_READ_HOSTS(2),
         .NUM_WRITE_HOSTS(0),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .AGENT_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
      assign m[1].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[1].rrp_intf.data = s.rrp_intf.data;
      assign m[1].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(10),
            .BYTEENA_W(64),
            .ID_W(1)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(10),
            .BYTEENA_W(64),
            .ID_W(1)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(10),
            .BYTEENA_W(64),
            .ID_W(1)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(10),
            .BYTEENA_W(64),
            .ID_W(1),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(1),
            .NO_STALL_NETWORK(0),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = s.in_arb_intf.stall;
   assign a[0].m0_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = a[0].m1_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE cnn_top_internal_ic_11145602032770644063
/////////////////////////////////////////////////////////////////
module cnn_top_internal_ic_11145602032770644063
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [4:0] m_arb_address [1],
   input logic [1023:0] m_arb_writedata [1],
   input logic [127:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [1023:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [4:0] mout_arb_address,
   output logic [1023:0] mout_arb_writedata,
   output logic [127:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [1023:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_host_intf
         #(
            .DATA_W(1024),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(128),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(1024),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(128),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(1024),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_host_endpoint
         acl_ic_host_endpoint
         #(
            .DATA_W(1024),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(128),
            .ID_W(1),
            .NUM_READ_HOSTS(0),
            .NUM_WRITE_HOSTS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(1024),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(5),
         .BYTEENA_W(128),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(1024),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(5),
         .BYTEENA_W(128),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(1024),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_agent_endpoint
      acl_ic_agent_endpoint
      #(
         .DATA_W(1024),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(5),
         .BYTEENA_W(128),
         .ID_W(1),
         .NUM_READ_HOSTS(0),
         .NUM_WRITE_HOSTS(1),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .AGENT_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE cnn_top_internal_ic_16133328259121573654
/////////////////////////////////////////////////////////////////
module cnn_top_internal_ic_16133328259121573654
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [4:0] m_arb_address [1],
   input logic [1023:0] m_arb_writedata [1],
   input logic [127:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [1023:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [4:0] mout_arb_address,
   output logic [1023:0] mout_arb_writedata,
   output logic [127:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [1023:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_host_intf
         #(
            .DATA_W(1024),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(128),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(1024),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(128),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(1024),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_host_endpoint
         acl_ic_host_endpoint
         #(
            .DATA_W(1024),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(5),
            .BYTEENA_W(128),
            .ID_W(1),
            .NUM_READ_HOSTS(1),
            .NUM_WRITE_HOSTS(0),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(1024),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(5),
         .BYTEENA_W(128),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(1024),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(5),
         .BYTEENA_W(128),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(1024),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_agent_endpoint
      acl_ic_agent_endpoint
      #(
         .DATA_W(1024),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(5),
         .BYTEENA_W(128),
         .ID_W(1),
         .NUM_READ_HOSTS(1),
         .NUM_WRITE_HOSTS(0),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .AGENT_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE cnn_top_internal_ic_7511326513679017310
/////////////////////////////////////////////////////////////////
module cnn_top_internal_ic_7511326513679017310
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [11:0] m_arb_address [1],
   input logic [127:0] m_arb_writedata [1],
   input logic [15:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [127:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [11:0] mout_arb_address,
   output logic [127:0] mout_arb_writedata,
   output logic [15:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [127:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_host_intf
         #(
            .DATA_W(128),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(16),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(128),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(16),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(128),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_host_endpoint
         acl_ic_host_endpoint
         #(
            .DATA_W(128),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(16),
            .ID_W(1),
            .NUM_READ_HOSTS(0),
            .NUM_WRITE_HOSTS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(128),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(12),
         .BYTEENA_W(16),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(128),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(12),
         .BYTEENA_W(16),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(128),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_agent_endpoint
      acl_ic_agent_endpoint
      #(
         .DATA_W(128),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(12),
         .BYTEENA_W(16),
         .ID_W(1),
         .NUM_READ_HOSTS(0),
         .NUM_WRITE_HOSTS(1),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .AGENT_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE cnn_top_internal_ic_10043314905861761532
/////////////////////////////////////////////////////////////////
module cnn_top_internal_ic_10043314905861761532
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [11:0] m_arb_address [1],
   input logic [127:0] m_arb_writedata [1],
   input logic [15:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [127:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [11:0] mout_arb_address,
   output logic [127:0] mout_arb_writedata,
   output logic [15:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [127:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_host_intf
         #(
            .DATA_W(128),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(16),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(128),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(16),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(128),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_host_endpoint
         acl_ic_host_endpoint
         #(
            .DATA_W(128),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(12),
            .BYTEENA_W(16),
            .ID_W(1),
            .NUM_READ_HOSTS(1),
            .NUM_WRITE_HOSTS(0),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(128),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(12),
         .BYTEENA_W(16),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(128),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(12),
         .BYTEENA_W(16),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(128),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_agent_endpoint
      acl_ic_agent_endpoint
      #(
         .DATA_W(128),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(12),
         .BYTEENA_W(16),
         .ID_W(1),
         .NUM_READ_HOSTS(1),
         .NUM_WRITE_HOSTS(0),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .AGENT_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

