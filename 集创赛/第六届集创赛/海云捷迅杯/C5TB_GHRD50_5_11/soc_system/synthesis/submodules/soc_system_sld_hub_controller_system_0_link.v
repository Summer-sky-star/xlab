// soc_system_sld_hub_controller_system_0_link.v

// This file was auto-generated from altera_mm_debug_link_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module soc_system_sld_hub_controller_system_0_link (
		input  wire        clk_clk,           //         clk.clk
		input  wire        reset_reset,       //       reset.reset
		output wire        s0_waitrequest,    //          s0.waitrequest
		output wire [31:0] s0_readdata,       //            .readdata
		output wire        s0_readdatavalid,  //            .readdatavalid
		input  wire [0:0]  s0_burstcount,     //            .burstcount
		input  wire [31:0] s0_writedata,      //            .writedata
		input  wire [6:0]  s0_address,        //            .address
		input  wire        s0_write,          //            .write
		input  wire        s0_read,           //            .read
		input  wire [3:0]  s0_byteenable,     //            .byteenable
		input  wire        s0_debugaccess,    //            .debugaccess
		output wire [7:0]  h2t_data,          //         h2t.data
		output wire        h2t_valid,         //            .valid
		input  wire        h2t_ready,         //            .ready
		output wire        h2t_startofpacket, //            .startofpacket
		output wire        h2t_endofpacket,   //            .endofpacket
		output wire        h2t_channel,       //            .channel
		input  wire [7:0]  t2h_data,          //         t2h.data
		input  wire        t2h_valid,         //            .valid
		output wire        t2h_ready,         //            .ready
		input  wire        t2h_startofpacket, //            .startofpacket
		input  wire        t2h_endofpacket,   //            .endofpacket
		input  wire        t2h_channel,       //            .channel
		output wire        mgmt_valid,        //        mgmt.valid
		output wire        mgmt_data,         //            .data
		output wire [7:0]  mgmt_channel,      //            .channel
		output wire        debug_reset_reset  // debug_reset.reset
	);

	wire         write_slave_to_source_out_valid;                          // write_slave_to_source:avalonst_source_valid -> h2t_timing_adapter:in_valid
	wire  [31:0] write_slave_to_source_out_data;                           // write_slave_to_source:avalonst_source_data -> h2t_timing_adapter:in_data
	wire         write_slave_to_source_out_ready;                          // h2t_timing_adapter:in_ready -> write_slave_to_source:avalonst_source_ready
	wire         h2t_timing_adapter_out_valid;                             // h2t_timing_adapter:out_valid -> h2t_data_matcher:sink_valid
	wire  [31:0] h2t_timing_adapter_out_data;                              // h2t_timing_adapter:out_data -> h2t_data_matcher:sink_data
	wire         h2t_timing_adapter_out_ready;                             // h2t_data_matcher:sink_ready -> h2t_timing_adapter:out_ready
	wire         h2t_data_matcher_source_valid;                            // h2t_data_matcher:source_valid -> h2t_packet_source:in_valid
	wire   [7:0] h2t_data_matcher_source_data;                             // h2t_data_matcher:source_data -> h2t_packet_source:in_data
	wire         h2t_data_matcher_source_ready;                            // h2t_packet_source:in_ready -> h2t_data_matcher:source_ready
	wire         t2h_byte_source_out_bytes_stream_valid;                   // t2h_byte_source:out_valid -> t2h_data_matcher:sink_valid
	wire   [7:0] t2h_byte_source_out_bytes_stream_data;                    // t2h_byte_source:out_data -> t2h_data_matcher:sink_data
	wire         t2h_byte_source_out_bytes_stream_ready;                   // t2h_data_matcher:sink_ready -> t2h_byte_source:out_ready
	wire         t2h_channel_adapter_out_valid;                            // t2h_channel_adapter:out_valid -> t2h_byte_source:in_valid
	wire   [7:0] t2h_channel_adapter_out_data;                             // t2h_channel_adapter:out_data -> t2h_byte_source:in_data
	wire         t2h_channel_adapter_out_ready;                            // t2h_byte_source:in_ready -> t2h_channel_adapter:out_ready
	wire   [7:0] t2h_channel_adapter_out_channel;                          // t2h_channel_adapter:out_channel -> t2h_byte_source:in_channel
	wire         t2h_channel_adapter_out_startofpacket;                    // t2h_channel_adapter:out_startofpacket -> t2h_byte_source:in_startofpacket
	wire         t2h_channel_adapter_out_endofpacket;                      // t2h_channel_adapter:out_endofpacket -> t2h_byte_source:in_endofpacket
	wire         h2t_packet_source_out_packets_stream_valid;               // h2t_packet_source:out_valid -> h2t_channel_adapter:in_valid
	wire   [7:0] h2t_packet_source_out_packets_stream_data;                // h2t_packet_source:out_data -> h2t_channel_adapter:in_data
	wire         h2t_packet_source_out_packets_stream_ready;               // h2t_channel_adapter:in_ready -> h2t_packet_source:out_ready
	wire   [7:0] h2t_packet_source_out_packets_stream_channel;             // h2t_packet_source:out_channel -> h2t_channel_adapter:in_channel
	wire         h2t_packet_source_out_packets_stream_startofpacket;       // h2t_packet_source:out_startofpacket -> h2t_channel_adapter:in_startofpacket
	wire         h2t_packet_source_out_packets_stream_endofpacket;         // h2t_packet_source:out_endofpacket -> h2t_channel_adapter:in_endofpacket
	wire         t2h_timing_adapter_out_valid;                             // t2h_timing_adapter:out_valid -> sink_to_read_slave:avalonst_sink_valid
	wire  [31:0] t2h_timing_adapter_out_data;                              // t2h_timing_adapter:out_data -> sink_to_read_slave:avalonst_sink_data
	wire         t2h_timing_adapter_out_ready;                             // sink_to_read_slave:avalonst_sink_ready -> t2h_timing_adapter:out_ready
	wire         t2h_data_matcher_source_valid;                            // t2h_data_matcher:source_valid -> t2h_timing_adapter:in_valid
	wire  [31:0] t2h_data_matcher_source_data;                             // t2h_data_matcher:source_data -> t2h_timing_adapter:in_data
	wire         t2h_data_matcher_source_ready;                            // t2h_timing_adapter:in_ready -> t2h_data_matcher:source_ready
	wire         export_slave_m0_waitrequest;                              // mm_interconnect_0:export_slave_m0_waitrequest -> export_slave:m0_waitrequest
	wire  [31:0] export_slave_m0_readdata;                                 // mm_interconnect_0:export_slave_m0_readdata -> export_slave:m0_readdata
	wire         export_slave_m0_debugaccess;                              // export_slave:m0_debugaccess -> mm_interconnect_0:export_slave_m0_debugaccess
	wire   [6:0] export_slave_m0_address;                                  // export_slave:m0_address -> mm_interconnect_0:export_slave_m0_address
	wire         export_slave_m0_read;                                     // export_slave:m0_read -> mm_interconnect_0:export_slave_m0_read
	wire   [3:0] export_slave_m0_byteenable;                               // export_slave:m0_byteenable -> mm_interconnect_0:export_slave_m0_byteenable
	wire         export_slave_m0_readdatavalid;                            // mm_interconnect_0:export_slave_m0_readdatavalid -> export_slave:m0_readdatavalid
	wire  [31:0] export_slave_m0_writedata;                                // export_slave:m0_writedata -> mm_interconnect_0:export_slave_m0_writedata
	wire         export_slave_m0_write;                                    // export_slave:m0_write -> mm_interconnect_0:export_slave_m0_write
	wire   [0:0] export_slave_m0_burstcount;                               // export_slave:m0_burstcount -> mm_interconnect_0:export_slave_m0_burstcount
	wire         mm_interconnect_0_write_slave_addr_fixer_s0_read;         // mm_interconnect_0:write_slave_addr_fixer_s0_read -> mm_interconnect_1:write_slave_addr_fixer_m0_read
	wire         mm_interconnect_0_write_slave_addr_fixer_s0_write;        // mm_interconnect_0:write_slave_addr_fixer_s0_write -> mm_interconnect_1:write_slave_addr_fixer_m0_write
	wire  [31:0] mm_interconnect_0_write_slave_addr_fixer_s0_writedata;    // mm_interconnect_0:write_slave_addr_fixer_s0_writedata -> mm_interconnect_1:write_slave_addr_fixer_m0_writedata
	wire         mm_interconnect_0_read_slave_addr_fixer_s0_read;          // mm_interconnect_0:read_slave_addr_fixer_s0_read -> mm_interconnect_2:read_slave_addr_fixer_m0_read
	wire         mm_interconnect_0_read_slave_addr_fixer_s0_write;         // mm_interconnect_0:read_slave_addr_fixer_s0_write -> mm_interconnect_2:read_slave_addr_fixer_m0_write
	wire  [31:0] mm_interconnect_0_read_slave_addr_fixer_s0_writedata;     // mm_interconnect_0:read_slave_addr_fixer_s0_writedata -> mm_interconnect_2:read_slave_addr_fixer_m0_writedata
	wire  [31:0] mm_interconnect_0_write_slave_to_source_in_csr_readdata;  // write_slave_to_source:wrclk_control_slave_readdata -> mm_interconnect_0:write_slave_to_source_in_csr_readdata
	wire   [2:0] mm_interconnect_0_write_slave_to_source_in_csr_address;   // mm_interconnect_0:write_slave_to_source_in_csr_address -> write_slave_to_source:wrclk_control_slave_address
	wire         mm_interconnect_0_write_slave_to_source_in_csr_read;      // mm_interconnect_0:write_slave_to_source_in_csr_read -> write_slave_to_source:wrclk_control_slave_read
	wire         mm_interconnect_0_write_slave_to_source_in_csr_write;     // mm_interconnect_0:write_slave_to_source_in_csr_write -> write_slave_to_source:wrclk_control_slave_write
	wire  [31:0] mm_interconnect_0_write_slave_to_source_in_csr_writedata; // mm_interconnect_0:write_slave_to_source_in_csr_writedata -> write_slave_to_source:wrclk_control_slave_writedata
	wire  [31:0] mm_interconnect_0_sink_to_read_slave_in_csr_readdata;     // sink_to_read_slave:wrclk_control_slave_readdata -> mm_interconnect_0:sink_to_read_slave_in_csr_readdata
	wire   [2:0] mm_interconnect_0_sink_to_read_slave_in_csr_address;      // mm_interconnect_0:sink_to_read_slave_in_csr_address -> sink_to_read_slave:wrclk_control_slave_address
	wire         mm_interconnect_0_sink_to_read_slave_in_csr_read;         // mm_interconnect_0:sink_to_read_slave_in_csr_read -> sink_to_read_slave:wrclk_control_slave_read
	wire         mm_interconnect_0_sink_to_read_slave_in_csr_write;        // mm_interconnect_0:sink_to_read_slave_in_csr_write -> sink_to_read_slave:wrclk_control_slave_write
	wire  [31:0] mm_interconnect_0_sink_to_read_slave_in_csr_writedata;    // mm_interconnect_0:sink_to_read_slave_in_csr_writedata -> sink_to_read_slave:wrclk_control_slave_writedata
	wire  [31:0] mm_interconnect_0_connection_id_rom_s0_readdata;          // connection_id_rom:readdata -> mm_interconnect_0:connection_id_rom_s0_readdata
	wire   [1:0] mm_interconnect_0_connection_id_rom_s0_address;           // mm_interconnect_0:connection_id_rom_s0_address -> connection_id_rom:address
	wire         mm_interconnect_0_connection_id_rom_s0_read;              // mm_interconnect_0:connection_id_rom_s0_read -> connection_id_rom:read
	wire         mm_interconnect_0_connection_id_rom_s0_write;             // mm_interconnect_0:connection_id_rom_s0_write -> connection_id_rom:write
	wire  [31:0] mm_interconnect_0_connection_id_rom_s0_writedata;         // mm_interconnect_0:connection_id_rom_s0_writedata -> connection_id_rom:writedata
	wire  [31:0] mm_interconnect_0_mm_mgmt_csr_readdata;                   // mm_mgmt:csr_readdata -> mm_interconnect_0:mm_mgmt_csr_readdata
	wire   [1:0] mm_interconnect_0_mm_mgmt_csr_address;                    // mm_interconnect_0:mm_mgmt_csr_address -> mm_mgmt:csr_address
	wire         mm_interconnect_0_mm_mgmt_csr_read;                       // mm_interconnect_0:mm_mgmt_csr_read -> mm_mgmt:csr_read
	wire         mm_interconnect_0_mm_mgmt_csr_write;                      // mm_interconnect_0:mm_mgmt_csr_write -> mm_mgmt:csr_write
	wire  [31:0] mm_interconnect_0_mm_mgmt_csr_writedata;                  // mm_interconnect_0:mm_mgmt_csr_writedata -> mm_mgmt:csr_writedata
	wire         mm_interconnect_0_write_slave_addr_fixer_s0_waitrequest;  // mm_interconnect_1:write_slave_addr_fixer_m0_waitrequest -> mm_interconnect_0:write_slave_addr_fixer_s0_waitrequest
	wire  [31:0] mm_interconnect_0_write_slave_addr_fixer_s0_readdata;     // mm_interconnect_1:write_slave_addr_fixer_m0_readdata -> mm_interconnect_0:write_slave_addr_fixer_s0_readdata
	wire         mm_interconnect_1_write_slave_to_source_in_waitrequest;   // write_slave_to_source:avalonmm_write_slave_waitrequest -> mm_interconnect_1:write_slave_to_source_in_waitrequest
	wire   [0:0] mm_interconnect_1_write_slave_to_source_in_address;       // mm_interconnect_1:write_slave_to_source_in_address -> write_slave_to_source:avalonmm_write_slave_address
	wire         mm_interconnect_1_write_slave_to_source_in_write;         // mm_interconnect_1:write_slave_to_source_in_write -> write_slave_to_source:avalonmm_write_slave_write
	wire  [31:0] mm_interconnect_1_write_slave_to_source_in_writedata;     // mm_interconnect_1:write_slave_to_source_in_writedata -> write_slave_to_source:avalonmm_write_slave_writedata
	wire         mm_interconnect_0_read_slave_addr_fixer_s0_waitrequest;   // mm_interconnect_2:read_slave_addr_fixer_m0_waitrequest -> mm_interconnect_0:read_slave_addr_fixer_s0_waitrequest
	wire  [31:0] mm_interconnect_0_read_slave_addr_fixer_s0_readdata;      // mm_interconnect_2:read_slave_addr_fixer_m0_readdata -> mm_interconnect_0:read_slave_addr_fixer_s0_readdata
	wire  [31:0] mm_interconnect_2_sink_to_read_slave_out_readdata;        // sink_to_read_slave:avalonmm_read_slave_readdata -> mm_interconnect_2:sink_to_read_slave_out_readdata
	wire         mm_interconnect_2_sink_to_read_slave_out_waitrequest;     // sink_to_read_slave:avalonmm_read_slave_waitrequest -> mm_interconnect_2:sink_to_read_slave_out_waitrequest
	wire   [0:0] mm_interconnect_2_sink_to_read_slave_out_address;         // mm_interconnect_2:sink_to_read_slave_out_address -> sink_to_read_slave:avalonmm_read_slave_address
	wire         mm_interconnect_2_sink_to_read_slave_out_read;            // mm_interconnect_2:sink_to_read_slave_out_read -> sink_to_read_slave:avalonmm_read_slave_read

	altera_avalon_mm_bridge #(
		.DATA_WIDTH        (32),
		.SYMBOL_WIDTH      (8),
		.HDL_ADDR_WIDTH    (7),
		.BURSTCOUNT_WIDTH  (1),
		.PIPELINE_COMMAND  (0),
		.PIPELINE_RESPONSE (0)
	) export_slave (
		.clk              (clk_clk),                       //   clk.clk
		.reset            (reset_reset),                   // reset.reset
		.s0_waitrequest   (s0_waitrequest),                //    s0.waitrequest
		.s0_readdata      (s0_readdata),                   //      .readdata
		.s0_readdatavalid (s0_readdatavalid),              //      .readdatavalid
		.s0_burstcount    (s0_burstcount),                 //      .burstcount
		.s0_writedata     (s0_writedata),                  //      .writedata
		.s0_address       (s0_address),                    //      .address
		.s0_write         (s0_write),                      //      .write
		.s0_read          (s0_read),                       //      .read
		.s0_byteenable    (s0_byteenable),                 //      .byteenable
		.s0_debugaccess   (s0_debugaccess),                //      .debugaccess
		.m0_waitrequest   (export_slave_m0_waitrequest),   //    m0.waitrequest
		.m0_readdata      (export_slave_m0_readdata),      //      .readdata
		.m0_readdatavalid (export_slave_m0_readdatavalid), //      .readdatavalid
		.m0_burstcount    (export_slave_m0_burstcount),    //      .burstcount
		.m0_writedata     (export_slave_m0_writedata),     //      .writedata
		.m0_address       (export_slave_m0_address),       //      .address
		.m0_write         (export_slave_m0_write),         //      .write
		.m0_read          (export_slave_m0_read),          //      .read
		.m0_byteenable    (export_slave_m0_byteenable),    //      .byteenable
		.m0_debugaccess   (export_slave_m0_debugaccess),   //      .debugaccess
		.s0_response      (),                              // (terminated)
		.m0_response      (2'b00)                          // (terminated)
	);

	soc_system_sld_hub_controller_system_0_link_write_slave_to_source write_slave_to_source (
		.wrclock                          (clk_clk),                                                  //   clk_in.clk
		.reset_n                          (~reset_reset),                                             // reset_in.reset_n
		.avalonmm_write_slave_writedata   (mm_interconnect_1_write_slave_to_source_in_writedata),     //       in.writedata
		.avalonmm_write_slave_write       (mm_interconnect_1_write_slave_to_source_in_write),         //         .write
		.avalonmm_write_slave_address     (mm_interconnect_1_write_slave_to_source_in_address),       //         .address
		.avalonmm_write_slave_waitrequest (mm_interconnect_1_write_slave_to_source_in_waitrequest),   //         .waitrequest
		.avalonst_source_valid            (write_slave_to_source_out_valid),                          //      out.valid
		.avalonst_source_data             (write_slave_to_source_out_data),                           //         .data
		.avalonst_source_ready            (write_slave_to_source_out_ready),                          //         .ready
		.wrclk_control_slave_address      (mm_interconnect_0_write_slave_to_source_in_csr_address),   //   in_csr.address
		.wrclk_control_slave_read         (mm_interconnect_0_write_slave_to_source_in_csr_read),      //         .read
		.wrclk_control_slave_writedata    (mm_interconnect_0_write_slave_to_source_in_csr_writedata), //         .writedata
		.wrclk_control_slave_write        (mm_interconnect_0_write_slave_to_source_in_csr_write),     //         .write
		.wrclk_control_slave_readdata     (mm_interconnect_0_write_slave_to_source_in_csr_readdata)   //         .readdata
	);

	soc_system_sld_hub_controller_system_0_link_h2t_timing_adapter h2t_timing_adapter (
		.clk       (clk_clk),                         //   clk.clk
		.reset_n   (~reset_reset),                    // reset.reset_n
		.in_data   (write_slave_to_source_out_data),  //    in.data
		.in_valid  (write_slave_to_source_out_valid), //      .valid
		.in_ready  (write_slave_to_source_out_ready), //      .ready
		.out_data  (h2t_timing_adapter_out_data),     //   out.data
		.out_valid (h2t_timing_adapter_out_valid),    //      .valid
		.out_ready (h2t_timing_adapter_out_ready)     //      .ready
	);

	altera_mm_debug_link_datawidth_matcher #(
		.SINK_DATAWIDTH   (32),
		.SOURCE_DATAWIDTH (8)
	) h2t_data_matcher (
		.clk          (clk_clk),                       //  clock.clk
		.reset        (reset_reset),                   //  reset.reset
		.source_data  (h2t_data_matcher_source_data),  // source.data
		.source_valid (h2t_data_matcher_source_valid), //       .valid
		.source_ready (h2t_data_matcher_source_ready), //       .ready
		.sink_data    (h2t_timing_adapter_out_data),   //   sink.data
		.sink_valid   (h2t_timing_adapter_out_valid),  //       .valid
		.sink_ready   (h2t_timing_adapter_out_ready)   //       .ready
	);

	altera_avalon_st_bytes_to_packets #(
		.CHANNEL_WIDTH (8),
		.ENCODING      (0)
	) h2t_packet_source (
		.clk               (clk_clk),                                            //                clk.clk
		.reset_n           (~reset_reset),                                       //          clk_reset.reset_n
		.out_channel       (h2t_packet_source_out_packets_stream_channel),       // out_packets_stream.channel
		.out_ready         (h2t_packet_source_out_packets_stream_ready),         //                   .ready
		.out_valid         (h2t_packet_source_out_packets_stream_valid),         //                   .valid
		.out_data          (h2t_packet_source_out_packets_stream_data),          //                   .data
		.out_startofpacket (h2t_packet_source_out_packets_stream_startofpacket), //                   .startofpacket
		.out_endofpacket   (h2t_packet_source_out_packets_stream_endofpacket),   //                   .endofpacket
		.in_ready          (h2t_data_matcher_source_ready),                      //    in_bytes_stream.ready
		.in_valid          (h2t_data_matcher_source_valid),                      //                   .valid
		.in_data           (h2t_data_matcher_source_data)                        //                   .data
	);

	soc_system_sld_hub_controller_system_0_link_h2t_channel_adapter h2t_channel_adapter (
		.clk               (clk_clk),                                            //   clk.clk
		.reset_n           (~reset_reset),                                       // reset.reset_n
		.in_data           (h2t_packet_source_out_packets_stream_data),          //    in.data
		.in_valid          (h2t_packet_source_out_packets_stream_valid),         //      .valid
		.in_ready          (h2t_packet_source_out_packets_stream_ready),         //      .ready
		.in_startofpacket  (h2t_packet_source_out_packets_stream_startofpacket), //      .startofpacket
		.in_endofpacket    (h2t_packet_source_out_packets_stream_endofpacket),   //      .endofpacket
		.in_channel        (h2t_packet_source_out_packets_stream_channel),       //      .channel
		.out_data          (h2t_data),                                           //   out.data
		.out_valid         (h2t_valid),                                          //      .valid
		.out_ready         (h2t_ready),                                          //      .ready
		.out_startofpacket (h2t_startofpacket),                                  //      .startofpacket
		.out_endofpacket   (h2t_endofpacket),                                    //      .endofpacket
		.out_channel       (h2t_channel)                                         //      .channel
	);

	soc_system_sld_hub_controller_system_0_link_t2h_channel_adapter t2h_channel_adapter (
		.clk               (clk_clk),                               //   clk.clk
		.reset_n           (~reset_reset),                          // reset.reset_n
		.in_data           (t2h_data),                              //    in.data
		.in_valid          (t2h_valid),                             //      .valid
		.in_ready          (t2h_ready),                             //      .ready
		.in_startofpacket  (t2h_startofpacket),                     //      .startofpacket
		.in_endofpacket    (t2h_endofpacket),                       //      .endofpacket
		.in_channel        (t2h_channel),                           //      .channel
		.out_data          (t2h_channel_adapter_out_data),          //   out.data
		.out_valid         (t2h_channel_adapter_out_valid),         //      .valid
		.out_ready         (t2h_channel_adapter_out_ready),         //      .ready
		.out_startofpacket (t2h_channel_adapter_out_startofpacket), //      .startofpacket
		.out_endofpacket   (t2h_channel_adapter_out_endofpacket),   //      .endofpacket
		.out_channel       (t2h_channel_adapter_out_channel)        //      .channel
	);

	altera_avalon_st_packets_to_bytes #(
		.CHANNEL_WIDTH (8),
		.ENCODING      (0)
	) t2h_byte_source (
		.clk              (clk_clk),                                //               clk.clk
		.reset_n          (~reset_reset),                           //         clk_reset.reset_n
		.in_ready         (t2h_channel_adapter_out_ready),          // in_packets_stream.ready
		.in_valid         (t2h_channel_adapter_out_valid),          //                  .valid
		.in_data          (t2h_channel_adapter_out_data),           //                  .data
		.in_channel       (t2h_channel_adapter_out_channel),        //                  .channel
		.in_startofpacket (t2h_channel_adapter_out_startofpacket),  //                  .startofpacket
		.in_endofpacket   (t2h_channel_adapter_out_endofpacket),    //                  .endofpacket
		.out_ready        (t2h_byte_source_out_bytes_stream_ready), //  out_bytes_stream.ready
		.out_valid        (t2h_byte_source_out_bytes_stream_valid), //                  .valid
		.out_data         (t2h_byte_source_out_bytes_stream_data)   //                  .data
	);

	altera_mm_debug_link_datawidth_matcher #(
		.SINK_DATAWIDTH   (8),
		.SOURCE_DATAWIDTH (32)
	) t2h_data_matcher (
		.clk          (clk_clk),                                //  clock.clk
		.reset        (reset_reset),                            //  reset.reset
		.source_data  (t2h_data_matcher_source_data),           // source.data
		.source_valid (t2h_data_matcher_source_valid),          //       .valid
		.source_ready (t2h_data_matcher_source_ready),          //       .ready
		.sink_data    (t2h_byte_source_out_bytes_stream_data),  //   sink.data
		.sink_valid   (t2h_byte_source_out_bytes_stream_valid), //       .valid
		.sink_ready   (t2h_byte_source_out_bytes_stream_ready)  //       .ready
	);

	soc_system_sld_hub_controller_system_0_link_t2h_timing_adapter t2h_timing_adapter (
		.clk       (clk_clk),                       //   clk.clk
		.reset_n   (~reset_reset),                  // reset.reset_n
		.in_data   (t2h_data_matcher_source_data),  //    in.data
		.in_valid  (t2h_data_matcher_source_valid), //      .valid
		.in_ready  (t2h_data_matcher_source_ready), //      .ready
		.out_data  (t2h_timing_adapter_out_data),   //   out.data
		.out_valid (t2h_timing_adapter_out_valid),  //      .valid
		.out_ready (t2h_timing_adapter_out_ready)   //      .ready
	);

	soc_system_sld_hub_controller_system_0_link_sink_to_read_slave sink_to_read_slave (
		.wrclock                         (clk_clk),                                               //   clk_in.clk
		.reset_n                         (~reset_reset),                                          // reset_in.reset_n
		.avalonst_sink_valid             (t2h_timing_adapter_out_valid),                          //       in.valid
		.avalonst_sink_data              (t2h_timing_adapter_out_data),                           //         .data
		.avalonst_sink_ready             (t2h_timing_adapter_out_ready),                          //         .ready
		.avalonmm_read_slave_readdata    (mm_interconnect_2_sink_to_read_slave_out_readdata),     //      out.readdata
		.avalonmm_read_slave_read        (mm_interconnect_2_sink_to_read_slave_out_read),         //         .read
		.avalonmm_read_slave_address     (mm_interconnect_2_sink_to_read_slave_out_address),      //         .address
		.avalonmm_read_slave_waitrequest (mm_interconnect_2_sink_to_read_slave_out_waitrequest),  //         .waitrequest
		.wrclk_control_slave_address     (mm_interconnect_0_sink_to_read_slave_in_csr_address),   //   in_csr.address
		.wrclk_control_slave_read        (mm_interconnect_0_sink_to_read_slave_in_csr_read),      //         .read
		.wrclk_control_slave_writedata   (mm_interconnect_0_sink_to_read_slave_in_csr_writedata), //         .writedata
		.wrclk_control_slave_write       (mm_interconnect_0_sink_to_read_slave_in_csr_write),     //         .write
		.wrclk_control_slave_readdata    (mm_interconnect_0_sink_to_read_slave_in_csr_readdata)   //         .readdata
	);

	altera_connection_identification_rom_wrapper #(
		.LATENCY (2)
	) connection_id_rom (
		.clk       (clk_clk),                                          // clock.clk
		.reset     (reset_reset),                                      // reset.reset
		.read      (mm_interconnect_0_connection_id_rom_s0_read),      //    s0.read
		.write     (mm_interconnect_0_connection_id_rom_s0_write),     //      .write
		.writedata (mm_interconnect_0_connection_id_rom_s0_writedata), //      .writedata
		.readdata  (mm_interconnect_0_connection_id_rom_s0_readdata),  //      .readdata
		.address   (mm_interconnect_0_connection_id_rom_s0_address)    //      .address
	);

	altera_mm_mgmt_wrapper #(
		.CHANNEL_WIDTH (8)
	) mm_mgmt (
		.clk           (clk_clk),                                 //         clk.clk
		.reset         (reset_reset),                             //       reset.reset
		.csr_address   (mm_interconnect_0_mm_mgmt_csr_address),   //         csr.address
		.csr_write     (mm_interconnect_0_mm_mgmt_csr_write),     //            .write
		.csr_read      (mm_interconnect_0_mm_mgmt_csr_read),      //            .read
		.csr_writedata (mm_interconnect_0_mm_mgmt_csr_writedata), //            .writedata
		.csr_readdata  (mm_interconnect_0_mm_mgmt_csr_readdata),  //            .readdata
		.debug_reset   (debug_reset_reset),                       // debug_reset.reset
		.mgmt_valid    (mgmt_valid),                              //        mgmt.valid
		.mgmt_data     (mgmt_data),                               //            .data
		.mgmt_channel  (mgmt_channel)                             //            .channel
	);

	soc_system_sld_hub_controller_system_0_link_mm_interconnect_0 mm_interconnect_0 (
		.clock_bridge_out_clk_clk                       (clk_clk),                                                  //                     clock_bridge_out_clk.clk
		.export_slave_reset_reset_bridge_in_reset_reset (reset_reset),                                              // export_slave_reset_reset_bridge_in_reset.reset
		.export_slave_m0_address                        (export_slave_m0_address),                                  //                          export_slave_m0.address
		.export_slave_m0_waitrequest                    (export_slave_m0_waitrequest),                              //                                         .waitrequest
		.export_slave_m0_burstcount                     (export_slave_m0_burstcount),                               //                                         .burstcount
		.export_slave_m0_byteenable                     (export_slave_m0_byteenable),                               //                                         .byteenable
		.export_slave_m0_read                           (export_slave_m0_read),                                     //                                         .read
		.export_slave_m0_readdata                       (export_slave_m0_readdata),                                 //                                         .readdata
		.export_slave_m0_readdatavalid                  (export_slave_m0_readdatavalid),                            //                                         .readdatavalid
		.export_slave_m0_write                          (export_slave_m0_write),                                    //                                         .write
		.export_slave_m0_writedata                      (export_slave_m0_writedata),                                //                                         .writedata
		.export_slave_m0_debugaccess                    (export_slave_m0_debugaccess),                              //                                         .debugaccess
		.connection_id_rom_s0_address                   (mm_interconnect_0_connection_id_rom_s0_address),           //                     connection_id_rom_s0.address
		.connection_id_rom_s0_write                     (mm_interconnect_0_connection_id_rom_s0_write),             //                                         .write
		.connection_id_rom_s0_read                      (mm_interconnect_0_connection_id_rom_s0_read),              //                                         .read
		.connection_id_rom_s0_readdata                  (mm_interconnect_0_connection_id_rom_s0_readdata),          //                                         .readdata
		.connection_id_rom_s0_writedata                 (mm_interconnect_0_connection_id_rom_s0_writedata),         //                                         .writedata
		.mm_mgmt_csr_address                            (mm_interconnect_0_mm_mgmt_csr_address),                    //                              mm_mgmt_csr.address
		.mm_mgmt_csr_write                              (mm_interconnect_0_mm_mgmt_csr_write),                      //                                         .write
		.mm_mgmt_csr_read                               (mm_interconnect_0_mm_mgmt_csr_read),                       //                                         .read
		.mm_mgmt_csr_readdata                           (mm_interconnect_0_mm_mgmt_csr_readdata),                   //                                         .readdata
		.mm_mgmt_csr_writedata                          (mm_interconnect_0_mm_mgmt_csr_writedata),                  //                                         .writedata
		.read_fifo_capacity_s0_readdata                 (32'b00000000000000000000000000100000),                     //                    read_fifo_capacity_s0.readdata
		.read_slave_addr_fixer_s0_write                 (mm_interconnect_0_read_slave_addr_fixer_s0_write),         //                 read_slave_addr_fixer_s0.write
		.read_slave_addr_fixer_s0_read                  (mm_interconnect_0_read_slave_addr_fixer_s0_read),          //                                         .read
		.read_slave_addr_fixer_s0_readdata              (mm_interconnect_0_read_slave_addr_fixer_s0_readdata),      //                                         .readdata
		.read_slave_addr_fixer_s0_writedata             (mm_interconnect_0_read_slave_addr_fixer_s0_writedata),     //                                         .writedata
		.read_slave_addr_fixer_s0_waitrequest           (mm_interconnect_0_read_slave_addr_fixer_s0_waitrequest),   //                                         .waitrequest
		.sink_to_read_slave_in_csr_address              (mm_interconnect_0_sink_to_read_slave_in_csr_address),      //                sink_to_read_slave_in_csr.address
		.sink_to_read_slave_in_csr_write                (mm_interconnect_0_sink_to_read_slave_in_csr_write),        //                                         .write
		.sink_to_read_slave_in_csr_read                 (mm_interconnect_0_sink_to_read_slave_in_csr_read),         //                                         .read
		.sink_to_read_slave_in_csr_readdata             (mm_interconnect_0_sink_to_read_slave_in_csr_readdata),     //                                         .readdata
		.sink_to_read_slave_in_csr_writedata            (mm_interconnect_0_sink_to_read_slave_in_csr_writedata),    //                                         .writedata
		.write_fifo_capacity_s0_readdata                (32'b00000000000000000000000000100000),                     //                   write_fifo_capacity_s0.readdata
		.write_slave_addr_fixer_s0_write                (mm_interconnect_0_write_slave_addr_fixer_s0_write),        //                write_slave_addr_fixer_s0.write
		.write_slave_addr_fixer_s0_read                 (mm_interconnect_0_write_slave_addr_fixer_s0_read),         //                                         .read
		.write_slave_addr_fixer_s0_readdata             (mm_interconnect_0_write_slave_addr_fixer_s0_readdata),     //                                         .readdata
		.write_slave_addr_fixer_s0_writedata            (mm_interconnect_0_write_slave_addr_fixer_s0_writedata),    //                                         .writedata
		.write_slave_addr_fixer_s0_waitrequest          (mm_interconnect_0_write_slave_addr_fixer_s0_waitrequest),  //                                         .waitrequest
		.write_slave_to_source_in_csr_address           (mm_interconnect_0_write_slave_to_source_in_csr_address),   //             write_slave_to_source_in_csr.address
		.write_slave_to_source_in_csr_write             (mm_interconnect_0_write_slave_to_source_in_csr_write),     //                                         .write
		.write_slave_to_source_in_csr_read              (mm_interconnect_0_write_slave_to_source_in_csr_read),      //                                         .read
		.write_slave_to_source_in_csr_readdata          (mm_interconnect_0_write_slave_to_source_in_csr_readdata),  //                                         .readdata
		.write_slave_to_source_in_csr_writedata         (mm_interconnect_0_write_slave_to_source_in_csr_writedata)  //                                         .writedata
	);

	soc_system_sld_hub_controller_system_0_link_mm_interconnect_1 mm_interconnect_1 (
		.clock_bridge_out_clk_clk                                 (clk_clk),                                                 //                               clock_bridge_out_clk.clk
		.write_slave_addr_fixer_reset_reset_bridge_in_reset_reset (reset_reset),                                             // write_slave_addr_fixer_reset_reset_bridge_in_reset.reset
		.write_slave_addr_fixer_m0_address                        (3'b000),                                                  //                          write_slave_addr_fixer_m0.address
		.write_slave_addr_fixer_m0_waitrequest                    (mm_interconnect_0_write_slave_addr_fixer_s0_waitrequest), //                                                   .waitrequest
		.write_slave_addr_fixer_m0_read                           (mm_interconnect_0_write_slave_addr_fixer_s0_read),        //                                                   .read
		.write_slave_addr_fixer_m0_readdata                       (mm_interconnect_0_write_slave_addr_fixer_s0_readdata),    //                                                   .readdata
		.write_slave_addr_fixer_m0_write                          (mm_interconnect_0_write_slave_addr_fixer_s0_write),       //                                                   .write
		.write_slave_addr_fixer_m0_writedata                      (mm_interconnect_0_write_slave_addr_fixer_s0_writedata),   //                                                   .writedata
		.write_slave_to_source_in_address                         (mm_interconnect_1_write_slave_to_source_in_address),      //                           write_slave_to_source_in.address
		.write_slave_to_source_in_write                           (mm_interconnect_1_write_slave_to_source_in_write),        //                                                   .write
		.write_slave_to_source_in_writedata                       (mm_interconnect_1_write_slave_to_source_in_writedata),    //                                                   .writedata
		.write_slave_to_source_in_waitrequest                     (mm_interconnect_1_write_slave_to_source_in_waitrequest)   //                                                   .waitrequest
	);

	soc_system_sld_hub_controller_system_0_link_mm_interconnect_2 mm_interconnect_2 (
		.clock_bridge_out_clk_clk                                (clk_clk),                                                //                              clock_bridge_out_clk.clk
		.read_slave_addr_fixer_reset_reset_bridge_in_reset_reset (reset_reset),                                            // read_slave_addr_fixer_reset_reset_bridge_in_reset.reset
		.read_slave_addr_fixer_m0_address                        (3'b000),                                                 //                          read_slave_addr_fixer_m0.address
		.read_slave_addr_fixer_m0_waitrequest                    (mm_interconnect_0_read_slave_addr_fixer_s0_waitrequest), //                                                  .waitrequest
		.read_slave_addr_fixer_m0_read                           (mm_interconnect_0_read_slave_addr_fixer_s0_read),        //                                                  .read
		.read_slave_addr_fixer_m0_readdata                       (mm_interconnect_0_read_slave_addr_fixer_s0_readdata),    //                                                  .readdata
		.read_slave_addr_fixer_m0_write                          (mm_interconnect_0_read_slave_addr_fixer_s0_write),       //                                                  .write
		.read_slave_addr_fixer_m0_writedata                      (mm_interconnect_0_read_slave_addr_fixer_s0_writedata),   //                                                  .writedata
		.sink_to_read_slave_out_address                          (mm_interconnect_2_sink_to_read_slave_out_address),       //                            sink_to_read_slave_out.address
		.sink_to_read_slave_out_read                             (mm_interconnect_2_sink_to_read_slave_out_read),          //                                                  .read
		.sink_to_read_slave_out_readdata                         (mm_interconnect_2_sink_to_read_slave_out_readdata),      //                                                  .readdata
		.sink_to_read_slave_out_waitrequest                      (mm_interconnect_2_sink_to_read_slave_out_waitrequest)    //                                                  .waitrequest
	);

endmodule
