// soc_system_sld_hub_controller_system_0_hub_controller.v

// This file was auto-generated from altera_streaming_sld_hub_controller_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module soc_system_sld_hub_controller_system_0_hub_controller #(
		parameter ENABLE_JTAG_IO_SELECTION = 0
	) (
		input  wire       clk_clk,              //    clk.clk
		input  wire       reset_reset,          //  reset.reset
		input  wire       sink_valid,           //   sink.valid
		input  wire       sink_startofpacket,   //       .startofpacket
		input  wire       sink_endofpacket,     //       .endofpacket
		input  wire [7:0] sink_data,            //       .data
		output wire       sink_ready,           //       .ready
		output wire       source_valid,         // source.valid
		output wire       source_startofpacket, //       .startofpacket
		output wire       source_endofpacket,   //       .endofpacket
		output wire [7:0] source_data,          //       .data
		input  wire       source_ready          //       .ready
	);

	generate
		// If any of the display statements (or deliberately broken
		// instantiations) within this generate block triggers then this module
		// has been instantiated this module with a set of parameters different
		// from those it was generated for.  This will usually result in a
		// non-functioning system.
		if (ENABLE_JTAG_IO_SELECTION != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					enable_jtag_io_selection_check ( .error(1'b1) );
		end
	endgenerate

	altera_streaming_sld_hub_controller_core #(
		.DEVICE_FAMILY            ("Cyclone V"),
		.ENABLE_JTAG_IO_SELECTION (0)
	) core (
		.clk           (clk_clk),                              //    clk.clk
		.reset         (reset_reset),                          //  reset.reset
		.cmd_valid     (sink_valid),                           //   sink.valid
		.cmd_sop       (sink_startofpacket),                   //       .startofpacket
		.cmd_eop       (sink_endofpacket),                     //       .endofpacket
		.cmd_data      (sink_data),                            //       .data
		.cmd_ready     (sink_ready),                           //       .ready
		.resp_valid    (source_valid),                         // source.valid
		.resp_sop      (source_startofpacket),                 //       .startofpacket
		.resp_eop      (source_endofpacket),                   //       .endofpacket
		.resp_data     (source_data),                          //       .data
		.resp_ready    (source_ready),                         //       .ready
		.csr_write     (1'b0),                                 // (terminated)
		.csr_read      (1'b0),                                 // (terminated)
		.csr_readdata  (),                                     // (terminated)
		.csr_writedata (32'b00000000000000000000000000000000), // (terminated)
		.csr_addr      (1'b0)                                  // (terminated)
	);

endmodule
