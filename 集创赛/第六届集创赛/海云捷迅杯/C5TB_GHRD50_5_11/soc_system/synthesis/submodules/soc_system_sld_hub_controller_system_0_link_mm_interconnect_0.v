// soc_system_sld_hub_controller_system_0_link_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module soc_system_sld_hub_controller_system_0_link_mm_interconnect_0 (
		input  wire        clock_bridge_out_clk_clk,                       //                     clock_bridge_out_clk.clk
		input  wire        export_slave_reset_reset_bridge_in_reset_reset, // export_slave_reset_reset_bridge_in_reset.reset
		input  wire [6:0]  export_slave_m0_address,                        //                          export_slave_m0.address
		output wire        export_slave_m0_waitrequest,                    //                                         .waitrequest
		input  wire [0:0]  export_slave_m0_burstcount,                     //                                         .burstcount
		input  wire [3:0]  export_slave_m0_byteenable,                     //                                         .byteenable
		input  wire        export_slave_m0_read,                           //                                         .read
		output wire [31:0] export_slave_m0_readdata,                       //                                         .readdata
		output wire        export_slave_m0_readdatavalid,                  //                                         .readdatavalid
		input  wire        export_slave_m0_write,                          //                                         .write
		input  wire [31:0] export_slave_m0_writedata,                      //                                         .writedata
		input  wire        export_slave_m0_debugaccess,                    //                                         .debugaccess
		output wire [1:0]  connection_id_rom_s0_address,                   //                     connection_id_rom_s0.address
		output wire        connection_id_rom_s0_write,                     //                                         .write
		output wire        connection_id_rom_s0_read,                      //                                         .read
		input  wire [31:0] connection_id_rom_s0_readdata,                  //                                         .readdata
		output wire [31:0] connection_id_rom_s0_writedata,                 //                                         .writedata
		output wire [1:0]  mm_mgmt_csr_address,                            //                              mm_mgmt_csr.address
		output wire        mm_mgmt_csr_write,                              //                                         .write
		output wire        mm_mgmt_csr_read,                               //                                         .read
		input  wire [31:0] mm_mgmt_csr_readdata,                           //                                         .readdata
		output wire [31:0] mm_mgmt_csr_writedata,                          //                                         .writedata
		input  wire [31:0] read_fifo_capacity_s0_readdata,                 //                    read_fifo_capacity_s0.readdata
		output wire        read_slave_addr_fixer_s0_write,                 //                 read_slave_addr_fixer_s0.write
		output wire        read_slave_addr_fixer_s0_read,                  //                                         .read
		input  wire [31:0] read_slave_addr_fixer_s0_readdata,              //                                         .readdata
		output wire [31:0] read_slave_addr_fixer_s0_writedata,             //                                         .writedata
		input  wire        read_slave_addr_fixer_s0_waitrequest,           //                                         .waitrequest
		output wire [2:0]  sink_to_read_slave_in_csr_address,              //                sink_to_read_slave_in_csr.address
		output wire        sink_to_read_slave_in_csr_write,                //                                         .write
		output wire        sink_to_read_slave_in_csr_read,                 //                                         .read
		input  wire [31:0] sink_to_read_slave_in_csr_readdata,             //                                         .readdata
		output wire [31:0] sink_to_read_slave_in_csr_writedata,            //                                         .writedata
		input  wire [31:0] write_fifo_capacity_s0_readdata,                //                   write_fifo_capacity_s0.readdata
		output wire        write_slave_addr_fixer_s0_write,                //                write_slave_addr_fixer_s0.write
		output wire        write_slave_addr_fixer_s0_read,                 //                                         .read
		input  wire [31:0] write_slave_addr_fixer_s0_readdata,             //                                         .readdata
		output wire [31:0] write_slave_addr_fixer_s0_writedata,            //                                         .writedata
		input  wire        write_slave_addr_fixer_s0_waitrequest,          //                                         .waitrequest
		output wire [2:0]  write_slave_to_source_in_csr_address,           //             write_slave_to_source_in_csr.address
		output wire        write_slave_to_source_in_csr_write,             //                                         .write
		output wire        write_slave_to_source_in_csr_read,              //                                         .read
		input  wire [31:0] write_slave_to_source_in_csr_readdata,          //                                         .readdata
		output wire [31:0] write_slave_to_source_in_csr_writedata          //                                         .writedata
	);

	wire         export_slave_m0_translator_avalon_universal_master_0_waitrequest;   // export_slave_m0_agent:av_waitrequest -> export_slave_m0_translator:uav_waitrequest
	wire  [31:0] export_slave_m0_translator_avalon_universal_master_0_readdata;      // export_slave_m0_agent:av_readdata -> export_slave_m0_translator:uav_readdata
	wire         export_slave_m0_translator_avalon_universal_master_0_debugaccess;   // export_slave_m0_translator:uav_debugaccess -> export_slave_m0_agent:av_debugaccess
	wire   [6:0] export_slave_m0_translator_avalon_universal_master_0_address;       // export_slave_m0_translator:uav_address -> export_slave_m0_agent:av_address
	wire         export_slave_m0_translator_avalon_universal_master_0_read;          // export_slave_m0_translator:uav_read -> export_slave_m0_agent:av_read
	wire   [3:0] export_slave_m0_translator_avalon_universal_master_0_byteenable;    // export_slave_m0_translator:uav_byteenable -> export_slave_m0_agent:av_byteenable
	wire         export_slave_m0_translator_avalon_universal_master_0_readdatavalid; // export_slave_m0_agent:av_readdatavalid -> export_slave_m0_translator:uav_readdatavalid
	wire         export_slave_m0_translator_avalon_universal_master_0_lock;          // export_slave_m0_translator:uav_lock -> export_slave_m0_agent:av_lock
	wire         export_slave_m0_translator_avalon_universal_master_0_write;         // export_slave_m0_translator:uav_write -> export_slave_m0_agent:av_write
	wire  [31:0] export_slave_m0_translator_avalon_universal_master_0_writedata;     // export_slave_m0_translator:uav_writedata -> export_slave_m0_agent:av_writedata
	wire   [2:0] export_slave_m0_translator_avalon_universal_master_0_burstcount;    // export_slave_m0_translator:uav_burstcount -> export_slave_m0_agent:av_burstcount
	wire  [31:0] write_slave_addr_fixer_s0_agent_m0_readdata;                        // write_slave_addr_fixer_s0_translator:uav_readdata -> write_slave_addr_fixer_s0_agent:m0_readdata
	wire         write_slave_addr_fixer_s0_agent_m0_waitrequest;                     // write_slave_addr_fixer_s0_translator:uav_waitrequest -> write_slave_addr_fixer_s0_agent:m0_waitrequest
	wire         write_slave_addr_fixer_s0_agent_m0_debugaccess;                     // write_slave_addr_fixer_s0_agent:m0_debugaccess -> write_slave_addr_fixer_s0_translator:uav_debugaccess
	wire   [6:0] write_slave_addr_fixer_s0_agent_m0_address;                         // write_slave_addr_fixer_s0_agent:m0_address -> write_slave_addr_fixer_s0_translator:uav_address
	wire   [3:0] write_slave_addr_fixer_s0_agent_m0_byteenable;                      // write_slave_addr_fixer_s0_agent:m0_byteenable -> write_slave_addr_fixer_s0_translator:uav_byteenable
	wire         write_slave_addr_fixer_s0_agent_m0_read;                            // write_slave_addr_fixer_s0_agent:m0_read -> write_slave_addr_fixer_s0_translator:uav_read
	wire         write_slave_addr_fixer_s0_agent_m0_readdatavalid;                   // write_slave_addr_fixer_s0_translator:uav_readdatavalid -> write_slave_addr_fixer_s0_agent:m0_readdatavalid
	wire         write_slave_addr_fixer_s0_agent_m0_lock;                            // write_slave_addr_fixer_s0_agent:m0_lock -> write_slave_addr_fixer_s0_translator:uav_lock
	wire  [31:0] write_slave_addr_fixer_s0_agent_m0_writedata;                       // write_slave_addr_fixer_s0_agent:m0_writedata -> write_slave_addr_fixer_s0_translator:uav_writedata
	wire         write_slave_addr_fixer_s0_agent_m0_write;                           // write_slave_addr_fixer_s0_agent:m0_write -> write_slave_addr_fixer_s0_translator:uav_write
	wire   [2:0] write_slave_addr_fixer_s0_agent_m0_burstcount;                      // write_slave_addr_fixer_s0_agent:m0_burstcount -> write_slave_addr_fixer_s0_translator:uav_burstcount
	wire         write_slave_addr_fixer_s0_agent_rf_source_valid;                    // write_slave_addr_fixer_s0_agent:rf_source_valid -> write_slave_addr_fixer_s0_agent_rsp_fifo:in_valid
	wire  [81:0] write_slave_addr_fixer_s0_agent_rf_source_data;                     // write_slave_addr_fixer_s0_agent:rf_source_data -> write_slave_addr_fixer_s0_agent_rsp_fifo:in_data
	wire         write_slave_addr_fixer_s0_agent_rf_source_ready;                    // write_slave_addr_fixer_s0_agent_rsp_fifo:in_ready -> write_slave_addr_fixer_s0_agent:rf_source_ready
	wire         write_slave_addr_fixer_s0_agent_rf_source_startofpacket;            // write_slave_addr_fixer_s0_agent:rf_source_startofpacket -> write_slave_addr_fixer_s0_agent_rsp_fifo:in_startofpacket
	wire         write_slave_addr_fixer_s0_agent_rf_source_endofpacket;              // write_slave_addr_fixer_s0_agent:rf_source_endofpacket -> write_slave_addr_fixer_s0_agent_rsp_fifo:in_endofpacket
	wire         write_slave_addr_fixer_s0_agent_rsp_fifo_out_valid;                 // write_slave_addr_fixer_s0_agent_rsp_fifo:out_valid -> write_slave_addr_fixer_s0_agent:rf_sink_valid
	wire  [81:0] write_slave_addr_fixer_s0_agent_rsp_fifo_out_data;                  // write_slave_addr_fixer_s0_agent_rsp_fifo:out_data -> write_slave_addr_fixer_s0_agent:rf_sink_data
	wire         write_slave_addr_fixer_s0_agent_rsp_fifo_out_ready;                 // write_slave_addr_fixer_s0_agent:rf_sink_ready -> write_slave_addr_fixer_s0_agent_rsp_fifo:out_ready
	wire         write_slave_addr_fixer_s0_agent_rsp_fifo_out_startofpacket;         // write_slave_addr_fixer_s0_agent_rsp_fifo:out_startofpacket -> write_slave_addr_fixer_s0_agent:rf_sink_startofpacket
	wire         write_slave_addr_fixer_s0_agent_rsp_fifo_out_endofpacket;           // write_slave_addr_fixer_s0_agent_rsp_fifo:out_endofpacket -> write_slave_addr_fixer_s0_agent:rf_sink_endofpacket
	wire         cmd_mux_src_valid;                                                  // cmd_mux:src_valid -> write_slave_addr_fixer_s0_agent:cp_valid
	wire  [80:0] cmd_mux_src_data;                                                   // cmd_mux:src_data -> write_slave_addr_fixer_s0_agent:cp_data
	wire         cmd_mux_src_ready;                                                  // write_slave_addr_fixer_s0_agent:cp_ready -> cmd_mux:src_ready
	wire   [7:0] cmd_mux_src_channel;                                                // cmd_mux:src_channel -> write_slave_addr_fixer_s0_agent:cp_channel
	wire         cmd_mux_src_startofpacket;                                          // cmd_mux:src_startofpacket -> write_slave_addr_fixer_s0_agent:cp_startofpacket
	wire         cmd_mux_src_endofpacket;                                            // cmd_mux:src_endofpacket -> write_slave_addr_fixer_s0_agent:cp_endofpacket
	wire  [31:0] write_fifo_capacity_s0_agent_m0_readdata;                           // write_fifo_capacity_s0_translator:uav_readdata -> write_fifo_capacity_s0_agent:m0_readdata
	wire         write_fifo_capacity_s0_agent_m0_waitrequest;                        // write_fifo_capacity_s0_translator:uav_waitrequest -> write_fifo_capacity_s0_agent:m0_waitrequest
	wire         write_fifo_capacity_s0_agent_m0_debugaccess;                        // write_fifo_capacity_s0_agent:m0_debugaccess -> write_fifo_capacity_s0_translator:uav_debugaccess
	wire   [6:0] write_fifo_capacity_s0_agent_m0_address;                            // write_fifo_capacity_s0_agent:m0_address -> write_fifo_capacity_s0_translator:uav_address
	wire   [3:0] write_fifo_capacity_s0_agent_m0_byteenable;                         // write_fifo_capacity_s0_agent:m0_byteenable -> write_fifo_capacity_s0_translator:uav_byteenable
	wire         write_fifo_capacity_s0_agent_m0_read;                               // write_fifo_capacity_s0_agent:m0_read -> write_fifo_capacity_s0_translator:uav_read
	wire         write_fifo_capacity_s0_agent_m0_readdatavalid;                      // write_fifo_capacity_s0_translator:uav_readdatavalid -> write_fifo_capacity_s0_agent:m0_readdatavalid
	wire         write_fifo_capacity_s0_agent_m0_lock;                               // write_fifo_capacity_s0_agent:m0_lock -> write_fifo_capacity_s0_translator:uav_lock
	wire  [31:0] write_fifo_capacity_s0_agent_m0_writedata;                          // write_fifo_capacity_s0_agent:m0_writedata -> write_fifo_capacity_s0_translator:uav_writedata
	wire         write_fifo_capacity_s0_agent_m0_write;                              // write_fifo_capacity_s0_agent:m0_write -> write_fifo_capacity_s0_translator:uav_write
	wire   [2:0] write_fifo_capacity_s0_agent_m0_burstcount;                         // write_fifo_capacity_s0_agent:m0_burstcount -> write_fifo_capacity_s0_translator:uav_burstcount
	wire         write_fifo_capacity_s0_agent_rf_source_valid;                       // write_fifo_capacity_s0_agent:rf_source_valid -> write_fifo_capacity_s0_agent_rsp_fifo:in_valid
	wire  [81:0] write_fifo_capacity_s0_agent_rf_source_data;                        // write_fifo_capacity_s0_agent:rf_source_data -> write_fifo_capacity_s0_agent_rsp_fifo:in_data
	wire         write_fifo_capacity_s0_agent_rf_source_ready;                       // write_fifo_capacity_s0_agent_rsp_fifo:in_ready -> write_fifo_capacity_s0_agent:rf_source_ready
	wire         write_fifo_capacity_s0_agent_rf_source_startofpacket;               // write_fifo_capacity_s0_agent:rf_source_startofpacket -> write_fifo_capacity_s0_agent_rsp_fifo:in_startofpacket
	wire         write_fifo_capacity_s0_agent_rf_source_endofpacket;                 // write_fifo_capacity_s0_agent:rf_source_endofpacket -> write_fifo_capacity_s0_agent_rsp_fifo:in_endofpacket
	wire         write_fifo_capacity_s0_agent_rsp_fifo_out_valid;                    // write_fifo_capacity_s0_agent_rsp_fifo:out_valid -> write_fifo_capacity_s0_agent:rf_sink_valid
	wire  [81:0] write_fifo_capacity_s0_agent_rsp_fifo_out_data;                     // write_fifo_capacity_s0_agent_rsp_fifo:out_data -> write_fifo_capacity_s0_agent:rf_sink_data
	wire         write_fifo_capacity_s0_agent_rsp_fifo_out_ready;                    // write_fifo_capacity_s0_agent:rf_sink_ready -> write_fifo_capacity_s0_agent_rsp_fifo:out_ready
	wire         write_fifo_capacity_s0_agent_rsp_fifo_out_startofpacket;            // write_fifo_capacity_s0_agent_rsp_fifo:out_startofpacket -> write_fifo_capacity_s0_agent:rf_sink_startofpacket
	wire         write_fifo_capacity_s0_agent_rsp_fifo_out_endofpacket;              // write_fifo_capacity_s0_agent_rsp_fifo:out_endofpacket -> write_fifo_capacity_s0_agent:rf_sink_endofpacket
	wire         cmd_mux_001_src_valid;                                              // cmd_mux_001:src_valid -> write_fifo_capacity_s0_agent:cp_valid
	wire  [80:0] cmd_mux_001_src_data;                                               // cmd_mux_001:src_data -> write_fifo_capacity_s0_agent:cp_data
	wire         cmd_mux_001_src_ready;                                              // write_fifo_capacity_s0_agent:cp_ready -> cmd_mux_001:src_ready
	wire   [7:0] cmd_mux_001_src_channel;                                            // cmd_mux_001:src_channel -> write_fifo_capacity_s0_agent:cp_channel
	wire         cmd_mux_001_src_startofpacket;                                      // cmd_mux_001:src_startofpacket -> write_fifo_capacity_s0_agent:cp_startofpacket
	wire         cmd_mux_001_src_endofpacket;                                        // cmd_mux_001:src_endofpacket -> write_fifo_capacity_s0_agent:cp_endofpacket
	wire  [31:0] read_slave_addr_fixer_s0_agent_m0_readdata;                         // read_slave_addr_fixer_s0_translator:uav_readdata -> read_slave_addr_fixer_s0_agent:m0_readdata
	wire         read_slave_addr_fixer_s0_agent_m0_waitrequest;                      // read_slave_addr_fixer_s0_translator:uav_waitrequest -> read_slave_addr_fixer_s0_agent:m0_waitrequest
	wire         read_slave_addr_fixer_s0_agent_m0_debugaccess;                      // read_slave_addr_fixer_s0_agent:m0_debugaccess -> read_slave_addr_fixer_s0_translator:uav_debugaccess
	wire   [6:0] read_slave_addr_fixer_s0_agent_m0_address;                          // read_slave_addr_fixer_s0_agent:m0_address -> read_slave_addr_fixer_s0_translator:uav_address
	wire   [3:0] read_slave_addr_fixer_s0_agent_m0_byteenable;                       // read_slave_addr_fixer_s0_agent:m0_byteenable -> read_slave_addr_fixer_s0_translator:uav_byteenable
	wire         read_slave_addr_fixer_s0_agent_m0_read;                             // read_slave_addr_fixer_s0_agent:m0_read -> read_slave_addr_fixer_s0_translator:uav_read
	wire         read_slave_addr_fixer_s0_agent_m0_readdatavalid;                    // read_slave_addr_fixer_s0_translator:uav_readdatavalid -> read_slave_addr_fixer_s0_agent:m0_readdatavalid
	wire         read_slave_addr_fixer_s0_agent_m0_lock;                             // read_slave_addr_fixer_s0_agent:m0_lock -> read_slave_addr_fixer_s0_translator:uav_lock
	wire  [31:0] read_slave_addr_fixer_s0_agent_m0_writedata;                        // read_slave_addr_fixer_s0_agent:m0_writedata -> read_slave_addr_fixer_s0_translator:uav_writedata
	wire         read_slave_addr_fixer_s0_agent_m0_write;                            // read_slave_addr_fixer_s0_agent:m0_write -> read_slave_addr_fixer_s0_translator:uav_write
	wire   [2:0] read_slave_addr_fixer_s0_agent_m0_burstcount;                       // read_slave_addr_fixer_s0_agent:m0_burstcount -> read_slave_addr_fixer_s0_translator:uav_burstcount
	wire         read_slave_addr_fixer_s0_agent_rf_source_valid;                     // read_slave_addr_fixer_s0_agent:rf_source_valid -> read_slave_addr_fixer_s0_agent_rsp_fifo:in_valid
	wire  [81:0] read_slave_addr_fixer_s0_agent_rf_source_data;                      // read_slave_addr_fixer_s0_agent:rf_source_data -> read_slave_addr_fixer_s0_agent_rsp_fifo:in_data
	wire         read_slave_addr_fixer_s0_agent_rf_source_ready;                     // read_slave_addr_fixer_s0_agent_rsp_fifo:in_ready -> read_slave_addr_fixer_s0_agent:rf_source_ready
	wire         read_slave_addr_fixer_s0_agent_rf_source_startofpacket;             // read_slave_addr_fixer_s0_agent:rf_source_startofpacket -> read_slave_addr_fixer_s0_agent_rsp_fifo:in_startofpacket
	wire         read_slave_addr_fixer_s0_agent_rf_source_endofpacket;               // read_slave_addr_fixer_s0_agent:rf_source_endofpacket -> read_slave_addr_fixer_s0_agent_rsp_fifo:in_endofpacket
	wire         read_slave_addr_fixer_s0_agent_rsp_fifo_out_valid;                  // read_slave_addr_fixer_s0_agent_rsp_fifo:out_valid -> read_slave_addr_fixer_s0_agent:rf_sink_valid
	wire  [81:0] read_slave_addr_fixer_s0_agent_rsp_fifo_out_data;                   // read_slave_addr_fixer_s0_agent_rsp_fifo:out_data -> read_slave_addr_fixer_s0_agent:rf_sink_data
	wire         read_slave_addr_fixer_s0_agent_rsp_fifo_out_ready;                  // read_slave_addr_fixer_s0_agent:rf_sink_ready -> read_slave_addr_fixer_s0_agent_rsp_fifo:out_ready
	wire         read_slave_addr_fixer_s0_agent_rsp_fifo_out_startofpacket;          // read_slave_addr_fixer_s0_agent_rsp_fifo:out_startofpacket -> read_slave_addr_fixer_s0_agent:rf_sink_startofpacket
	wire         read_slave_addr_fixer_s0_agent_rsp_fifo_out_endofpacket;            // read_slave_addr_fixer_s0_agent_rsp_fifo:out_endofpacket -> read_slave_addr_fixer_s0_agent:rf_sink_endofpacket
	wire         cmd_mux_002_src_valid;                                              // cmd_mux_002:src_valid -> read_slave_addr_fixer_s0_agent:cp_valid
	wire  [80:0] cmd_mux_002_src_data;                                               // cmd_mux_002:src_data -> read_slave_addr_fixer_s0_agent:cp_data
	wire         cmd_mux_002_src_ready;                                              // read_slave_addr_fixer_s0_agent:cp_ready -> cmd_mux_002:src_ready
	wire   [7:0] cmd_mux_002_src_channel;                                            // cmd_mux_002:src_channel -> read_slave_addr_fixer_s0_agent:cp_channel
	wire         cmd_mux_002_src_startofpacket;                                      // cmd_mux_002:src_startofpacket -> read_slave_addr_fixer_s0_agent:cp_startofpacket
	wire         cmd_mux_002_src_endofpacket;                                        // cmd_mux_002:src_endofpacket -> read_slave_addr_fixer_s0_agent:cp_endofpacket
	wire  [31:0] read_fifo_capacity_s0_agent_m0_readdata;                            // read_fifo_capacity_s0_translator:uav_readdata -> read_fifo_capacity_s0_agent:m0_readdata
	wire         read_fifo_capacity_s0_agent_m0_waitrequest;                         // read_fifo_capacity_s0_translator:uav_waitrequest -> read_fifo_capacity_s0_agent:m0_waitrequest
	wire         read_fifo_capacity_s0_agent_m0_debugaccess;                         // read_fifo_capacity_s0_agent:m0_debugaccess -> read_fifo_capacity_s0_translator:uav_debugaccess
	wire   [6:0] read_fifo_capacity_s0_agent_m0_address;                             // read_fifo_capacity_s0_agent:m0_address -> read_fifo_capacity_s0_translator:uav_address
	wire   [3:0] read_fifo_capacity_s0_agent_m0_byteenable;                          // read_fifo_capacity_s0_agent:m0_byteenable -> read_fifo_capacity_s0_translator:uav_byteenable
	wire         read_fifo_capacity_s0_agent_m0_read;                                // read_fifo_capacity_s0_agent:m0_read -> read_fifo_capacity_s0_translator:uav_read
	wire         read_fifo_capacity_s0_agent_m0_readdatavalid;                       // read_fifo_capacity_s0_translator:uav_readdatavalid -> read_fifo_capacity_s0_agent:m0_readdatavalid
	wire         read_fifo_capacity_s0_agent_m0_lock;                                // read_fifo_capacity_s0_agent:m0_lock -> read_fifo_capacity_s0_translator:uav_lock
	wire  [31:0] read_fifo_capacity_s0_agent_m0_writedata;                           // read_fifo_capacity_s0_agent:m0_writedata -> read_fifo_capacity_s0_translator:uav_writedata
	wire         read_fifo_capacity_s0_agent_m0_write;                               // read_fifo_capacity_s0_agent:m0_write -> read_fifo_capacity_s0_translator:uav_write
	wire   [2:0] read_fifo_capacity_s0_agent_m0_burstcount;                          // read_fifo_capacity_s0_agent:m0_burstcount -> read_fifo_capacity_s0_translator:uav_burstcount
	wire         read_fifo_capacity_s0_agent_rf_source_valid;                        // read_fifo_capacity_s0_agent:rf_source_valid -> read_fifo_capacity_s0_agent_rsp_fifo:in_valid
	wire  [81:0] read_fifo_capacity_s0_agent_rf_source_data;                         // read_fifo_capacity_s0_agent:rf_source_data -> read_fifo_capacity_s0_agent_rsp_fifo:in_data
	wire         read_fifo_capacity_s0_agent_rf_source_ready;                        // read_fifo_capacity_s0_agent_rsp_fifo:in_ready -> read_fifo_capacity_s0_agent:rf_source_ready
	wire         read_fifo_capacity_s0_agent_rf_source_startofpacket;                // read_fifo_capacity_s0_agent:rf_source_startofpacket -> read_fifo_capacity_s0_agent_rsp_fifo:in_startofpacket
	wire         read_fifo_capacity_s0_agent_rf_source_endofpacket;                  // read_fifo_capacity_s0_agent:rf_source_endofpacket -> read_fifo_capacity_s0_agent_rsp_fifo:in_endofpacket
	wire         read_fifo_capacity_s0_agent_rsp_fifo_out_valid;                     // read_fifo_capacity_s0_agent_rsp_fifo:out_valid -> read_fifo_capacity_s0_agent:rf_sink_valid
	wire  [81:0] read_fifo_capacity_s0_agent_rsp_fifo_out_data;                      // read_fifo_capacity_s0_agent_rsp_fifo:out_data -> read_fifo_capacity_s0_agent:rf_sink_data
	wire         read_fifo_capacity_s0_agent_rsp_fifo_out_ready;                     // read_fifo_capacity_s0_agent:rf_sink_ready -> read_fifo_capacity_s0_agent_rsp_fifo:out_ready
	wire         read_fifo_capacity_s0_agent_rsp_fifo_out_startofpacket;             // read_fifo_capacity_s0_agent_rsp_fifo:out_startofpacket -> read_fifo_capacity_s0_agent:rf_sink_startofpacket
	wire         read_fifo_capacity_s0_agent_rsp_fifo_out_endofpacket;               // read_fifo_capacity_s0_agent_rsp_fifo:out_endofpacket -> read_fifo_capacity_s0_agent:rf_sink_endofpacket
	wire         cmd_mux_003_src_valid;                                              // cmd_mux_003:src_valid -> read_fifo_capacity_s0_agent:cp_valid
	wire  [80:0] cmd_mux_003_src_data;                                               // cmd_mux_003:src_data -> read_fifo_capacity_s0_agent:cp_data
	wire         cmd_mux_003_src_ready;                                              // read_fifo_capacity_s0_agent:cp_ready -> cmd_mux_003:src_ready
	wire   [7:0] cmd_mux_003_src_channel;                                            // cmd_mux_003:src_channel -> read_fifo_capacity_s0_agent:cp_channel
	wire         cmd_mux_003_src_startofpacket;                                      // cmd_mux_003:src_startofpacket -> read_fifo_capacity_s0_agent:cp_startofpacket
	wire         cmd_mux_003_src_endofpacket;                                        // cmd_mux_003:src_endofpacket -> read_fifo_capacity_s0_agent:cp_endofpacket
	wire  [31:0] write_slave_to_source_in_csr_agent_m0_readdata;                     // write_slave_to_source_in_csr_translator:uav_readdata -> write_slave_to_source_in_csr_agent:m0_readdata
	wire         write_slave_to_source_in_csr_agent_m0_waitrequest;                  // write_slave_to_source_in_csr_translator:uav_waitrequest -> write_slave_to_source_in_csr_agent:m0_waitrequest
	wire         write_slave_to_source_in_csr_agent_m0_debugaccess;                  // write_slave_to_source_in_csr_agent:m0_debugaccess -> write_slave_to_source_in_csr_translator:uav_debugaccess
	wire   [6:0] write_slave_to_source_in_csr_agent_m0_address;                      // write_slave_to_source_in_csr_agent:m0_address -> write_slave_to_source_in_csr_translator:uav_address
	wire   [3:0] write_slave_to_source_in_csr_agent_m0_byteenable;                   // write_slave_to_source_in_csr_agent:m0_byteenable -> write_slave_to_source_in_csr_translator:uav_byteenable
	wire         write_slave_to_source_in_csr_agent_m0_read;                         // write_slave_to_source_in_csr_agent:m0_read -> write_slave_to_source_in_csr_translator:uav_read
	wire         write_slave_to_source_in_csr_agent_m0_readdatavalid;                // write_slave_to_source_in_csr_translator:uav_readdatavalid -> write_slave_to_source_in_csr_agent:m0_readdatavalid
	wire         write_slave_to_source_in_csr_agent_m0_lock;                         // write_slave_to_source_in_csr_agent:m0_lock -> write_slave_to_source_in_csr_translator:uav_lock
	wire  [31:0] write_slave_to_source_in_csr_agent_m0_writedata;                    // write_slave_to_source_in_csr_agent:m0_writedata -> write_slave_to_source_in_csr_translator:uav_writedata
	wire         write_slave_to_source_in_csr_agent_m0_write;                        // write_slave_to_source_in_csr_agent:m0_write -> write_slave_to_source_in_csr_translator:uav_write
	wire   [2:0] write_slave_to_source_in_csr_agent_m0_burstcount;                   // write_slave_to_source_in_csr_agent:m0_burstcount -> write_slave_to_source_in_csr_translator:uav_burstcount
	wire         write_slave_to_source_in_csr_agent_rf_source_valid;                 // write_slave_to_source_in_csr_agent:rf_source_valid -> write_slave_to_source_in_csr_agent_rsp_fifo:in_valid
	wire  [81:0] write_slave_to_source_in_csr_agent_rf_source_data;                  // write_slave_to_source_in_csr_agent:rf_source_data -> write_slave_to_source_in_csr_agent_rsp_fifo:in_data
	wire         write_slave_to_source_in_csr_agent_rf_source_ready;                 // write_slave_to_source_in_csr_agent_rsp_fifo:in_ready -> write_slave_to_source_in_csr_agent:rf_source_ready
	wire         write_slave_to_source_in_csr_agent_rf_source_startofpacket;         // write_slave_to_source_in_csr_agent:rf_source_startofpacket -> write_slave_to_source_in_csr_agent_rsp_fifo:in_startofpacket
	wire         write_slave_to_source_in_csr_agent_rf_source_endofpacket;           // write_slave_to_source_in_csr_agent:rf_source_endofpacket -> write_slave_to_source_in_csr_agent_rsp_fifo:in_endofpacket
	wire         write_slave_to_source_in_csr_agent_rsp_fifo_out_valid;              // write_slave_to_source_in_csr_agent_rsp_fifo:out_valid -> write_slave_to_source_in_csr_agent:rf_sink_valid
	wire  [81:0] write_slave_to_source_in_csr_agent_rsp_fifo_out_data;               // write_slave_to_source_in_csr_agent_rsp_fifo:out_data -> write_slave_to_source_in_csr_agent:rf_sink_data
	wire         write_slave_to_source_in_csr_agent_rsp_fifo_out_ready;              // write_slave_to_source_in_csr_agent:rf_sink_ready -> write_slave_to_source_in_csr_agent_rsp_fifo:out_ready
	wire         write_slave_to_source_in_csr_agent_rsp_fifo_out_startofpacket;      // write_slave_to_source_in_csr_agent_rsp_fifo:out_startofpacket -> write_slave_to_source_in_csr_agent:rf_sink_startofpacket
	wire         write_slave_to_source_in_csr_agent_rsp_fifo_out_endofpacket;        // write_slave_to_source_in_csr_agent_rsp_fifo:out_endofpacket -> write_slave_to_source_in_csr_agent:rf_sink_endofpacket
	wire         cmd_mux_004_src_valid;                                              // cmd_mux_004:src_valid -> write_slave_to_source_in_csr_agent:cp_valid
	wire  [80:0] cmd_mux_004_src_data;                                               // cmd_mux_004:src_data -> write_slave_to_source_in_csr_agent:cp_data
	wire         cmd_mux_004_src_ready;                                              // write_slave_to_source_in_csr_agent:cp_ready -> cmd_mux_004:src_ready
	wire   [7:0] cmd_mux_004_src_channel;                                            // cmd_mux_004:src_channel -> write_slave_to_source_in_csr_agent:cp_channel
	wire         cmd_mux_004_src_startofpacket;                                      // cmd_mux_004:src_startofpacket -> write_slave_to_source_in_csr_agent:cp_startofpacket
	wire         cmd_mux_004_src_endofpacket;                                        // cmd_mux_004:src_endofpacket -> write_slave_to_source_in_csr_agent:cp_endofpacket
	wire  [31:0] sink_to_read_slave_in_csr_agent_m0_readdata;                        // sink_to_read_slave_in_csr_translator:uav_readdata -> sink_to_read_slave_in_csr_agent:m0_readdata
	wire         sink_to_read_slave_in_csr_agent_m0_waitrequest;                     // sink_to_read_slave_in_csr_translator:uav_waitrequest -> sink_to_read_slave_in_csr_agent:m0_waitrequest
	wire         sink_to_read_slave_in_csr_agent_m0_debugaccess;                     // sink_to_read_slave_in_csr_agent:m0_debugaccess -> sink_to_read_slave_in_csr_translator:uav_debugaccess
	wire   [6:0] sink_to_read_slave_in_csr_agent_m0_address;                         // sink_to_read_slave_in_csr_agent:m0_address -> sink_to_read_slave_in_csr_translator:uav_address
	wire   [3:0] sink_to_read_slave_in_csr_agent_m0_byteenable;                      // sink_to_read_slave_in_csr_agent:m0_byteenable -> sink_to_read_slave_in_csr_translator:uav_byteenable
	wire         sink_to_read_slave_in_csr_agent_m0_read;                            // sink_to_read_slave_in_csr_agent:m0_read -> sink_to_read_slave_in_csr_translator:uav_read
	wire         sink_to_read_slave_in_csr_agent_m0_readdatavalid;                   // sink_to_read_slave_in_csr_translator:uav_readdatavalid -> sink_to_read_slave_in_csr_agent:m0_readdatavalid
	wire         sink_to_read_slave_in_csr_agent_m0_lock;                            // sink_to_read_slave_in_csr_agent:m0_lock -> sink_to_read_slave_in_csr_translator:uav_lock
	wire  [31:0] sink_to_read_slave_in_csr_agent_m0_writedata;                       // sink_to_read_slave_in_csr_agent:m0_writedata -> sink_to_read_slave_in_csr_translator:uav_writedata
	wire         sink_to_read_slave_in_csr_agent_m0_write;                           // sink_to_read_slave_in_csr_agent:m0_write -> sink_to_read_slave_in_csr_translator:uav_write
	wire   [2:0] sink_to_read_slave_in_csr_agent_m0_burstcount;                      // sink_to_read_slave_in_csr_agent:m0_burstcount -> sink_to_read_slave_in_csr_translator:uav_burstcount
	wire         sink_to_read_slave_in_csr_agent_rf_source_valid;                    // sink_to_read_slave_in_csr_agent:rf_source_valid -> sink_to_read_slave_in_csr_agent_rsp_fifo:in_valid
	wire  [81:0] sink_to_read_slave_in_csr_agent_rf_source_data;                     // sink_to_read_slave_in_csr_agent:rf_source_data -> sink_to_read_slave_in_csr_agent_rsp_fifo:in_data
	wire         sink_to_read_slave_in_csr_agent_rf_source_ready;                    // sink_to_read_slave_in_csr_agent_rsp_fifo:in_ready -> sink_to_read_slave_in_csr_agent:rf_source_ready
	wire         sink_to_read_slave_in_csr_agent_rf_source_startofpacket;            // sink_to_read_slave_in_csr_agent:rf_source_startofpacket -> sink_to_read_slave_in_csr_agent_rsp_fifo:in_startofpacket
	wire         sink_to_read_slave_in_csr_agent_rf_source_endofpacket;              // sink_to_read_slave_in_csr_agent:rf_source_endofpacket -> sink_to_read_slave_in_csr_agent_rsp_fifo:in_endofpacket
	wire         sink_to_read_slave_in_csr_agent_rsp_fifo_out_valid;                 // sink_to_read_slave_in_csr_agent_rsp_fifo:out_valid -> sink_to_read_slave_in_csr_agent:rf_sink_valid
	wire  [81:0] sink_to_read_slave_in_csr_agent_rsp_fifo_out_data;                  // sink_to_read_slave_in_csr_agent_rsp_fifo:out_data -> sink_to_read_slave_in_csr_agent:rf_sink_data
	wire         sink_to_read_slave_in_csr_agent_rsp_fifo_out_ready;                 // sink_to_read_slave_in_csr_agent:rf_sink_ready -> sink_to_read_slave_in_csr_agent_rsp_fifo:out_ready
	wire         sink_to_read_slave_in_csr_agent_rsp_fifo_out_startofpacket;         // sink_to_read_slave_in_csr_agent_rsp_fifo:out_startofpacket -> sink_to_read_slave_in_csr_agent:rf_sink_startofpacket
	wire         sink_to_read_slave_in_csr_agent_rsp_fifo_out_endofpacket;           // sink_to_read_slave_in_csr_agent_rsp_fifo:out_endofpacket -> sink_to_read_slave_in_csr_agent:rf_sink_endofpacket
	wire         cmd_mux_005_src_valid;                                              // cmd_mux_005:src_valid -> sink_to_read_slave_in_csr_agent:cp_valid
	wire  [80:0] cmd_mux_005_src_data;                                               // cmd_mux_005:src_data -> sink_to_read_slave_in_csr_agent:cp_data
	wire         cmd_mux_005_src_ready;                                              // sink_to_read_slave_in_csr_agent:cp_ready -> cmd_mux_005:src_ready
	wire   [7:0] cmd_mux_005_src_channel;                                            // cmd_mux_005:src_channel -> sink_to_read_slave_in_csr_agent:cp_channel
	wire         cmd_mux_005_src_startofpacket;                                      // cmd_mux_005:src_startofpacket -> sink_to_read_slave_in_csr_agent:cp_startofpacket
	wire         cmd_mux_005_src_endofpacket;                                        // cmd_mux_005:src_endofpacket -> sink_to_read_slave_in_csr_agent:cp_endofpacket
	wire  [31:0] connection_id_rom_s0_agent_m0_readdata;                             // connection_id_rom_s0_translator:uav_readdata -> connection_id_rom_s0_agent:m0_readdata
	wire         connection_id_rom_s0_agent_m0_waitrequest;                          // connection_id_rom_s0_translator:uav_waitrequest -> connection_id_rom_s0_agent:m0_waitrequest
	wire         connection_id_rom_s0_agent_m0_debugaccess;                          // connection_id_rom_s0_agent:m0_debugaccess -> connection_id_rom_s0_translator:uav_debugaccess
	wire   [6:0] connection_id_rom_s0_agent_m0_address;                              // connection_id_rom_s0_agent:m0_address -> connection_id_rom_s0_translator:uav_address
	wire   [3:0] connection_id_rom_s0_agent_m0_byteenable;                           // connection_id_rom_s0_agent:m0_byteenable -> connection_id_rom_s0_translator:uav_byteenable
	wire         connection_id_rom_s0_agent_m0_read;                                 // connection_id_rom_s0_agent:m0_read -> connection_id_rom_s0_translator:uav_read
	wire         connection_id_rom_s0_agent_m0_readdatavalid;                        // connection_id_rom_s0_translator:uav_readdatavalid -> connection_id_rom_s0_agent:m0_readdatavalid
	wire         connection_id_rom_s0_agent_m0_lock;                                 // connection_id_rom_s0_agent:m0_lock -> connection_id_rom_s0_translator:uav_lock
	wire  [31:0] connection_id_rom_s0_agent_m0_writedata;                            // connection_id_rom_s0_agent:m0_writedata -> connection_id_rom_s0_translator:uav_writedata
	wire         connection_id_rom_s0_agent_m0_write;                                // connection_id_rom_s0_agent:m0_write -> connection_id_rom_s0_translator:uav_write
	wire   [2:0] connection_id_rom_s0_agent_m0_burstcount;                           // connection_id_rom_s0_agent:m0_burstcount -> connection_id_rom_s0_translator:uav_burstcount
	wire         connection_id_rom_s0_agent_rf_source_valid;                         // connection_id_rom_s0_agent:rf_source_valid -> connection_id_rom_s0_agent_rsp_fifo:in_valid
	wire  [81:0] connection_id_rom_s0_agent_rf_source_data;                          // connection_id_rom_s0_agent:rf_source_data -> connection_id_rom_s0_agent_rsp_fifo:in_data
	wire         connection_id_rom_s0_agent_rf_source_ready;                         // connection_id_rom_s0_agent_rsp_fifo:in_ready -> connection_id_rom_s0_agent:rf_source_ready
	wire         connection_id_rom_s0_agent_rf_source_startofpacket;                 // connection_id_rom_s0_agent:rf_source_startofpacket -> connection_id_rom_s0_agent_rsp_fifo:in_startofpacket
	wire         connection_id_rom_s0_agent_rf_source_endofpacket;                   // connection_id_rom_s0_agent:rf_source_endofpacket -> connection_id_rom_s0_agent_rsp_fifo:in_endofpacket
	wire         connection_id_rom_s0_agent_rsp_fifo_out_valid;                      // connection_id_rom_s0_agent_rsp_fifo:out_valid -> connection_id_rom_s0_agent:rf_sink_valid
	wire  [81:0] connection_id_rom_s0_agent_rsp_fifo_out_data;                       // connection_id_rom_s0_agent_rsp_fifo:out_data -> connection_id_rom_s0_agent:rf_sink_data
	wire         connection_id_rom_s0_agent_rsp_fifo_out_ready;                      // connection_id_rom_s0_agent:rf_sink_ready -> connection_id_rom_s0_agent_rsp_fifo:out_ready
	wire         connection_id_rom_s0_agent_rsp_fifo_out_startofpacket;              // connection_id_rom_s0_agent_rsp_fifo:out_startofpacket -> connection_id_rom_s0_agent:rf_sink_startofpacket
	wire         connection_id_rom_s0_agent_rsp_fifo_out_endofpacket;                // connection_id_rom_s0_agent_rsp_fifo:out_endofpacket -> connection_id_rom_s0_agent:rf_sink_endofpacket
	wire         cmd_mux_006_src_valid;                                              // cmd_mux_006:src_valid -> connection_id_rom_s0_agent:cp_valid
	wire  [80:0] cmd_mux_006_src_data;                                               // cmd_mux_006:src_data -> connection_id_rom_s0_agent:cp_data
	wire         cmd_mux_006_src_ready;                                              // connection_id_rom_s0_agent:cp_ready -> cmd_mux_006:src_ready
	wire   [7:0] cmd_mux_006_src_channel;                                            // cmd_mux_006:src_channel -> connection_id_rom_s0_agent:cp_channel
	wire         cmd_mux_006_src_startofpacket;                                      // cmd_mux_006:src_startofpacket -> connection_id_rom_s0_agent:cp_startofpacket
	wire         cmd_mux_006_src_endofpacket;                                        // cmd_mux_006:src_endofpacket -> connection_id_rom_s0_agent:cp_endofpacket
	wire  [31:0] mm_mgmt_csr_agent_m0_readdata;                                      // mm_mgmt_csr_translator:uav_readdata -> mm_mgmt_csr_agent:m0_readdata
	wire         mm_mgmt_csr_agent_m0_waitrequest;                                   // mm_mgmt_csr_translator:uav_waitrequest -> mm_mgmt_csr_agent:m0_waitrequest
	wire         mm_mgmt_csr_agent_m0_debugaccess;                                   // mm_mgmt_csr_agent:m0_debugaccess -> mm_mgmt_csr_translator:uav_debugaccess
	wire   [6:0] mm_mgmt_csr_agent_m0_address;                                       // mm_mgmt_csr_agent:m0_address -> mm_mgmt_csr_translator:uav_address
	wire   [3:0] mm_mgmt_csr_agent_m0_byteenable;                                    // mm_mgmt_csr_agent:m0_byteenable -> mm_mgmt_csr_translator:uav_byteenable
	wire         mm_mgmt_csr_agent_m0_read;                                          // mm_mgmt_csr_agent:m0_read -> mm_mgmt_csr_translator:uav_read
	wire         mm_mgmt_csr_agent_m0_readdatavalid;                                 // mm_mgmt_csr_translator:uav_readdatavalid -> mm_mgmt_csr_agent:m0_readdatavalid
	wire         mm_mgmt_csr_agent_m0_lock;                                          // mm_mgmt_csr_agent:m0_lock -> mm_mgmt_csr_translator:uav_lock
	wire  [31:0] mm_mgmt_csr_agent_m0_writedata;                                     // mm_mgmt_csr_agent:m0_writedata -> mm_mgmt_csr_translator:uav_writedata
	wire         mm_mgmt_csr_agent_m0_write;                                         // mm_mgmt_csr_agent:m0_write -> mm_mgmt_csr_translator:uav_write
	wire   [2:0] mm_mgmt_csr_agent_m0_burstcount;                                    // mm_mgmt_csr_agent:m0_burstcount -> mm_mgmt_csr_translator:uav_burstcount
	wire         mm_mgmt_csr_agent_rf_source_valid;                                  // mm_mgmt_csr_agent:rf_source_valid -> mm_mgmt_csr_agent_rsp_fifo:in_valid
	wire  [81:0] mm_mgmt_csr_agent_rf_source_data;                                   // mm_mgmt_csr_agent:rf_source_data -> mm_mgmt_csr_agent_rsp_fifo:in_data
	wire         mm_mgmt_csr_agent_rf_source_ready;                                  // mm_mgmt_csr_agent_rsp_fifo:in_ready -> mm_mgmt_csr_agent:rf_source_ready
	wire         mm_mgmt_csr_agent_rf_source_startofpacket;                          // mm_mgmt_csr_agent:rf_source_startofpacket -> mm_mgmt_csr_agent_rsp_fifo:in_startofpacket
	wire         mm_mgmt_csr_agent_rf_source_endofpacket;                            // mm_mgmt_csr_agent:rf_source_endofpacket -> mm_mgmt_csr_agent_rsp_fifo:in_endofpacket
	wire         mm_mgmt_csr_agent_rsp_fifo_out_valid;                               // mm_mgmt_csr_agent_rsp_fifo:out_valid -> mm_mgmt_csr_agent:rf_sink_valid
	wire  [81:0] mm_mgmt_csr_agent_rsp_fifo_out_data;                                // mm_mgmt_csr_agent_rsp_fifo:out_data -> mm_mgmt_csr_agent:rf_sink_data
	wire         mm_mgmt_csr_agent_rsp_fifo_out_ready;                               // mm_mgmt_csr_agent:rf_sink_ready -> mm_mgmt_csr_agent_rsp_fifo:out_ready
	wire         mm_mgmt_csr_agent_rsp_fifo_out_startofpacket;                       // mm_mgmt_csr_agent_rsp_fifo:out_startofpacket -> mm_mgmt_csr_agent:rf_sink_startofpacket
	wire         mm_mgmt_csr_agent_rsp_fifo_out_endofpacket;                         // mm_mgmt_csr_agent_rsp_fifo:out_endofpacket -> mm_mgmt_csr_agent:rf_sink_endofpacket
	wire         cmd_mux_007_src_valid;                                              // cmd_mux_007:src_valid -> mm_mgmt_csr_agent:cp_valid
	wire  [80:0] cmd_mux_007_src_data;                                               // cmd_mux_007:src_data -> mm_mgmt_csr_agent:cp_data
	wire         cmd_mux_007_src_ready;                                              // mm_mgmt_csr_agent:cp_ready -> cmd_mux_007:src_ready
	wire   [7:0] cmd_mux_007_src_channel;                                            // cmd_mux_007:src_channel -> mm_mgmt_csr_agent:cp_channel
	wire         cmd_mux_007_src_startofpacket;                                      // cmd_mux_007:src_startofpacket -> mm_mgmt_csr_agent:cp_startofpacket
	wire         cmd_mux_007_src_endofpacket;                                        // cmd_mux_007:src_endofpacket -> mm_mgmt_csr_agent:cp_endofpacket
	wire         export_slave_m0_agent_cp_valid;                                     // export_slave_m0_agent:cp_valid -> router:sink_valid
	wire  [80:0] export_slave_m0_agent_cp_data;                                      // export_slave_m0_agent:cp_data -> router:sink_data
	wire         export_slave_m0_agent_cp_ready;                                     // router:sink_ready -> export_slave_m0_agent:cp_ready
	wire         export_slave_m0_agent_cp_startofpacket;                             // export_slave_m0_agent:cp_startofpacket -> router:sink_startofpacket
	wire         export_slave_m0_agent_cp_endofpacket;                               // export_slave_m0_agent:cp_endofpacket -> router:sink_endofpacket
	wire         write_slave_addr_fixer_s0_agent_rp_valid;                           // write_slave_addr_fixer_s0_agent:rp_valid -> router_001:sink_valid
	wire  [80:0] write_slave_addr_fixer_s0_agent_rp_data;                            // write_slave_addr_fixer_s0_agent:rp_data -> router_001:sink_data
	wire         write_slave_addr_fixer_s0_agent_rp_ready;                           // router_001:sink_ready -> write_slave_addr_fixer_s0_agent:rp_ready
	wire         write_slave_addr_fixer_s0_agent_rp_startofpacket;                   // write_slave_addr_fixer_s0_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire         write_slave_addr_fixer_s0_agent_rp_endofpacket;                     // write_slave_addr_fixer_s0_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire         router_001_src_valid;                                               // router_001:src_valid -> rsp_demux:sink_valid
	wire  [80:0] router_001_src_data;                                                // router_001:src_data -> rsp_demux:sink_data
	wire         router_001_src_ready;                                               // rsp_demux:sink_ready -> router_001:src_ready
	wire   [7:0] router_001_src_channel;                                             // router_001:src_channel -> rsp_demux:sink_channel
	wire         router_001_src_startofpacket;                                       // router_001:src_startofpacket -> rsp_demux:sink_startofpacket
	wire         router_001_src_endofpacket;                                         // router_001:src_endofpacket -> rsp_demux:sink_endofpacket
	wire         write_fifo_capacity_s0_agent_rp_valid;                              // write_fifo_capacity_s0_agent:rp_valid -> router_002:sink_valid
	wire  [80:0] write_fifo_capacity_s0_agent_rp_data;                               // write_fifo_capacity_s0_agent:rp_data -> router_002:sink_data
	wire         write_fifo_capacity_s0_agent_rp_ready;                              // router_002:sink_ready -> write_fifo_capacity_s0_agent:rp_ready
	wire         write_fifo_capacity_s0_agent_rp_startofpacket;                      // write_fifo_capacity_s0_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire         write_fifo_capacity_s0_agent_rp_endofpacket;                        // write_fifo_capacity_s0_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire         router_002_src_valid;                                               // router_002:src_valid -> rsp_demux_001:sink_valid
	wire  [80:0] router_002_src_data;                                                // router_002:src_data -> rsp_demux_001:sink_data
	wire         router_002_src_ready;                                               // rsp_demux_001:sink_ready -> router_002:src_ready
	wire   [7:0] router_002_src_channel;                                             // router_002:src_channel -> rsp_demux_001:sink_channel
	wire         router_002_src_startofpacket;                                       // router_002:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire         router_002_src_endofpacket;                                         // router_002:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire         read_slave_addr_fixer_s0_agent_rp_valid;                            // read_slave_addr_fixer_s0_agent:rp_valid -> router_003:sink_valid
	wire  [80:0] read_slave_addr_fixer_s0_agent_rp_data;                             // read_slave_addr_fixer_s0_agent:rp_data -> router_003:sink_data
	wire         read_slave_addr_fixer_s0_agent_rp_ready;                            // router_003:sink_ready -> read_slave_addr_fixer_s0_agent:rp_ready
	wire         read_slave_addr_fixer_s0_agent_rp_startofpacket;                    // read_slave_addr_fixer_s0_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire         read_slave_addr_fixer_s0_agent_rp_endofpacket;                      // read_slave_addr_fixer_s0_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire         router_003_src_valid;                                               // router_003:src_valid -> rsp_demux_002:sink_valid
	wire  [80:0] router_003_src_data;                                                // router_003:src_data -> rsp_demux_002:sink_data
	wire         router_003_src_ready;                                               // rsp_demux_002:sink_ready -> router_003:src_ready
	wire   [7:0] router_003_src_channel;                                             // router_003:src_channel -> rsp_demux_002:sink_channel
	wire         router_003_src_startofpacket;                                       // router_003:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire         router_003_src_endofpacket;                                         // router_003:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire         read_fifo_capacity_s0_agent_rp_valid;                               // read_fifo_capacity_s0_agent:rp_valid -> router_004:sink_valid
	wire  [80:0] read_fifo_capacity_s0_agent_rp_data;                                // read_fifo_capacity_s0_agent:rp_data -> router_004:sink_data
	wire         read_fifo_capacity_s0_agent_rp_ready;                               // router_004:sink_ready -> read_fifo_capacity_s0_agent:rp_ready
	wire         read_fifo_capacity_s0_agent_rp_startofpacket;                       // read_fifo_capacity_s0_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire         read_fifo_capacity_s0_agent_rp_endofpacket;                         // read_fifo_capacity_s0_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire         router_004_src_valid;                                               // router_004:src_valid -> rsp_demux_003:sink_valid
	wire  [80:0] router_004_src_data;                                                // router_004:src_data -> rsp_demux_003:sink_data
	wire         router_004_src_ready;                                               // rsp_demux_003:sink_ready -> router_004:src_ready
	wire   [7:0] router_004_src_channel;                                             // router_004:src_channel -> rsp_demux_003:sink_channel
	wire         router_004_src_startofpacket;                                       // router_004:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire         router_004_src_endofpacket;                                         // router_004:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire         write_slave_to_source_in_csr_agent_rp_valid;                        // write_slave_to_source_in_csr_agent:rp_valid -> router_005:sink_valid
	wire  [80:0] write_slave_to_source_in_csr_agent_rp_data;                         // write_slave_to_source_in_csr_agent:rp_data -> router_005:sink_data
	wire         write_slave_to_source_in_csr_agent_rp_ready;                        // router_005:sink_ready -> write_slave_to_source_in_csr_agent:rp_ready
	wire         write_slave_to_source_in_csr_agent_rp_startofpacket;                // write_slave_to_source_in_csr_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire         write_slave_to_source_in_csr_agent_rp_endofpacket;                  // write_slave_to_source_in_csr_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire         router_005_src_valid;                                               // router_005:src_valid -> rsp_demux_004:sink_valid
	wire  [80:0] router_005_src_data;                                                // router_005:src_data -> rsp_demux_004:sink_data
	wire         router_005_src_ready;                                               // rsp_demux_004:sink_ready -> router_005:src_ready
	wire   [7:0] router_005_src_channel;                                             // router_005:src_channel -> rsp_demux_004:sink_channel
	wire         router_005_src_startofpacket;                                       // router_005:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire         router_005_src_endofpacket;                                         // router_005:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire         sink_to_read_slave_in_csr_agent_rp_valid;                           // sink_to_read_slave_in_csr_agent:rp_valid -> router_006:sink_valid
	wire  [80:0] sink_to_read_slave_in_csr_agent_rp_data;                            // sink_to_read_slave_in_csr_agent:rp_data -> router_006:sink_data
	wire         sink_to_read_slave_in_csr_agent_rp_ready;                           // router_006:sink_ready -> sink_to_read_slave_in_csr_agent:rp_ready
	wire         sink_to_read_slave_in_csr_agent_rp_startofpacket;                   // sink_to_read_slave_in_csr_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire         sink_to_read_slave_in_csr_agent_rp_endofpacket;                     // sink_to_read_slave_in_csr_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire         router_006_src_valid;                                               // router_006:src_valid -> rsp_demux_005:sink_valid
	wire  [80:0] router_006_src_data;                                                // router_006:src_data -> rsp_demux_005:sink_data
	wire         router_006_src_ready;                                               // rsp_demux_005:sink_ready -> router_006:src_ready
	wire   [7:0] router_006_src_channel;                                             // router_006:src_channel -> rsp_demux_005:sink_channel
	wire         router_006_src_startofpacket;                                       // router_006:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire         router_006_src_endofpacket;                                         // router_006:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire         connection_id_rom_s0_agent_rp_valid;                                // connection_id_rom_s0_agent:rp_valid -> router_007:sink_valid
	wire  [80:0] connection_id_rom_s0_agent_rp_data;                                 // connection_id_rom_s0_agent:rp_data -> router_007:sink_data
	wire         connection_id_rom_s0_agent_rp_ready;                                // router_007:sink_ready -> connection_id_rom_s0_agent:rp_ready
	wire         connection_id_rom_s0_agent_rp_startofpacket;                        // connection_id_rom_s0_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire         connection_id_rom_s0_agent_rp_endofpacket;                          // connection_id_rom_s0_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire         router_007_src_valid;                                               // router_007:src_valid -> rsp_demux_006:sink_valid
	wire  [80:0] router_007_src_data;                                                // router_007:src_data -> rsp_demux_006:sink_data
	wire         router_007_src_ready;                                               // rsp_demux_006:sink_ready -> router_007:src_ready
	wire   [7:0] router_007_src_channel;                                             // router_007:src_channel -> rsp_demux_006:sink_channel
	wire         router_007_src_startofpacket;                                       // router_007:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire         router_007_src_endofpacket;                                         // router_007:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire         mm_mgmt_csr_agent_rp_valid;                                         // mm_mgmt_csr_agent:rp_valid -> router_008:sink_valid
	wire  [80:0] mm_mgmt_csr_agent_rp_data;                                          // mm_mgmt_csr_agent:rp_data -> router_008:sink_data
	wire         mm_mgmt_csr_agent_rp_ready;                                         // router_008:sink_ready -> mm_mgmt_csr_agent:rp_ready
	wire         mm_mgmt_csr_agent_rp_startofpacket;                                 // mm_mgmt_csr_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire         mm_mgmt_csr_agent_rp_endofpacket;                                   // mm_mgmt_csr_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire         router_008_src_valid;                                               // router_008:src_valid -> rsp_demux_007:sink_valid
	wire  [80:0] router_008_src_data;                                                // router_008:src_data -> rsp_demux_007:sink_data
	wire         router_008_src_ready;                                               // rsp_demux_007:sink_ready -> router_008:src_ready
	wire   [7:0] router_008_src_channel;                                             // router_008:src_channel -> rsp_demux_007:sink_channel
	wire         router_008_src_startofpacket;                                       // router_008:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire         router_008_src_endofpacket;                                         // router_008:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire         router_src_valid;                                                   // router:src_valid -> export_slave_m0_limiter:cmd_sink_valid
	wire  [80:0] router_src_data;                                                    // router:src_data -> export_slave_m0_limiter:cmd_sink_data
	wire         router_src_ready;                                                   // export_slave_m0_limiter:cmd_sink_ready -> router:src_ready
	wire   [7:0] router_src_channel;                                                 // router:src_channel -> export_slave_m0_limiter:cmd_sink_channel
	wire         router_src_startofpacket;                                           // router:src_startofpacket -> export_slave_m0_limiter:cmd_sink_startofpacket
	wire         router_src_endofpacket;                                             // router:src_endofpacket -> export_slave_m0_limiter:cmd_sink_endofpacket
	wire  [80:0] export_slave_m0_limiter_cmd_src_data;                               // export_slave_m0_limiter:cmd_src_data -> cmd_demux:sink_data
	wire         export_slave_m0_limiter_cmd_src_ready;                              // cmd_demux:sink_ready -> export_slave_m0_limiter:cmd_src_ready
	wire   [7:0] export_slave_m0_limiter_cmd_src_channel;                            // export_slave_m0_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire         export_slave_m0_limiter_cmd_src_startofpacket;                      // export_slave_m0_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire         export_slave_m0_limiter_cmd_src_endofpacket;                        // export_slave_m0_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire         rsp_mux_src_valid;                                                  // rsp_mux:src_valid -> export_slave_m0_limiter:rsp_sink_valid
	wire  [80:0] rsp_mux_src_data;                                                   // rsp_mux:src_data -> export_slave_m0_limiter:rsp_sink_data
	wire         rsp_mux_src_ready;                                                  // export_slave_m0_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire   [7:0] rsp_mux_src_channel;                                                // rsp_mux:src_channel -> export_slave_m0_limiter:rsp_sink_channel
	wire         rsp_mux_src_startofpacket;                                          // rsp_mux:src_startofpacket -> export_slave_m0_limiter:rsp_sink_startofpacket
	wire         rsp_mux_src_endofpacket;                                            // rsp_mux:src_endofpacket -> export_slave_m0_limiter:rsp_sink_endofpacket
	wire         export_slave_m0_limiter_rsp_src_valid;                              // export_slave_m0_limiter:rsp_src_valid -> export_slave_m0_agent:rp_valid
	wire  [80:0] export_slave_m0_limiter_rsp_src_data;                               // export_slave_m0_limiter:rsp_src_data -> export_slave_m0_agent:rp_data
	wire         export_slave_m0_limiter_rsp_src_ready;                              // export_slave_m0_agent:rp_ready -> export_slave_m0_limiter:rsp_src_ready
	wire   [7:0] export_slave_m0_limiter_rsp_src_channel;                            // export_slave_m0_limiter:rsp_src_channel -> export_slave_m0_agent:rp_channel
	wire         export_slave_m0_limiter_rsp_src_startofpacket;                      // export_slave_m0_limiter:rsp_src_startofpacket -> export_slave_m0_agent:rp_startofpacket
	wire         export_slave_m0_limiter_rsp_src_endofpacket;                        // export_slave_m0_limiter:rsp_src_endofpacket -> export_slave_m0_agent:rp_endofpacket
	wire         cmd_demux_src0_valid;                                               // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [80:0] cmd_demux_src0_data;                                                // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire         cmd_demux_src0_ready;                                               // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [7:0] cmd_demux_src0_channel;                                             // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire         cmd_demux_src0_startofpacket;                                       // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire         cmd_demux_src0_endofpacket;                                         // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire         cmd_demux_src1_valid;                                               // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [80:0] cmd_demux_src1_data;                                                // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire         cmd_demux_src1_ready;                                               // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire   [7:0] cmd_demux_src1_channel;                                             // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire         cmd_demux_src1_startofpacket;                                       // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire         cmd_demux_src1_endofpacket;                                         // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire         cmd_demux_src2_valid;                                               // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [80:0] cmd_demux_src2_data;                                                // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire         cmd_demux_src2_ready;                                               // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire   [7:0] cmd_demux_src2_channel;                                             // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire         cmd_demux_src2_startofpacket;                                       // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire         cmd_demux_src2_endofpacket;                                         // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire         cmd_demux_src3_valid;                                               // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [80:0] cmd_demux_src3_data;                                                // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire         cmd_demux_src3_ready;                                               // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire   [7:0] cmd_demux_src3_channel;                                             // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire         cmd_demux_src3_startofpacket;                                       // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire         cmd_demux_src3_endofpacket;                                         // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire         cmd_demux_src4_valid;                                               // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [80:0] cmd_demux_src4_data;                                                // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire         cmd_demux_src4_ready;                                               // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire   [7:0] cmd_demux_src4_channel;                                             // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire         cmd_demux_src4_startofpacket;                                       // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire         cmd_demux_src4_endofpacket;                                         // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire         cmd_demux_src5_valid;                                               // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [80:0] cmd_demux_src5_data;                                                // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire         cmd_demux_src5_ready;                                               // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire   [7:0] cmd_demux_src5_channel;                                             // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire         cmd_demux_src5_startofpacket;                                       // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire         cmd_demux_src5_endofpacket;                                         // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire         cmd_demux_src6_valid;                                               // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [80:0] cmd_demux_src6_data;                                                // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire         cmd_demux_src6_ready;                                               // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire   [7:0] cmd_demux_src6_channel;                                             // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire         cmd_demux_src6_startofpacket;                                       // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire         cmd_demux_src6_endofpacket;                                         // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire         cmd_demux_src7_valid;                                               // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [80:0] cmd_demux_src7_data;                                                // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire         cmd_demux_src7_ready;                                               // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire   [7:0] cmd_demux_src7_channel;                                             // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire         cmd_demux_src7_startofpacket;                                       // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire         cmd_demux_src7_endofpacket;                                         // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire         rsp_demux_src0_valid;                                               // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [80:0] rsp_demux_src0_data;                                                // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire         rsp_demux_src0_ready;                                               // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [7:0] rsp_demux_src0_channel;                                             // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire         rsp_demux_src0_startofpacket;                                       // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire         rsp_demux_src0_endofpacket;                                         // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire         rsp_demux_001_src0_valid;                                           // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [80:0] rsp_demux_001_src0_data;                                            // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire         rsp_demux_001_src0_ready;                                           // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire   [7:0] rsp_demux_001_src0_channel;                                         // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire         rsp_demux_001_src0_startofpacket;                                   // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire         rsp_demux_001_src0_endofpacket;                                     // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire         rsp_demux_002_src0_valid;                                           // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [80:0] rsp_demux_002_src0_data;                                            // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire         rsp_demux_002_src0_ready;                                           // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire   [7:0] rsp_demux_002_src0_channel;                                         // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire         rsp_demux_002_src0_startofpacket;                                   // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire         rsp_demux_002_src0_endofpacket;                                     // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire         rsp_demux_003_src0_valid;                                           // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [80:0] rsp_demux_003_src0_data;                                            // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire         rsp_demux_003_src0_ready;                                           // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire   [7:0] rsp_demux_003_src0_channel;                                         // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire         rsp_demux_003_src0_startofpacket;                                   // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire         rsp_demux_003_src0_endofpacket;                                     // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire         rsp_demux_004_src0_valid;                                           // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [80:0] rsp_demux_004_src0_data;                                            // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire         rsp_demux_004_src0_ready;                                           // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire   [7:0] rsp_demux_004_src0_channel;                                         // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire         rsp_demux_004_src0_startofpacket;                                   // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire         rsp_demux_004_src0_endofpacket;                                     // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire         rsp_demux_005_src0_valid;                                           // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [80:0] rsp_demux_005_src0_data;                                            // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire         rsp_demux_005_src0_ready;                                           // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire   [7:0] rsp_demux_005_src0_channel;                                         // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire         rsp_demux_005_src0_startofpacket;                                   // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire         rsp_demux_005_src0_endofpacket;                                     // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire         rsp_demux_006_src0_valid;                                           // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [80:0] rsp_demux_006_src0_data;                                            // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire         rsp_demux_006_src0_ready;                                           // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire   [7:0] rsp_demux_006_src0_channel;                                         // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire         rsp_demux_006_src0_startofpacket;                                   // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire         rsp_demux_006_src0_endofpacket;                                     // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire         rsp_demux_007_src0_valid;                                           // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [80:0] rsp_demux_007_src0_data;                                            // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire         rsp_demux_007_src0_ready;                                           // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire   [7:0] rsp_demux_007_src0_channel;                                         // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire         rsp_demux_007_src0_startofpacket;                                   // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire         rsp_demux_007_src0_endofpacket;                                     // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire   [7:0] export_slave_m0_limiter_cmd_valid_data;                             // export_slave_m0_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire         write_slave_addr_fixer_s0_agent_rdata_fifo_src_valid;               // write_slave_addr_fixer_s0_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire  [33:0] write_slave_addr_fixer_s0_agent_rdata_fifo_src_data;                // write_slave_addr_fixer_s0_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire         write_slave_addr_fixer_s0_agent_rdata_fifo_src_ready;               // avalon_st_adapter:in_0_ready -> write_slave_addr_fixer_s0_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_out_0_valid;                                      // avalon_st_adapter:out_0_valid -> write_slave_addr_fixer_s0_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_out_0_data;                                       // avalon_st_adapter:out_0_data -> write_slave_addr_fixer_s0_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_out_0_ready;                                      // write_slave_addr_fixer_s0_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire   [0:0] avalon_st_adapter_out_0_error;                                      // avalon_st_adapter:out_0_error -> write_slave_addr_fixer_s0_agent:rdata_fifo_sink_error
	wire         write_fifo_capacity_s0_agent_rdata_fifo_src_valid;                  // write_fifo_capacity_s0_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire  [33:0] write_fifo_capacity_s0_agent_rdata_fifo_src_data;                   // write_fifo_capacity_s0_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire         write_fifo_capacity_s0_agent_rdata_fifo_src_ready;                  // avalon_st_adapter_001:in_0_ready -> write_fifo_capacity_s0_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_001_out_0_valid;                                  // avalon_st_adapter_001:out_0_valid -> write_fifo_capacity_s0_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_001_out_0_data;                                   // avalon_st_adapter_001:out_0_data -> write_fifo_capacity_s0_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_001_out_0_ready;                                  // write_fifo_capacity_s0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire   [0:0] avalon_st_adapter_001_out_0_error;                                  // avalon_st_adapter_001:out_0_error -> write_fifo_capacity_s0_agent:rdata_fifo_sink_error
	wire         read_slave_addr_fixer_s0_agent_rdata_fifo_src_valid;                // read_slave_addr_fixer_s0_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire  [33:0] read_slave_addr_fixer_s0_agent_rdata_fifo_src_data;                 // read_slave_addr_fixer_s0_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire         read_slave_addr_fixer_s0_agent_rdata_fifo_src_ready;                // avalon_st_adapter_002:in_0_ready -> read_slave_addr_fixer_s0_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_002_out_0_valid;                                  // avalon_st_adapter_002:out_0_valid -> read_slave_addr_fixer_s0_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_002_out_0_data;                                   // avalon_st_adapter_002:out_0_data -> read_slave_addr_fixer_s0_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_002_out_0_ready;                                  // read_slave_addr_fixer_s0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire   [0:0] avalon_st_adapter_002_out_0_error;                                  // avalon_st_adapter_002:out_0_error -> read_slave_addr_fixer_s0_agent:rdata_fifo_sink_error
	wire         read_fifo_capacity_s0_agent_rdata_fifo_src_valid;                   // read_fifo_capacity_s0_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire  [33:0] read_fifo_capacity_s0_agent_rdata_fifo_src_data;                    // read_fifo_capacity_s0_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire         read_fifo_capacity_s0_agent_rdata_fifo_src_ready;                   // avalon_st_adapter_003:in_0_ready -> read_fifo_capacity_s0_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_003_out_0_valid;                                  // avalon_st_adapter_003:out_0_valid -> read_fifo_capacity_s0_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_003_out_0_data;                                   // avalon_st_adapter_003:out_0_data -> read_fifo_capacity_s0_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_003_out_0_ready;                                  // read_fifo_capacity_s0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire   [0:0] avalon_st_adapter_003_out_0_error;                                  // avalon_st_adapter_003:out_0_error -> read_fifo_capacity_s0_agent:rdata_fifo_sink_error
	wire         write_slave_to_source_in_csr_agent_rdata_fifo_src_valid;            // write_slave_to_source_in_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire  [33:0] write_slave_to_source_in_csr_agent_rdata_fifo_src_data;             // write_slave_to_source_in_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire         write_slave_to_source_in_csr_agent_rdata_fifo_src_ready;            // avalon_st_adapter_004:in_0_ready -> write_slave_to_source_in_csr_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_004_out_0_valid;                                  // avalon_st_adapter_004:out_0_valid -> write_slave_to_source_in_csr_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_004_out_0_data;                                   // avalon_st_adapter_004:out_0_data -> write_slave_to_source_in_csr_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_004_out_0_ready;                                  // write_slave_to_source_in_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire   [0:0] avalon_st_adapter_004_out_0_error;                                  // avalon_st_adapter_004:out_0_error -> write_slave_to_source_in_csr_agent:rdata_fifo_sink_error
	wire         sink_to_read_slave_in_csr_agent_rdata_fifo_src_valid;               // sink_to_read_slave_in_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_005:in_0_valid
	wire  [33:0] sink_to_read_slave_in_csr_agent_rdata_fifo_src_data;                // sink_to_read_slave_in_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_005:in_0_data
	wire         sink_to_read_slave_in_csr_agent_rdata_fifo_src_ready;               // avalon_st_adapter_005:in_0_ready -> sink_to_read_slave_in_csr_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_005_out_0_valid;                                  // avalon_st_adapter_005:out_0_valid -> sink_to_read_slave_in_csr_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_005_out_0_data;                                   // avalon_st_adapter_005:out_0_data -> sink_to_read_slave_in_csr_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_005_out_0_ready;                                  // sink_to_read_slave_in_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire   [0:0] avalon_st_adapter_005_out_0_error;                                  // avalon_st_adapter_005:out_0_error -> sink_to_read_slave_in_csr_agent:rdata_fifo_sink_error
	wire         connection_id_rom_s0_agent_rdata_fifo_src_valid;                    // connection_id_rom_s0_agent:rdata_fifo_src_valid -> avalon_st_adapter_006:in_0_valid
	wire  [33:0] connection_id_rom_s0_agent_rdata_fifo_src_data;                     // connection_id_rom_s0_agent:rdata_fifo_src_data -> avalon_st_adapter_006:in_0_data
	wire         connection_id_rom_s0_agent_rdata_fifo_src_ready;                    // avalon_st_adapter_006:in_0_ready -> connection_id_rom_s0_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_006_out_0_valid;                                  // avalon_st_adapter_006:out_0_valid -> connection_id_rom_s0_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_006_out_0_data;                                   // avalon_st_adapter_006:out_0_data -> connection_id_rom_s0_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_006_out_0_ready;                                  // connection_id_rom_s0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire   [0:0] avalon_st_adapter_006_out_0_error;                                  // avalon_st_adapter_006:out_0_error -> connection_id_rom_s0_agent:rdata_fifo_sink_error
	wire         mm_mgmt_csr_agent_rdata_fifo_src_valid;                             // mm_mgmt_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_007:in_0_valid
	wire  [33:0] mm_mgmt_csr_agent_rdata_fifo_src_data;                              // mm_mgmt_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_007:in_0_data
	wire         mm_mgmt_csr_agent_rdata_fifo_src_ready;                             // avalon_st_adapter_007:in_0_ready -> mm_mgmt_csr_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_007_out_0_valid;                                  // avalon_st_adapter_007:out_0_valid -> mm_mgmt_csr_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_007_out_0_data;                                   // avalon_st_adapter_007:out_0_data -> mm_mgmt_csr_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_007_out_0_ready;                                  // mm_mgmt_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire   [0:0] avalon_st_adapter_007_out_0_error;                                  // avalon_st_adapter_007:out_0_error -> mm_mgmt_csr_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (7),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (7),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) export_slave_m0_translator (
		.clk                    (clock_bridge_out_clk_clk),                                           //                       clk.clk
		.reset                  (export_slave_reset_reset_bridge_in_reset_reset),                     //                     reset.reset
		.uav_address            (export_slave_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (export_slave_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (export_slave_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (export_slave_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (export_slave_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (export_slave_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (export_slave_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (export_slave_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (export_slave_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (export_slave_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (export_slave_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (export_slave_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (export_slave_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (export_slave_m0_burstcount),                                         //                          .burstcount
		.av_byteenable          (export_slave_m0_byteenable),                                         //                          .byteenable
		.av_read                (export_slave_m0_read),                                               //                          .read
		.av_readdata            (export_slave_m0_readdata),                                           //                          .readdata
		.av_readdatavalid       (export_slave_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write               (export_slave_m0_write),                                              //                          .write
		.av_writedata           (export_slave_m0_writedata),                                          //                          .writedata
		.av_debugaccess         (export_slave_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                               //               (terminated)
		.av_begintransfer       (1'b0),                                                               //               (terminated)
		.av_chipselect          (1'b0),                                                               //               (terminated)
		.av_lock                (1'b0),                                                               //               (terminated)
		.uav_clken              (),                                                                   //               (terminated)
		.av_clken               (1'b1),                                                               //               (terminated)
		.uav_response           (2'b00),                                                              //               (terminated)
		.av_response            (),                                                                   //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                               //               (terminated)
		.av_writeresponsevalid  ()                                                                    //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (7),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) write_slave_addr_fixer_s0_translator (
		.clk                    (clock_bridge_out_clk_clk),                         //                      clk.clk
		.reset                  (export_slave_reset_reset_bridge_in_reset_reset),   //                    reset.reset
		.uav_address            (write_slave_addr_fixer_s0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (write_slave_addr_fixer_s0_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (write_slave_addr_fixer_s0_agent_m0_read),          //                         .read
		.uav_write              (write_slave_addr_fixer_s0_agent_m0_write),         //                         .write
		.uav_waitrequest        (write_slave_addr_fixer_s0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (write_slave_addr_fixer_s0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (write_slave_addr_fixer_s0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (write_slave_addr_fixer_s0_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (write_slave_addr_fixer_s0_agent_m0_writedata),     //                         .writedata
		.uav_lock               (write_slave_addr_fixer_s0_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (write_slave_addr_fixer_s0_agent_m0_debugaccess),   //                         .debugaccess
		.av_write               (write_slave_addr_fixer_s0_write),                  //      avalon_anti_slave_0.write
		.av_read                (write_slave_addr_fixer_s0_read),                   //                         .read
		.av_readdata            (write_slave_addr_fixer_s0_readdata),               //                         .readdata
		.av_writedata           (write_slave_addr_fixer_s0_writedata),              //                         .writedata
		.av_waitrequest         (write_slave_addr_fixer_s0_waitrequest),            //                         .waitrequest
		.av_address             (),                                                 //              (terminated)
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_byteenable          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_chipselect          (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (7),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) write_fifo_capacity_s0_translator (
		.clk                    (clock_bridge_out_clk_clk),                       //                      clk.clk
		.reset                  (export_slave_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (write_fifo_capacity_s0_agent_m0_address),        // avalon_universal_slave_0.address
		.uav_burstcount         (write_fifo_capacity_s0_agent_m0_burstcount),     //                         .burstcount
		.uav_read               (write_fifo_capacity_s0_agent_m0_read),           //                         .read
		.uav_write              (write_fifo_capacity_s0_agent_m0_write),          //                         .write
		.uav_waitrequest        (write_fifo_capacity_s0_agent_m0_waitrequest),    //                         .waitrequest
		.uav_readdatavalid      (write_fifo_capacity_s0_agent_m0_readdatavalid),  //                         .readdatavalid
		.uav_byteenable         (write_fifo_capacity_s0_agent_m0_byteenable),     //                         .byteenable
		.uav_readdata           (write_fifo_capacity_s0_agent_m0_readdata),       //                         .readdata
		.uav_writedata          (write_fifo_capacity_s0_agent_m0_writedata),      //                         .writedata
		.uav_lock               (write_fifo_capacity_s0_agent_m0_lock),           //                         .lock
		.uav_debugaccess        (write_fifo_capacity_s0_agent_m0_debugaccess),    //                         .debugaccess
		.av_readdata            (write_fifo_capacity_s0_readdata),                //      avalon_anti_slave_0.readdata
		.av_address             (),                                               //              (terminated)
		.av_write               (),                                               //              (terminated)
		.av_read                (),                                               //              (terminated)
		.av_writedata           (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_chipselect          (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (7),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) read_slave_addr_fixer_s0_translator (
		.clk                    (clock_bridge_out_clk_clk),                        //                      clk.clk
		.reset                  (export_slave_reset_reset_bridge_in_reset_reset),  //                    reset.reset
		.uav_address            (read_slave_addr_fixer_s0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (read_slave_addr_fixer_s0_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (read_slave_addr_fixer_s0_agent_m0_read),          //                         .read
		.uav_write              (read_slave_addr_fixer_s0_agent_m0_write),         //                         .write
		.uav_waitrequest        (read_slave_addr_fixer_s0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (read_slave_addr_fixer_s0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (read_slave_addr_fixer_s0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (read_slave_addr_fixer_s0_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (read_slave_addr_fixer_s0_agent_m0_writedata),     //                         .writedata
		.uav_lock               (read_slave_addr_fixer_s0_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (read_slave_addr_fixer_s0_agent_m0_debugaccess),   //                         .debugaccess
		.av_write               (read_slave_addr_fixer_s0_write),                  //      avalon_anti_slave_0.write
		.av_read                (read_slave_addr_fixer_s0_read),                   //                         .read
		.av_readdata            (read_slave_addr_fixer_s0_readdata),               //                         .readdata
		.av_writedata           (read_slave_addr_fixer_s0_writedata),              //                         .writedata
		.av_waitrequest         (read_slave_addr_fixer_s0_waitrequest),            //                         .waitrequest
		.av_address             (),                                                //              (terminated)
		.av_begintransfer       (),                                                //              (terminated)
		.av_beginbursttransfer  (),                                                //              (terminated)
		.av_burstcount          (),                                                //              (terminated)
		.av_byteenable          (),                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                            //              (terminated)
		.av_writebyteenable     (),                                                //              (terminated)
		.av_lock                (),                                                //              (terminated)
		.av_chipselect          (),                                                //              (terminated)
		.av_clken               (),                                                //              (terminated)
		.uav_clken              (1'b0),                                            //              (terminated)
		.av_debugaccess         (),                                                //              (terminated)
		.av_outputenable        (),                                                //              (terminated)
		.uav_response           (),                                                //              (terminated)
		.av_response            (2'b00),                                           //              (terminated)
		.uav_writeresponsevalid (),                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (7),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) read_fifo_capacity_s0_translator (
		.clk                    (clock_bridge_out_clk_clk),                       //                      clk.clk
		.reset                  (export_slave_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (read_fifo_capacity_s0_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount         (read_fifo_capacity_s0_agent_m0_burstcount),      //                         .burstcount
		.uav_read               (read_fifo_capacity_s0_agent_m0_read),            //                         .read
		.uav_write              (read_fifo_capacity_s0_agent_m0_write),           //                         .write
		.uav_waitrequest        (read_fifo_capacity_s0_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid      (read_fifo_capacity_s0_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable         (read_fifo_capacity_s0_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata           (read_fifo_capacity_s0_agent_m0_readdata),        //                         .readdata
		.uav_writedata          (read_fifo_capacity_s0_agent_m0_writedata),       //                         .writedata
		.uav_lock               (read_fifo_capacity_s0_agent_m0_lock),            //                         .lock
		.uav_debugaccess        (read_fifo_capacity_s0_agent_m0_debugaccess),     //                         .debugaccess
		.av_readdata            (read_fifo_capacity_s0_readdata),                 //      avalon_anti_slave_0.readdata
		.av_address             (),                                               //              (terminated)
		.av_write               (),                                               //              (terminated)
		.av_read                (),                                               //              (terminated)
		.av_writedata           (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_chipselect          (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (7),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) write_slave_to_source_in_csr_translator (
		.clk                    (clock_bridge_out_clk_clk),                            //                      clk.clk
		.reset                  (export_slave_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (write_slave_to_source_in_csr_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (write_slave_to_source_in_csr_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (write_slave_to_source_in_csr_agent_m0_read),          //                         .read
		.uav_write              (write_slave_to_source_in_csr_agent_m0_write),         //                         .write
		.uav_waitrequest        (write_slave_to_source_in_csr_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (write_slave_to_source_in_csr_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (write_slave_to_source_in_csr_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (write_slave_to_source_in_csr_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (write_slave_to_source_in_csr_agent_m0_writedata),     //                         .writedata
		.uav_lock               (write_slave_to_source_in_csr_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (write_slave_to_source_in_csr_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (write_slave_to_source_in_csr_address),                //      avalon_anti_slave_0.address
		.av_write               (write_slave_to_source_in_csr_write),                  //                         .write
		.av_read                (write_slave_to_source_in_csr_read),                   //                         .read
		.av_readdata            (write_slave_to_source_in_csr_readdata),               //                         .readdata
		.av_writedata           (write_slave_to_source_in_csr_writedata),              //                         .writedata
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_chipselect          (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (7),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sink_to_read_slave_in_csr_translator (
		.clk                    (clock_bridge_out_clk_clk),                         //                      clk.clk
		.reset                  (export_slave_reset_reset_bridge_in_reset_reset),   //                    reset.reset
		.uav_address            (sink_to_read_slave_in_csr_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (sink_to_read_slave_in_csr_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (sink_to_read_slave_in_csr_agent_m0_read),          //                         .read
		.uav_write              (sink_to_read_slave_in_csr_agent_m0_write),         //                         .write
		.uav_waitrequest        (sink_to_read_slave_in_csr_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (sink_to_read_slave_in_csr_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (sink_to_read_slave_in_csr_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (sink_to_read_slave_in_csr_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (sink_to_read_slave_in_csr_agent_m0_writedata),     //                         .writedata
		.uav_lock               (sink_to_read_slave_in_csr_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (sink_to_read_slave_in_csr_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (sink_to_read_slave_in_csr_address),                //      avalon_anti_slave_0.address
		.av_write               (sink_to_read_slave_in_csr_write),                  //                         .write
		.av_read                (sink_to_read_slave_in_csr_read),                   //                         .read
		.av_readdata            (sink_to_read_slave_in_csr_readdata),               //                         .readdata
		.av_writedata           (sink_to_read_slave_in_csr_writedata),              //                         .writedata
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_byteenable          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_waitrequest         (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_chipselect          (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (7),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (2),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) connection_id_rom_s0_translator (
		.clk                    (clock_bridge_out_clk_clk),                       //                      clk.clk
		.reset                  (export_slave_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (connection_id_rom_s0_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (connection_id_rom_s0_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (connection_id_rom_s0_agent_m0_read),             //                         .read
		.uav_write              (connection_id_rom_s0_agent_m0_write),            //                         .write
		.uav_waitrequest        (connection_id_rom_s0_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (connection_id_rom_s0_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (connection_id_rom_s0_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (connection_id_rom_s0_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (connection_id_rom_s0_agent_m0_writedata),        //                         .writedata
		.uav_lock               (connection_id_rom_s0_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (connection_id_rom_s0_agent_m0_debugaccess),      //                         .debugaccess
		.av_address             (connection_id_rom_s0_address),                   //      avalon_anti_slave_0.address
		.av_write               (connection_id_rom_s0_write),                     //                         .write
		.av_read                (connection_id_rom_s0_read),                      //                         .read
		.av_readdata            (connection_id_rom_s0_readdata),                  //                         .readdata
		.av_writedata           (connection_id_rom_s0_writedata),                 //                         .writedata
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_chipselect          (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (7),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mm_mgmt_csr_translator (
		.clk                    (clock_bridge_out_clk_clk),                       //                      clk.clk
		.reset                  (export_slave_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (mm_mgmt_csr_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount         (mm_mgmt_csr_agent_m0_burstcount),                //                         .burstcount
		.uav_read               (mm_mgmt_csr_agent_m0_read),                      //                         .read
		.uav_write              (mm_mgmt_csr_agent_m0_write),                     //                         .write
		.uav_waitrequest        (mm_mgmt_csr_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid      (mm_mgmt_csr_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable         (mm_mgmt_csr_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata           (mm_mgmt_csr_agent_m0_readdata),                  //                         .readdata
		.uav_writedata          (mm_mgmt_csr_agent_m0_writedata),                 //                         .writedata
		.uav_lock               (mm_mgmt_csr_agent_m0_lock),                      //                         .lock
		.uav_debugaccess        (mm_mgmt_csr_agent_m0_debugaccess),               //                         .debugaccess
		.av_address             (mm_mgmt_csr_address),                            //      avalon_anti_slave_0.address
		.av_write               (mm_mgmt_csr_write),                              //                         .write
		.av_read                (mm_mgmt_csr_read),                               //                         .read
		.av_readdata            (mm_mgmt_csr_readdata),                           //                         .readdata
		.av_writedata           (mm_mgmt_csr_writedata),                          //                         .writedata
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_chipselect          (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (80),
		.PKT_ORI_BURST_SIZE_L      (78),
		.PKT_RESPONSE_STATUS_H     (77),
		.PKT_RESPONSE_STATUS_L     (76),
		.PKT_QOS_H                 (61),
		.PKT_QOS_L                 (61),
		.PKT_DATA_SIDEBAND_H       (59),
		.PKT_DATA_SIDEBAND_L       (59),
		.PKT_ADDR_SIDEBAND_H       (58),
		.PKT_ADDR_SIDEBAND_L       (58),
		.PKT_BURST_TYPE_H          (57),
		.PKT_BURST_TYPE_L          (56),
		.PKT_CACHE_H               (75),
		.PKT_CACHE_L               (72),
		.PKT_THREAD_ID_H           (68),
		.PKT_THREAD_ID_L           (68),
		.PKT_BURST_SIZE_H          (55),
		.PKT_BURST_SIZE_L          (53),
		.PKT_TRANS_EXCLUSIVE       (48),
		.PKT_TRANS_LOCK            (47),
		.PKT_BEGIN_BURST           (60),
		.PKT_PROTECTION_H          (71),
		.PKT_PROTECTION_L          (69),
		.PKT_BURSTWRAP_H           (52),
		.PKT_BURSTWRAP_L           (52),
		.PKT_BYTE_CNT_H            (51),
		.PKT_BYTE_CNT_L            (49),
		.PKT_ADDR_H                (42),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (43),
		.PKT_TRANS_POSTED          (44),
		.PKT_TRANS_WRITE           (45),
		.PKT_TRANS_READ            (46),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (64),
		.PKT_SRC_ID_L              (62),
		.PKT_DEST_ID_H             (67),
		.PKT_DEST_ID_L             (65),
		.ST_DATA_W                 (81),
		.ST_CHANNEL_W              (8),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) export_slave_m0_agent (
		.clk                   (clock_bridge_out_clk_clk),                                           //       clk.clk
		.reset                 (export_slave_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.av_address            (export_slave_m0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (export_slave_m0_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (export_slave_m0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (export_slave_m0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (export_slave_m0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (export_slave_m0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (export_slave_m0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (export_slave_m0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (export_slave_m0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (export_slave_m0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (export_slave_m0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (export_slave_m0_agent_cp_valid),                                     //        cp.valid
		.cp_data               (export_slave_m0_agent_cp_data),                                      //          .data
		.cp_startofpacket      (export_slave_m0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (export_slave_m0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (export_slave_m0_agent_cp_ready),                                     //          .ready
		.rp_valid              (export_slave_m0_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (export_slave_m0_limiter_rsp_src_data),                               //          .data
		.rp_channel            (export_slave_m0_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (export_slave_m0_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (export_slave_m0_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (export_slave_m0_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                   // (terminated)
		.av_writeresponsevalid ()                                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (80),
		.PKT_ORI_BURST_SIZE_L      (78),
		.PKT_RESPONSE_STATUS_H     (77),
		.PKT_RESPONSE_STATUS_L     (76),
		.PKT_BURST_SIZE_H          (55),
		.PKT_BURST_SIZE_L          (53),
		.PKT_TRANS_LOCK            (47),
		.PKT_BEGIN_BURST           (60),
		.PKT_PROTECTION_H          (71),
		.PKT_PROTECTION_L          (69),
		.PKT_BURSTWRAP_H           (52),
		.PKT_BURSTWRAP_L           (52),
		.PKT_BYTE_CNT_H            (51),
		.PKT_BYTE_CNT_L            (49),
		.PKT_ADDR_H                (42),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (43),
		.PKT_TRANS_POSTED          (44),
		.PKT_TRANS_WRITE           (45),
		.PKT_TRANS_READ            (46),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (64),
		.PKT_SRC_ID_L              (62),
		.PKT_DEST_ID_H             (67),
		.PKT_DEST_ID_L             (65),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (81),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) write_slave_addr_fixer_s0_agent (
		.clk                     (clock_bridge_out_clk_clk),                                   //             clk.clk
		.reset                   (export_slave_reset_reset_bridge_in_reset_reset),             //       clk_reset.reset
		.m0_address              (write_slave_addr_fixer_s0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (write_slave_addr_fixer_s0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (write_slave_addr_fixer_s0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (write_slave_addr_fixer_s0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (write_slave_addr_fixer_s0_agent_m0_lock),                    //                .lock
		.m0_readdata             (write_slave_addr_fixer_s0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (write_slave_addr_fixer_s0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (write_slave_addr_fixer_s0_agent_m0_read),                    //                .read
		.m0_waitrequest          (write_slave_addr_fixer_s0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (write_slave_addr_fixer_s0_agent_m0_writedata),               //                .writedata
		.m0_write                (write_slave_addr_fixer_s0_agent_m0_write),                   //                .write
		.rp_endofpacket          (write_slave_addr_fixer_s0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (write_slave_addr_fixer_s0_agent_rp_ready),                   //                .ready
		.rp_valid                (write_slave_addr_fixer_s0_agent_rp_valid),                   //                .valid
		.rp_data                 (write_slave_addr_fixer_s0_agent_rp_data),                    //                .data
		.rp_startofpacket        (write_slave_addr_fixer_s0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                          //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                          //                .valid
		.cp_data                 (cmd_mux_src_data),                                           //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                    //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                        //                .channel
		.rf_sink_ready           (write_slave_addr_fixer_s0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (write_slave_addr_fixer_s0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (write_slave_addr_fixer_s0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (write_slave_addr_fixer_s0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (write_slave_addr_fixer_s0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (write_slave_addr_fixer_s0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (write_slave_addr_fixer_s0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (write_slave_addr_fixer_s0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (write_slave_addr_fixer_s0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (write_slave_addr_fixer_s0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                              //                .error
		.rdata_fifo_src_ready    (write_slave_addr_fixer_s0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (write_slave_addr_fixer_s0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (write_slave_addr_fixer_s0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (82),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) write_slave_addr_fixer_s0_agent_rsp_fifo (
		.clk               (clock_bridge_out_clk_clk),                                   //       clk.clk
		.reset             (export_slave_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_data           (write_slave_addr_fixer_s0_agent_rf_source_data),             //        in.data
		.in_valid          (write_slave_addr_fixer_s0_agent_rf_source_valid),            //          .valid
		.in_ready          (write_slave_addr_fixer_s0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (write_slave_addr_fixer_s0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (write_slave_addr_fixer_s0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (write_slave_addr_fixer_s0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (write_slave_addr_fixer_s0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (write_slave_addr_fixer_s0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (write_slave_addr_fixer_s0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (write_slave_addr_fixer_s0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (80),
		.PKT_ORI_BURST_SIZE_L      (78),
		.PKT_RESPONSE_STATUS_H     (77),
		.PKT_RESPONSE_STATUS_L     (76),
		.PKT_BURST_SIZE_H          (55),
		.PKT_BURST_SIZE_L          (53),
		.PKT_TRANS_LOCK            (47),
		.PKT_BEGIN_BURST           (60),
		.PKT_PROTECTION_H          (71),
		.PKT_PROTECTION_L          (69),
		.PKT_BURSTWRAP_H           (52),
		.PKT_BURSTWRAP_L           (52),
		.PKT_BYTE_CNT_H            (51),
		.PKT_BYTE_CNT_L            (49),
		.PKT_ADDR_H                (42),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (43),
		.PKT_TRANS_POSTED          (44),
		.PKT_TRANS_WRITE           (45),
		.PKT_TRANS_READ            (46),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (64),
		.PKT_SRC_ID_L              (62),
		.PKT_DEST_ID_H             (67),
		.PKT_DEST_ID_L             (65),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (81),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) write_fifo_capacity_s0_agent (
		.clk                     (clock_bridge_out_clk_clk),                                //             clk.clk
		.reset                   (export_slave_reset_reset_bridge_in_reset_reset),          //       clk_reset.reset
		.m0_address              (write_fifo_capacity_s0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (write_fifo_capacity_s0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (write_fifo_capacity_s0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (write_fifo_capacity_s0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (write_fifo_capacity_s0_agent_m0_lock),                    //                .lock
		.m0_readdata             (write_fifo_capacity_s0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (write_fifo_capacity_s0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (write_fifo_capacity_s0_agent_m0_read),                    //                .read
		.m0_waitrequest          (write_fifo_capacity_s0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (write_fifo_capacity_s0_agent_m0_writedata),               //                .writedata
		.m0_write                (write_fifo_capacity_s0_agent_m0_write),                   //                .write
		.rp_endofpacket          (write_fifo_capacity_s0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (write_fifo_capacity_s0_agent_rp_ready),                   //                .ready
		.rp_valid                (write_fifo_capacity_s0_agent_rp_valid),                   //                .valid
		.rp_data                 (write_fifo_capacity_s0_agent_rp_data),                    //                .data
		.rp_startofpacket        (write_fifo_capacity_s0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                   //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                   //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                    //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                             //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                 //                .channel
		.rf_sink_ready           (write_fifo_capacity_s0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (write_fifo_capacity_s0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (write_fifo_capacity_s0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (write_fifo_capacity_s0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (write_fifo_capacity_s0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (write_fifo_capacity_s0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (write_fifo_capacity_s0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (write_fifo_capacity_s0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (write_fifo_capacity_s0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (write_fifo_capacity_s0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (write_fifo_capacity_s0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (write_fifo_capacity_s0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (write_fifo_capacity_s0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (82),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) write_fifo_capacity_s0_agent_rsp_fifo (
		.clk               (clock_bridge_out_clk_clk),                                //       clk.clk
		.reset             (export_slave_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (write_fifo_capacity_s0_agent_rf_source_data),             //        in.data
		.in_valid          (write_fifo_capacity_s0_agent_rf_source_valid),            //          .valid
		.in_ready          (write_fifo_capacity_s0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (write_fifo_capacity_s0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (write_fifo_capacity_s0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (write_fifo_capacity_s0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (write_fifo_capacity_s0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (write_fifo_capacity_s0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (write_fifo_capacity_s0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (write_fifo_capacity_s0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (80),
		.PKT_ORI_BURST_SIZE_L      (78),
		.PKT_RESPONSE_STATUS_H     (77),
		.PKT_RESPONSE_STATUS_L     (76),
		.PKT_BURST_SIZE_H          (55),
		.PKT_BURST_SIZE_L          (53),
		.PKT_TRANS_LOCK            (47),
		.PKT_BEGIN_BURST           (60),
		.PKT_PROTECTION_H          (71),
		.PKT_PROTECTION_L          (69),
		.PKT_BURSTWRAP_H           (52),
		.PKT_BURSTWRAP_L           (52),
		.PKT_BYTE_CNT_H            (51),
		.PKT_BYTE_CNT_L            (49),
		.PKT_ADDR_H                (42),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (43),
		.PKT_TRANS_POSTED          (44),
		.PKT_TRANS_WRITE           (45),
		.PKT_TRANS_READ            (46),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (64),
		.PKT_SRC_ID_L              (62),
		.PKT_DEST_ID_H             (67),
		.PKT_DEST_ID_L             (65),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (81),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) read_slave_addr_fixer_s0_agent (
		.clk                     (clock_bridge_out_clk_clk),                                  //             clk.clk
		.reset                   (export_slave_reset_reset_bridge_in_reset_reset),            //       clk_reset.reset
		.m0_address              (read_slave_addr_fixer_s0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (read_slave_addr_fixer_s0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (read_slave_addr_fixer_s0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (read_slave_addr_fixer_s0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (read_slave_addr_fixer_s0_agent_m0_lock),                    //                .lock
		.m0_readdata             (read_slave_addr_fixer_s0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (read_slave_addr_fixer_s0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (read_slave_addr_fixer_s0_agent_m0_read),                    //                .read
		.m0_waitrequest          (read_slave_addr_fixer_s0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (read_slave_addr_fixer_s0_agent_m0_writedata),               //                .writedata
		.m0_write                (read_slave_addr_fixer_s0_agent_m0_write),                   //                .write
		.rp_endofpacket          (read_slave_addr_fixer_s0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (read_slave_addr_fixer_s0_agent_rp_ready),                   //                .ready
		.rp_valid                (read_slave_addr_fixer_s0_agent_rp_valid),                   //                .valid
		.rp_data                 (read_slave_addr_fixer_s0_agent_rp_data),                    //                .data
		.rp_startofpacket        (read_slave_addr_fixer_s0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                     //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                     //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                      //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                             //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                               //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                   //                .channel
		.rf_sink_ready           (read_slave_addr_fixer_s0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (read_slave_addr_fixer_s0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (read_slave_addr_fixer_s0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (read_slave_addr_fixer_s0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (read_slave_addr_fixer_s0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (read_slave_addr_fixer_s0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (read_slave_addr_fixer_s0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (read_slave_addr_fixer_s0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (read_slave_addr_fixer_s0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (read_slave_addr_fixer_s0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                         //                .error
		.rdata_fifo_src_ready    (read_slave_addr_fixer_s0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (read_slave_addr_fixer_s0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (read_slave_addr_fixer_s0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (82),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) read_slave_addr_fixer_s0_agent_rsp_fifo (
		.clk               (clock_bridge_out_clk_clk),                                  //       clk.clk
		.reset             (export_slave_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (read_slave_addr_fixer_s0_agent_rf_source_data),             //        in.data
		.in_valid          (read_slave_addr_fixer_s0_agent_rf_source_valid),            //          .valid
		.in_ready          (read_slave_addr_fixer_s0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (read_slave_addr_fixer_s0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (read_slave_addr_fixer_s0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (read_slave_addr_fixer_s0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (read_slave_addr_fixer_s0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (read_slave_addr_fixer_s0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (read_slave_addr_fixer_s0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (read_slave_addr_fixer_s0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (80),
		.PKT_ORI_BURST_SIZE_L      (78),
		.PKT_RESPONSE_STATUS_H     (77),
		.PKT_RESPONSE_STATUS_L     (76),
		.PKT_BURST_SIZE_H          (55),
		.PKT_BURST_SIZE_L          (53),
		.PKT_TRANS_LOCK            (47),
		.PKT_BEGIN_BURST           (60),
		.PKT_PROTECTION_H          (71),
		.PKT_PROTECTION_L          (69),
		.PKT_BURSTWRAP_H           (52),
		.PKT_BURSTWRAP_L           (52),
		.PKT_BYTE_CNT_H            (51),
		.PKT_BYTE_CNT_L            (49),
		.PKT_ADDR_H                (42),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (43),
		.PKT_TRANS_POSTED          (44),
		.PKT_TRANS_WRITE           (45),
		.PKT_TRANS_READ            (46),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (64),
		.PKT_SRC_ID_L              (62),
		.PKT_DEST_ID_H             (67),
		.PKT_DEST_ID_L             (65),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (81),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) read_fifo_capacity_s0_agent (
		.clk                     (clock_bridge_out_clk_clk),                               //             clk.clk
		.reset                   (export_slave_reset_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (read_fifo_capacity_s0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (read_fifo_capacity_s0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (read_fifo_capacity_s0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (read_fifo_capacity_s0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (read_fifo_capacity_s0_agent_m0_lock),                    //                .lock
		.m0_readdata             (read_fifo_capacity_s0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (read_fifo_capacity_s0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (read_fifo_capacity_s0_agent_m0_read),                    //                .read
		.m0_waitrequest          (read_fifo_capacity_s0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (read_fifo_capacity_s0_agent_m0_writedata),               //                .writedata
		.m0_write                (read_fifo_capacity_s0_agent_m0_write),                   //                .write
		.rp_endofpacket          (read_fifo_capacity_s0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (read_fifo_capacity_s0_agent_rp_ready),                   //                .ready
		.rp_valid                (read_fifo_capacity_s0_agent_rp_valid),                   //                .valid
		.rp_data                 (read_fifo_capacity_s0_agent_rp_data),                    //                .data
		.rp_startofpacket        (read_fifo_capacity_s0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                  //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                  //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                   //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                          //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                            //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                                //                .channel
		.rf_sink_ready           (read_fifo_capacity_s0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (read_fifo_capacity_s0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (read_fifo_capacity_s0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (read_fifo_capacity_s0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (read_fifo_capacity_s0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (read_fifo_capacity_s0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (read_fifo_capacity_s0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (read_fifo_capacity_s0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (read_fifo_capacity_s0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (read_fifo_capacity_s0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                      //                .error
		.rdata_fifo_src_ready    (read_fifo_capacity_s0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (read_fifo_capacity_s0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (read_fifo_capacity_s0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (82),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) read_fifo_capacity_s0_agent_rsp_fifo (
		.clk               (clock_bridge_out_clk_clk),                               //       clk.clk
		.reset             (export_slave_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (read_fifo_capacity_s0_agent_rf_source_data),             //        in.data
		.in_valid          (read_fifo_capacity_s0_agent_rf_source_valid),            //          .valid
		.in_ready          (read_fifo_capacity_s0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (read_fifo_capacity_s0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (read_fifo_capacity_s0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (read_fifo_capacity_s0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (read_fifo_capacity_s0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (read_fifo_capacity_s0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (read_fifo_capacity_s0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (read_fifo_capacity_s0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (80),
		.PKT_ORI_BURST_SIZE_L      (78),
		.PKT_RESPONSE_STATUS_H     (77),
		.PKT_RESPONSE_STATUS_L     (76),
		.PKT_BURST_SIZE_H          (55),
		.PKT_BURST_SIZE_L          (53),
		.PKT_TRANS_LOCK            (47),
		.PKT_BEGIN_BURST           (60),
		.PKT_PROTECTION_H          (71),
		.PKT_PROTECTION_L          (69),
		.PKT_BURSTWRAP_H           (52),
		.PKT_BURSTWRAP_L           (52),
		.PKT_BYTE_CNT_H            (51),
		.PKT_BYTE_CNT_L            (49),
		.PKT_ADDR_H                (42),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (43),
		.PKT_TRANS_POSTED          (44),
		.PKT_TRANS_WRITE           (45),
		.PKT_TRANS_READ            (46),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (64),
		.PKT_SRC_ID_L              (62),
		.PKT_DEST_ID_H             (67),
		.PKT_DEST_ID_L             (65),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (81),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) write_slave_to_source_in_csr_agent (
		.clk                     (clock_bridge_out_clk_clk),                                      //             clk.clk
		.reset                   (export_slave_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (write_slave_to_source_in_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (write_slave_to_source_in_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (write_slave_to_source_in_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (write_slave_to_source_in_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (write_slave_to_source_in_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (write_slave_to_source_in_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (write_slave_to_source_in_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (write_slave_to_source_in_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (write_slave_to_source_in_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (write_slave_to_source_in_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (write_slave_to_source_in_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (write_slave_to_source_in_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (write_slave_to_source_in_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (write_slave_to_source_in_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (write_slave_to_source_in_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (write_slave_to_source_in_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                                         //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                                         //                .valid
		.cp_data                 (cmd_mux_004_src_data),                                          //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                                   //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                                       //                .channel
		.rf_sink_ready           (write_slave_to_source_in_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (write_slave_to_source_in_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (write_slave_to_source_in_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (write_slave_to_source_in_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (write_slave_to_source_in_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (write_slave_to_source_in_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (write_slave_to_source_in_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (write_slave_to_source_in_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (write_slave_to_source_in_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (write_slave_to_source_in_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (write_slave_to_source_in_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (write_slave_to_source_in_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (write_slave_to_source_in_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (82),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) write_slave_to_source_in_csr_agent_rsp_fifo (
		.clk               (clock_bridge_out_clk_clk),                                      //       clk.clk
		.reset             (export_slave_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (write_slave_to_source_in_csr_agent_rf_source_data),             //        in.data
		.in_valid          (write_slave_to_source_in_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (write_slave_to_source_in_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (write_slave_to_source_in_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (write_slave_to_source_in_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (write_slave_to_source_in_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (write_slave_to_source_in_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (write_slave_to_source_in_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (write_slave_to_source_in_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (write_slave_to_source_in_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (80),
		.PKT_ORI_BURST_SIZE_L      (78),
		.PKT_RESPONSE_STATUS_H     (77),
		.PKT_RESPONSE_STATUS_L     (76),
		.PKT_BURST_SIZE_H          (55),
		.PKT_BURST_SIZE_L          (53),
		.PKT_TRANS_LOCK            (47),
		.PKT_BEGIN_BURST           (60),
		.PKT_PROTECTION_H          (71),
		.PKT_PROTECTION_L          (69),
		.PKT_BURSTWRAP_H           (52),
		.PKT_BURSTWRAP_L           (52),
		.PKT_BYTE_CNT_H            (51),
		.PKT_BYTE_CNT_L            (49),
		.PKT_ADDR_H                (42),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (43),
		.PKT_TRANS_POSTED          (44),
		.PKT_TRANS_WRITE           (45),
		.PKT_TRANS_READ            (46),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (64),
		.PKT_SRC_ID_L              (62),
		.PKT_DEST_ID_H             (67),
		.PKT_DEST_ID_L             (65),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (81),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sink_to_read_slave_in_csr_agent (
		.clk                     (clock_bridge_out_clk_clk),                                   //             clk.clk
		.reset                   (export_slave_reset_reset_bridge_in_reset_reset),             //       clk_reset.reset
		.m0_address              (sink_to_read_slave_in_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sink_to_read_slave_in_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sink_to_read_slave_in_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sink_to_read_slave_in_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sink_to_read_slave_in_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (sink_to_read_slave_in_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sink_to_read_slave_in_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sink_to_read_slave_in_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (sink_to_read_slave_in_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sink_to_read_slave_in_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (sink_to_read_slave_in_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (sink_to_read_slave_in_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sink_to_read_slave_in_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (sink_to_read_slave_in_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (sink_to_read_slave_in_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (sink_to_read_slave_in_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                                      //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                                      //                .valid
		.cp_data                 (cmd_mux_005_src_data),                                       //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                              //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                                //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                                    //                .channel
		.rf_sink_ready           (sink_to_read_slave_in_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sink_to_read_slave_in_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sink_to_read_slave_in_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sink_to_read_slave_in_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sink_to_read_slave_in_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sink_to_read_slave_in_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sink_to_read_slave_in_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sink_to_read_slave_in_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sink_to_read_slave_in_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sink_to_read_slave_in_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                          //                .error
		.rdata_fifo_src_ready    (sink_to_read_slave_in_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sink_to_read_slave_in_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sink_to_read_slave_in_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (82),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sink_to_read_slave_in_csr_agent_rsp_fifo (
		.clk               (clock_bridge_out_clk_clk),                                   //       clk.clk
		.reset             (export_slave_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_data           (sink_to_read_slave_in_csr_agent_rf_source_data),             //        in.data
		.in_valid          (sink_to_read_slave_in_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (sink_to_read_slave_in_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sink_to_read_slave_in_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sink_to_read_slave_in_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sink_to_read_slave_in_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sink_to_read_slave_in_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sink_to_read_slave_in_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sink_to_read_slave_in_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sink_to_read_slave_in_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (80),
		.PKT_ORI_BURST_SIZE_L      (78),
		.PKT_RESPONSE_STATUS_H     (77),
		.PKT_RESPONSE_STATUS_L     (76),
		.PKT_BURST_SIZE_H          (55),
		.PKT_BURST_SIZE_L          (53),
		.PKT_TRANS_LOCK            (47),
		.PKT_BEGIN_BURST           (60),
		.PKT_PROTECTION_H          (71),
		.PKT_PROTECTION_L          (69),
		.PKT_BURSTWRAP_H           (52),
		.PKT_BURSTWRAP_L           (52),
		.PKT_BYTE_CNT_H            (51),
		.PKT_BYTE_CNT_L            (49),
		.PKT_ADDR_H                (42),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (43),
		.PKT_TRANS_POSTED          (44),
		.PKT_TRANS_WRITE           (45),
		.PKT_TRANS_READ            (46),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (64),
		.PKT_SRC_ID_L              (62),
		.PKT_DEST_ID_H             (67),
		.PKT_DEST_ID_L             (65),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (81),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) connection_id_rom_s0_agent (
		.clk                     (clock_bridge_out_clk_clk),                              //             clk.clk
		.reset                   (export_slave_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (connection_id_rom_s0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (connection_id_rom_s0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (connection_id_rom_s0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (connection_id_rom_s0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (connection_id_rom_s0_agent_m0_lock),                    //                .lock
		.m0_readdata             (connection_id_rom_s0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (connection_id_rom_s0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (connection_id_rom_s0_agent_m0_read),                    //                .read
		.m0_waitrequest          (connection_id_rom_s0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (connection_id_rom_s0_agent_m0_writedata),               //                .writedata
		.m0_write                (connection_id_rom_s0_agent_m0_write),                   //                .write
		.rp_endofpacket          (connection_id_rom_s0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (connection_id_rom_s0_agent_rp_ready),                   //                .ready
		.rp_valid                (connection_id_rom_s0_agent_rp_valid),                   //                .valid
		.rp_data                 (connection_id_rom_s0_agent_rp_data),                    //                .data
		.rp_startofpacket        (connection_id_rom_s0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                                 //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                                 //                .valid
		.cp_data                 (cmd_mux_006_src_data),                                  //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                           //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                               //                .channel
		.rf_sink_ready           (connection_id_rom_s0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (connection_id_rom_s0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (connection_id_rom_s0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (connection_id_rom_s0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (connection_id_rom_s0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (connection_id_rom_s0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (connection_id_rom_s0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (connection_id_rom_s0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (connection_id_rom_s0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (connection_id_rom_s0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                     //                .error
		.rdata_fifo_src_ready    (connection_id_rom_s0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (connection_id_rom_s0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (connection_id_rom_s0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (82),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) connection_id_rom_s0_agent_rsp_fifo (
		.clk               (clock_bridge_out_clk_clk),                              //       clk.clk
		.reset             (export_slave_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (connection_id_rom_s0_agent_rf_source_data),             //        in.data
		.in_valid          (connection_id_rom_s0_agent_rf_source_valid),            //          .valid
		.in_ready          (connection_id_rom_s0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (connection_id_rom_s0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (connection_id_rom_s0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (connection_id_rom_s0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (connection_id_rom_s0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (connection_id_rom_s0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (connection_id_rom_s0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (connection_id_rom_s0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (80),
		.PKT_ORI_BURST_SIZE_L      (78),
		.PKT_RESPONSE_STATUS_H     (77),
		.PKT_RESPONSE_STATUS_L     (76),
		.PKT_BURST_SIZE_H          (55),
		.PKT_BURST_SIZE_L          (53),
		.PKT_TRANS_LOCK            (47),
		.PKT_BEGIN_BURST           (60),
		.PKT_PROTECTION_H          (71),
		.PKT_PROTECTION_L          (69),
		.PKT_BURSTWRAP_H           (52),
		.PKT_BURSTWRAP_L           (52),
		.PKT_BYTE_CNT_H            (51),
		.PKT_BYTE_CNT_L            (49),
		.PKT_ADDR_H                (42),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (43),
		.PKT_TRANS_POSTED          (44),
		.PKT_TRANS_WRITE           (45),
		.PKT_TRANS_READ            (46),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (64),
		.PKT_SRC_ID_L              (62),
		.PKT_DEST_ID_H             (67),
		.PKT_DEST_ID_L             (65),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (81),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) mm_mgmt_csr_agent (
		.clk                     (clock_bridge_out_clk_clk),                       //             clk.clk
		.reset                   (export_slave_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (mm_mgmt_csr_agent_m0_address),                   //              m0.address
		.m0_burstcount           (mm_mgmt_csr_agent_m0_burstcount),                //                .burstcount
		.m0_byteenable           (mm_mgmt_csr_agent_m0_byteenable),                //                .byteenable
		.m0_debugaccess          (mm_mgmt_csr_agent_m0_debugaccess),               //                .debugaccess
		.m0_lock                 (mm_mgmt_csr_agent_m0_lock),                      //                .lock
		.m0_readdata             (mm_mgmt_csr_agent_m0_readdata),                  //                .readdata
		.m0_readdatavalid        (mm_mgmt_csr_agent_m0_readdatavalid),             //                .readdatavalid
		.m0_read                 (mm_mgmt_csr_agent_m0_read),                      //                .read
		.m0_waitrequest          (mm_mgmt_csr_agent_m0_waitrequest),               //                .waitrequest
		.m0_writedata            (mm_mgmt_csr_agent_m0_writedata),                 //                .writedata
		.m0_write                (mm_mgmt_csr_agent_m0_write),                     //                .write
		.rp_endofpacket          (mm_mgmt_csr_agent_rp_endofpacket),               //              rp.endofpacket
		.rp_ready                (mm_mgmt_csr_agent_rp_ready),                     //                .ready
		.rp_valid                (mm_mgmt_csr_agent_rp_valid),                     //                .valid
		.rp_data                 (mm_mgmt_csr_agent_rp_data),                      //                .data
		.rp_startofpacket        (mm_mgmt_csr_agent_rp_startofpacket),             //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_007_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                        //                .channel
		.rf_sink_ready           (mm_mgmt_csr_agent_rsp_fifo_out_ready),           //         rf_sink.ready
		.rf_sink_valid           (mm_mgmt_csr_agent_rsp_fifo_out_valid),           //                .valid
		.rf_sink_startofpacket   (mm_mgmt_csr_agent_rsp_fifo_out_startofpacket),   //                .startofpacket
		.rf_sink_endofpacket     (mm_mgmt_csr_agent_rsp_fifo_out_endofpacket),     //                .endofpacket
		.rf_sink_data            (mm_mgmt_csr_agent_rsp_fifo_out_data),            //                .data
		.rf_source_ready         (mm_mgmt_csr_agent_rf_source_ready),              //       rf_source.ready
		.rf_source_valid         (mm_mgmt_csr_agent_rf_source_valid),              //                .valid
		.rf_source_startofpacket (mm_mgmt_csr_agent_rf_source_startofpacket),      //                .startofpacket
		.rf_source_endofpacket   (mm_mgmt_csr_agent_rf_source_endofpacket),        //                .endofpacket
		.rf_source_data          (mm_mgmt_csr_agent_rf_source_data),               //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),              //                .error
		.rdata_fifo_src_ready    (mm_mgmt_csr_agent_rdata_fifo_src_ready),         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mm_mgmt_csr_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_src_data     (mm_mgmt_csr_agent_rdata_fifo_src_data),          //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (82),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mm_mgmt_csr_agent_rsp_fifo (
		.clk               (clock_bridge_out_clk_clk),                       //       clk.clk
		.reset             (export_slave_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (mm_mgmt_csr_agent_rf_source_data),               //        in.data
		.in_valid          (mm_mgmt_csr_agent_rf_source_valid),              //          .valid
		.in_ready          (mm_mgmt_csr_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (mm_mgmt_csr_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (mm_mgmt_csr_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (mm_mgmt_csr_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (mm_mgmt_csr_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (mm_mgmt_csr_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (mm_mgmt_csr_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (mm_mgmt_csr_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	soc_system_sld_hub_controller_system_0_link_mm_interconnect_0_router router (
		.sink_ready         (export_slave_m0_agent_cp_ready),                 //      sink.ready
		.sink_valid         (export_slave_m0_agent_cp_valid),                 //          .valid
		.sink_data          (export_slave_m0_agent_cp_data),                  //          .data
		.sink_startofpacket (export_slave_m0_agent_cp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (export_slave_m0_agent_cp_endofpacket),           //          .endofpacket
		.clk                (clock_bridge_out_clk_clk),                       //       clk.clk
		.reset              (export_slave_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                               //       src.ready
		.src_valid          (router_src_valid),                               //          .valid
		.src_data           (router_src_data),                                //          .data
		.src_channel        (router_src_channel),                             //          .channel
		.src_startofpacket  (router_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                          //          .endofpacket
	);

	soc_system_sld_hub_controller_system_0_link_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (write_slave_addr_fixer_s0_agent_rp_ready),         //      sink.ready
		.sink_valid         (write_slave_addr_fixer_s0_agent_rp_valid),         //          .valid
		.sink_data          (write_slave_addr_fixer_s0_agent_rp_data),          //          .data
		.sink_startofpacket (write_slave_addr_fixer_s0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (write_slave_addr_fixer_s0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clock_bridge_out_clk_clk),                         //       clk.clk
		.reset              (export_slave_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_001_src_ready),                             //       src.ready
		.src_valid          (router_001_src_valid),                             //          .valid
		.src_data           (router_001_src_data),                              //          .data
		.src_channel        (router_001_src_channel),                           //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                        //          .endofpacket
	);

	soc_system_sld_hub_controller_system_0_link_mm_interconnect_0_router_001 router_002 (
		.sink_ready         (write_fifo_capacity_s0_agent_rp_ready),          //      sink.ready
		.sink_valid         (write_fifo_capacity_s0_agent_rp_valid),          //          .valid
		.sink_data          (write_fifo_capacity_s0_agent_rp_data),           //          .data
		.sink_startofpacket (write_fifo_capacity_s0_agent_rp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (write_fifo_capacity_s0_agent_rp_endofpacket),    //          .endofpacket
		.clk                (clock_bridge_out_clk_clk),                       //       clk.clk
		.reset              (export_slave_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                           //       src.ready
		.src_valid          (router_002_src_valid),                           //          .valid
		.src_data           (router_002_src_data),                            //          .data
		.src_channel        (router_002_src_channel),                         //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                      //          .endofpacket
	);

	soc_system_sld_hub_controller_system_0_link_mm_interconnect_0_router_001 router_003 (
		.sink_ready         (read_slave_addr_fixer_s0_agent_rp_ready),         //      sink.ready
		.sink_valid         (read_slave_addr_fixer_s0_agent_rp_valid),         //          .valid
		.sink_data          (read_slave_addr_fixer_s0_agent_rp_data),          //          .data
		.sink_startofpacket (read_slave_addr_fixer_s0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (read_slave_addr_fixer_s0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clock_bridge_out_clk_clk),                        //       clk.clk
		.reset              (export_slave_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_003_src_ready),                            //       src.ready
		.src_valid          (router_003_src_valid),                            //          .valid
		.src_data           (router_003_src_data),                             //          .data
		.src_channel        (router_003_src_channel),                          //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                       //          .endofpacket
	);

	soc_system_sld_hub_controller_system_0_link_mm_interconnect_0_router_001 router_004 (
		.sink_ready         (read_fifo_capacity_s0_agent_rp_ready),           //      sink.ready
		.sink_valid         (read_fifo_capacity_s0_agent_rp_valid),           //          .valid
		.sink_data          (read_fifo_capacity_s0_agent_rp_data),            //          .data
		.sink_startofpacket (read_fifo_capacity_s0_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (read_fifo_capacity_s0_agent_rp_endofpacket),     //          .endofpacket
		.clk                (clock_bridge_out_clk_clk),                       //       clk.clk
		.reset              (export_slave_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                           //       src.ready
		.src_valid          (router_004_src_valid),                           //          .valid
		.src_data           (router_004_src_data),                            //          .data
		.src_channel        (router_004_src_channel),                         //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                      //          .endofpacket
	);

	soc_system_sld_hub_controller_system_0_link_mm_interconnect_0_router_001 router_005 (
		.sink_ready         (write_slave_to_source_in_csr_agent_rp_ready),         //      sink.ready
		.sink_valid         (write_slave_to_source_in_csr_agent_rp_valid),         //          .valid
		.sink_data          (write_slave_to_source_in_csr_agent_rp_data),          //          .data
		.sink_startofpacket (write_slave_to_source_in_csr_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (write_slave_to_source_in_csr_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clock_bridge_out_clk_clk),                            //       clk.clk
		.reset              (export_slave_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_005_src_ready),                                //       src.ready
		.src_valid          (router_005_src_valid),                                //          .valid
		.src_data           (router_005_src_data),                                 //          .data
		.src_channel        (router_005_src_channel),                              //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                           //          .endofpacket
	);

	soc_system_sld_hub_controller_system_0_link_mm_interconnect_0_router_001 router_006 (
		.sink_ready         (sink_to_read_slave_in_csr_agent_rp_ready),         //      sink.ready
		.sink_valid         (sink_to_read_slave_in_csr_agent_rp_valid),         //          .valid
		.sink_data          (sink_to_read_slave_in_csr_agent_rp_data),          //          .data
		.sink_startofpacket (sink_to_read_slave_in_csr_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sink_to_read_slave_in_csr_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clock_bridge_out_clk_clk),                         //       clk.clk
		.reset              (export_slave_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_006_src_ready),                             //       src.ready
		.src_valid          (router_006_src_valid),                             //          .valid
		.src_data           (router_006_src_data),                              //          .data
		.src_channel        (router_006_src_channel),                           //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                        //          .endofpacket
	);

	soc_system_sld_hub_controller_system_0_link_mm_interconnect_0_router_001 router_007 (
		.sink_ready         (connection_id_rom_s0_agent_rp_ready),            //      sink.ready
		.sink_valid         (connection_id_rom_s0_agent_rp_valid),            //          .valid
		.sink_data          (connection_id_rom_s0_agent_rp_data),             //          .data
		.sink_startofpacket (connection_id_rom_s0_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (connection_id_rom_s0_agent_rp_endofpacket),      //          .endofpacket
		.clk                (clock_bridge_out_clk_clk),                       //       clk.clk
		.reset              (export_slave_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                           //       src.ready
		.src_valid          (router_007_src_valid),                           //          .valid
		.src_data           (router_007_src_data),                            //          .data
		.src_channel        (router_007_src_channel),                         //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                      //          .endofpacket
	);

	soc_system_sld_hub_controller_system_0_link_mm_interconnect_0_router_001 router_008 (
		.sink_ready         (mm_mgmt_csr_agent_rp_ready),                     //      sink.ready
		.sink_valid         (mm_mgmt_csr_agent_rp_valid),                     //          .valid
		.sink_data          (mm_mgmt_csr_agent_rp_data),                      //          .data
		.sink_startofpacket (mm_mgmt_csr_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (mm_mgmt_csr_agent_rp_endofpacket),               //          .endofpacket
		.clk                (clock_bridge_out_clk_clk),                       //       clk.clk
		.reset              (export_slave_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                           //       src.ready
		.src_valid          (router_008_src_valid),                           //          .valid
		.src_data           (router_008_src_data),                            //          .data
		.src_channel        (router_008_src_channel),                         //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                      //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (67),
		.PKT_DEST_ID_L             (65),
		.PKT_SRC_ID_H              (64),
		.PKT_SRC_ID_L              (62),
		.PKT_BYTE_CNT_H            (51),
		.PKT_BYTE_CNT_L            (49),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (44),
		.PKT_TRANS_WRITE           (45),
		.MAX_OUTSTANDING_RESPONSES (2),
		.PIPELINED                 (0),
		.ST_DATA_W                 (81),
		.ST_CHANNEL_W              (8),
		.VALID_WIDTH               (8),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) export_slave_m0_limiter (
		.clk                    (clock_bridge_out_clk_clk),                       //       clk.clk
		.reset                  (export_slave_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                               //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                               //          .valid
		.cmd_sink_data          (router_src_data),                                //          .data
		.cmd_sink_channel       (router_src_channel),                             //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                       //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                         //          .endofpacket
		.cmd_src_ready          (export_slave_m0_limiter_cmd_src_ready),          //   cmd_src.ready
		.cmd_src_data           (export_slave_m0_limiter_cmd_src_data),           //          .data
		.cmd_src_channel        (export_slave_m0_limiter_cmd_src_channel),        //          .channel
		.cmd_src_startofpacket  (export_slave_m0_limiter_cmd_src_startofpacket),  //          .startofpacket
		.cmd_src_endofpacket    (export_slave_m0_limiter_cmd_src_endofpacket),    //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                              //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                              //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                            //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                               //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                      //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                        //          .endofpacket
		.rsp_src_ready          (export_slave_m0_limiter_rsp_src_ready),          //   rsp_src.ready
		.rsp_src_valid          (export_slave_m0_limiter_rsp_src_valid),          //          .valid
		.rsp_src_data           (export_slave_m0_limiter_rsp_src_data),           //          .data
		.rsp_src_channel        (export_slave_m0_limiter_rsp_src_channel),        //          .channel
		.rsp_src_startofpacket  (export_slave_m0_limiter_rsp_src_startofpacket),  //          .startofpacket
		.rsp_src_endofpacket    (export_slave_m0_limiter_rsp_src_endofpacket),    //          .endofpacket
		.cmd_src_valid          (export_slave_m0_limiter_cmd_valid_data)          // cmd_valid.data
	);

	soc_system_sld_hub_controller_system_0_link_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (clock_bridge_out_clk_clk),                       //        clk.clk
		.reset              (export_slave_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (export_slave_m0_limiter_cmd_src_ready),          //       sink.ready
		.sink_channel       (export_slave_m0_limiter_cmd_src_channel),        //           .channel
		.sink_data          (export_slave_m0_limiter_cmd_src_data),           //           .data
		.sink_startofpacket (export_slave_m0_limiter_cmd_src_startofpacket),  //           .startofpacket
		.sink_endofpacket   (export_slave_m0_limiter_cmd_src_endofpacket),    //           .endofpacket
		.sink_valid         (export_slave_m0_limiter_cmd_valid_data),         // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                           //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                           //           .valid
		.src0_data          (cmd_demux_src0_data),                            //           .data
		.src0_channel       (cmd_demux_src0_channel),                         //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                   //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                     //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                           //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                           //           .valid
		.src1_data          (cmd_demux_src1_data),                            //           .data
		.src1_channel       (cmd_demux_src1_channel),                         //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                   //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                     //           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                           //       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                           //           .valid
		.src2_data          (cmd_demux_src2_data),                            //           .data
		.src2_channel       (cmd_demux_src2_channel),                         //           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                   //           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                     //           .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                           //       src3.ready
		.src3_valid         (cmd_demux_src3_valid),                           //           .valid
		.src3_data          (cmd_demux_src3_data),                            //           .data
		.src3_channel       (cmd_demux_src3_channel),                         //           .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                   //           .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket),                     //           .endofpacket
		.src4_ready         (cmd_demux_src4_ready),                           //       src4.ready
		.src4_valid         (cmd_demux_src4_valid),                           //           .valid
		.src4_data          (cmd_demux_src4_data),                            //           .data
		.src4_channel       (cmd_demux_src4_channel),                         //           .channel
		.src4_startofpacket (cmd_demux_src4_startofpacket),                   //           .startofpacket
		.src4_endofpacket   (cmd_demux_src4_endofpacket),                     //           .endofpacket
		.src5_ready         (cmd_demux_src5_ready),                           //       src5.ready
		.src5_valid         (cmd_demux_src5_valid),                           //           .valid
		.src5_data          (cmd_demux_src5_data),                            //           .data
		.src5_channel       (cmd_demux_src5_channel),                         //           .channel
		.src5_startofpacket (cmd_demux_src5_startofpacket),                   //           .startofpacket
		.src5_endofpacket   (cmd_demux_src5_endofpacket),                     //           .endofpacket
		.src6_ready         (cmd_demux_src6_ready),                           //       src6.ready
		.src6_valid         (cmd_demux_src6_valid),                           //           .valid
		.src6_data          (cmd_demux_src6_data),                            //           .data
		.src6_channel       (cmd_demux_src6_channel),                         //           .channel
		.src6_startofpacket (cmd_demux_src6_startofpacket),                   //           .startofpacket
		.src6_endofpacket   (cmd_demux_src6_endofpacket),                     //           .endofpacket
		.src7_ready         (cmd_demux_src7_ready),                           //       src7.ready
		.src7_valid         (cmd_demux_src7_valid),                           //           .valid
		.src7_data          (cmd_demux_src7_data),                            //           .data
		.src7_channel       (cmd_demux_src7_channel),                         //           .channel
		.src7_startofpacket (cmd_demux_src7_startofpacket),                   //           .startofpacket
		.src7_endofpacket   (cmd_demux_src7_endofpacket)                      //           .endofpacket
	);

	soc_system_sld_hub_controller_system_0_link_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clock_bridge_out_clk_clk),                       //       clk.clk
		.reset               (export_slave_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_src_valid),                              //          .valid
		.src_data            (cmd_mux_src_data),                               //          .data
		.src_channel         (cmd_mux_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                         //          .channel
		.sink0_data          (cmd_demux_src0_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                      //          .endofpacket
	);

	soc_system_sld_hub_controller_system_0_link_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (clock_bridge_out_clk_clk),                       //       clk.clk
		.reset               (export_slave_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                          //          .valid
		.src_data            (cmd_mux_001_src_data),                           //          .data
		.src_channel         (cmd_mux_001_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                         //          .channel
		.sink0_data          (cmd_demux_src1_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                      //          .endofpacket
	);

	soc_system_sld_hub_controller_system_0_link_mm_interconnect_0_cmd_mux cmd_mux_002 (
		.clk                 (clock_bridge_out_clk_clk),                       //       clk.clk
		.reset               (export_slave_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                          //          .valid
		.src_data            (cmd_mux_002_src_data),                           //          .data
		.src_channel         (cmd_mux_002_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                         //          .channel
		.sink0_data          (cmd_demux_src2_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)                      //          .endofpacket
	);

	soc_system_sld_hub_controller_system_0_link_mm_interconnect_0_cmd_mux cmd_mux_003 (
		.clk                 (clock_bridge_out_clk_clk),                       //       clk.clk
		.reset               (export_slave_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                          //          .valid
		.src_data            (cmd_mux_003_src_data),                           //          .data
		.src_channel         (cmd_mux_003_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                         //          .channel
		.sink0_data          (cmd_demux_src3_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket)                      //          .endofpacket
	);

	soc_system_sld_hub_controller_system_0_link_mm_interconnect_0_cmd_mux cmd_mux_004 (
		.clk                 (clock_bridge_out_clk_clk),                       //       clk.clk
		.reset               (export_slave_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                          //          .valid
		.src_data            (cmd_mux_004_src_data),                           //          .data
		.src_channel         (cmd_mux_004_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                         //          .channel
		.sink0_data          (cmd_demux_src4_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket)                      //          .endofpacket
	);

	soc_system_sld_hub_controller_system_0_link_mm_interconnect_0_cmd_mux cmd_mux_005 (
		.clk                 (clock_bridge_out_clk_clk),                       //       clk.clk
		.reset               (export_slave_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                          //          .valid
		.src_data            (cmd_mux_005_src_data),                           //          .data
		.src_channel         (cmd_mux_005_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                         //          .channel
		.sink0_data          (cmd_demux_src5_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket)                      //          .endofpacket
	);

	soc_system_sld_hub_controller_system_0_link_mm_interconnect_0_cmd_mux cmd_mux_006 (
		.clk                 (clock_bridge_out_clk_clk),                       //       clk.clk
		.reset               (export_slave_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                          //          .valid
		.src_data            (cmd_mux_006_src_data),                           //          .data
		.src_channel         (cmd_mux_006_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                         //          .channel
		.sink0_data          (cmd_demux_src6_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket)                      //          .endofpacket
	);

	soc_system_sld_hub_controller_system_0_link_mm_interconnect_0_cmd_mux cmd_mux_007 (
		.clk                 (clock_bridge_out_clk_clk),                       //       clk.clk
		.reset               (export_slave_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                          //          .valid
		.src_data            (cmd_mux_007_src_data),                           //          .data
		.src_channel         (cmd_mux_007_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                         //          .channel
		.sink0_data          (cmd_demux_src7_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket)                      //          .endofpacket
	);

	soc_system_sld_hub_controller_system_0_link_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (clock_bridge_out_clk_clk),                       //       clk.clk
		.reset              (export_slave_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                           //      sink.ready
		.sink_channel       (router_001_src_channel),                         //          .channel
		.sink_data          (router_001_src_data),                            //          .data
		.sink_startofpacket (router_001_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_001_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_src0_data),                            //          .data
		.src0_channel       (rsp_demux_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                      //          .endofpacket
	);

	soc_system_sld_hub_controller_system_0_link_mm_interconnect_0_rsp_demux rsp_demux_001 (
		.clk                (clock_bridge_out_clk_clk),                       //       clk.clk
		.reset              (export_slave_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                           //      sink.ready
		.sink_channel       (router_002_src_channel),                         //          .channel
		.sink_data          (router_002_src_data),                            //          .data
		.sink_startofpacket (router_002_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_002_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_001_src0_data),                        //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                  //          .endofpacket
	);

	soc_system_sld_hub_controller_system_0_link_mm_interconnect_0_rsp_demux rsp_demux_002 (
		.clk                (clock_bridge_out_clk_clk),                       //       clk.clk
		.reset              (export_slave_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                           //      sink.ready
		.sink_channel       (router_003_src_channel),                         //          .channel
		.sink_data          (router_003_src_data),                            //          .data
		.sink_startofpacket (router_003_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_003_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_002_src0_data),                        //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                  //          .endofpacket
	);

	soc_system_sld_hub_controller_system_0_link_mm_interconnect_0_rsp_demux rsp_demux_003 (
		.clk                (clock_bridge_out_clk_clk),                       //       clk.clk
		.reset              (export_slave_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                           //      sink.ready
		.sink_channel       (router_004_src_channel),                         //          .channel
		.sink_data          (router_004_src_data),                            //          .data
		.sink_startofpacket (router_004_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_004_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_003_src0_data),                        //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                  //          .endofpacket
	);

	soc_system_sld_hub_controller_system_0_link_mm_interconnect_0_rsp_demux rsp_demux_004 (
		.clk                (clock_bridge_out_clk_clk),                       //       clk.clk
		.reset              (export_slave_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                           //      sink.ready
		.sink_channel       (router_005_src_channel),                         //          .channel
		.sink_data          (router_005_src_data),                            //          .data
		.sink_startofpacket (router_005_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_005_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_004_src0_data),                        //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                  //          .endofpacket
	);

	soc_system_sld_hub_controller_system_0_link_mm_interconnect_0_rsp_demux rsp_demux_005 (
		.clk                (clock_bridge_out_clk_clk),                       //       clk.clk
		.reset              (export_slave_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                           //      sink.ready
		.sink_channel       (router_006_src_channel),                         //          .channel
		.sink_data          (router_006_src_data),                            //          .data
		.sink_startofpacket (router_006_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_006_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_005_src0_data),                        //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                  //          .endofpacket
	);

	soc_system_sld_hub_controller_system_0_link_mm_interconnect_0_rsp_demux rsp_demux_006 (
		.clk                (clock_bridge_out_clk_clk),                       //       clk.clk
		.reset              (export_slave_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                           //      sink.ready
		.sink_channel       (router_007_src_channel),                         //          .channel
		.sink_data          (router_007_src_data),                            //          .data
		.sink_startofpacket (router_007_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_007_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_006_src0_data),                        //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)                  //          .endofpacket
	);

	soc_system_sld_hub_controller_system_0_link_mm_interconnect_0_rsp_demux rsp_demux_007 (
		.clk                (clock_bridge_out_clk_clk),                       //       clk.clk
		.reset              (export_slave_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                           //      sink.ready
		.sink_channel       (router_008_src_channel),                         //          .channel
		.sink_data          (router_008_src_data),                            //          .data
		.sink_startofpacket (router_008_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_008_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_007_src0_data),                        //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)                  //          .endofpacket
	);

	soc_system_sld_hub_controller_system_0_link_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (clock_bridge_out_clk_clk),                       //       clk.clk
		.reset               (export_slave_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                              //       src.ready
		.src_valid           (rsp_mux_src_valid),                              //          .valid
		.src_data            (rsp_mux_src_data),                               //          .data
		.src_channel         (rsp_mux_src_channel),                            //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                           //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                           //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                         //          .channel
		.sink0_data          (rsp_demux_src0_data),                            //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                     //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                       //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                       //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                     //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                        //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),                 //          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                       //     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                       //          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                     //          .channel
		.sink2_data          (rsp_demux_002_src0_data),                        //          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),               //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),                 //          .endofpacket
		.sink3_ready         (rsp_demux_003_src0_ready),                       //     sink3.ready
		.sink3_valid         (rsp_demux_003_src0_valid),                       //          .valid
		.sink3_channel       (rsp_demux_003_src0_channel),                     //          .channel
		.sink3_data          (rsp_demux_003_src0_data),                        //          .data
		.sink3_startofpacket (rsp_demux_003_src0_startofpacket),               //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src0_endofpacket),                 //          .endofpacket
		.sink4_ready         (rsp_demux_004_src0_ready),                       //     sink4.ready
		.sink4_valid         (rsp_demux_004_src0_valid),                       //          .valid
		.sink4_channel       (rsp_demux_004_src0_channel),                     //          .channel
		.sink4_data          (rsp_demux_004_src0_data),                        //          .data
		.sink4_startofpacket (rsp_demux_004_src0_startofpacket),               //          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src0_endofpacket),                 //          .endofpacket
		.sink5_ready         (rsp_demux_005_src0_ready),                       //     sink5.ready
		.sink5_valid         (rsp_demux_005_src0_valid),                       //          .valid
		.sink5_channel       (rsp_demux_005_src0_channel),                     //          .channel
		.sink5_data          (rsp_demux_005_src0_data),                        //          .data
		.sink5_startofpacket (rsp_demux_005_src0_startofpacket),               //          .startofpacket
		.sink5_endofpacket   (rsp_demux_005_src0_endofpacket),                 //          .endofpacket
		.sink6_ready         (rsp_demux_006_src0_ready),                       //     sink6.ready
		.sink6_valid         (rsp_demux_006_src0_valid),                       //          .valid
		.sink6_channel       (rsp_demux_006_src0_channel),                     //          .channel
		.sink6_data          (rsp_demux_006_src0_data),                        //          .data
		.sink6_startofpacket (rsp_demux_006_src0_startofpacket),               //          .startofpacket
		.sink6_endofpacket   (rsp_demux_006_src0_endofpacket),                 //          .endofpacket
		.sink7_ready         (rsp_demux_007_src0_ready),                       //     sink7.ready
		.sink7_valid         (rsp_demux_007_src0_valid),                       //          .valid
		.sink7_channel       (rsp_demux_007_src0_channel),                     //          .channel
		.sink7_data          (rsp_demux_007_src0_data),                        //          .data
		.sink7_startofpacket (rsp_demux_007_src0_startofpacket),               //          .startofpacket
		.sink7_endofpacket   (rsp_demux_007_src0_endofpacket)                  //          .endofpacket
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clock_bridge_out_clk_clk),                             // in_clk_0.clk
		.in_rst_0_reset (export_slave_reset_reset_bridge_in_reset_reset),       // in_rst_0.reset
		.in_0_data      (write_slave_addr_fixer_s0_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (write_slave_addr_fixer_s0_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (write_slave_addr_fixer_s0_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                         //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                        //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                        //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                         //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clock_bridge_out_clk_clk),                          // in_clk_0.clk
		.in_rst_0_reset (export_slave_reset_reset_bridge_in_reset_reset),    // in_rst_0.reset
		.in_0_data      (write_fifo_capacity_s0_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (write_fifo_capacity_s0_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (write_fifo_capacity_s0_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                  //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clock_bridge_out_clk_clk),                            // in_clk_0.clk
		.in_rst_0_reset (export_slave_reset_reset_bridge_in_reset_reset),      // in_rst_0.reset
		.in_0_data      (read_slave_addr_fixer_s0_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (read_slave_addr_fixer_s0_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (read_slave_addr_fixer_s0_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                    //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (clock_bridge_out_clk_clk),                         // in_clk_0.clk
		.in_rst_0_reset (export_slave_reset_reset_bridge_in_reset_reset),   // in_rst_0.reset
		.in_0_data      (read_fifo_capacity_s0_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (read_fifo_capacity_s0_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (read_fifo_capacity_s0_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                 //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (clock_bridge_out_clk_clk),                                // in_clk_0.clk
		.in_rst_0_reset (export_slave_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (write_slave_to_source_in_csr_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (write_slave_to_source_in_csr_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (write_slave_to_source_in_csr_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                        //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (clock_bridge_out_clk_clk),                             // in_clk_0.clk
		.in_rst_0_reset (export_slave_reset_reset_bridge_in_reset_reset),       // in_rst_0.reset
		.in_0_data      (sink_to_read_slave_in_csr_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (sink_to_read_slave_in_csr_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (sink_to_read_slave_in_csr_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                     //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (clock_bridge_out_clk_clk),                        // in_clk_0.clk
		.in_rst_0_reset (export_slave_reset_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (connection_id_rom_s0_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (connection_id_rom_s0_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (connection_id_rom_s0_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),                //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),               //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),               //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)                //         .error
	);

	soc_system_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (clock_bridge_out_clk_clk),                       // in_clk_0.clk
		.in_rst_0_reset (export_slave_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (mm_mgmt_csr_agent_rdata_fifo_src_data),          //     in_0.data
		.in_0_valid     (mm_mgmt_csr_agent_rdata_fifo_src_valid),         //         .valid
		.in_0_ready     (mm_mgmt_csr_agent_rdata_fifo_src_ready),         //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)               //         .error
	);

endmodule
